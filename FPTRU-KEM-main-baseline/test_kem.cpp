#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include "params.h"
#include "kem.h"
#include "poly.h"

#define NTESTS 1000

void test_kem()
{
  unsigned int i, j;
  unsigned char k1[FPTRU_SHAREDKEYBYTES], k2[FPTRU_SHAREDKEYBYTES];
  unsigned char pk[FPTRU_KEM_PUBLICKEYBYTES]={0};
  unsigned char sk[FPTRU_KEM_SECRETKEYBYTES]={0};
  unsigned char ct[FPTRU_KEM_CIPHERTEXTBYTES] = {0};

  for (i = 0; i < NTESTS; i++)
  {
    crypto_kem_keygen(pk, sk);
    crypto_kem_encaps(ct, k1, pk);

    // for(int i=0;i<FPTRU_KEM_CIPHERTEXTBYTES;i++){
    //         printf("0x%x,",ct[i]);
    //     }
    //     printf("\n\n");

    //     printf("result k1\n");
    //     for(int i=0;i<FPTRU_SHAREDKEYBYTES;i++){
    //         printf("0x%x,",k1[i]);
    //     }
    //     printf("\n\n");


    crypto_kem_decaps(k2, ct, sk);

    // printf("result k2\n");
    //     for(int i=0;i<FPTRU_SHAREDKEYBYTES;i++){
    //         printf("0x%x,",k2[i]);
    //     }
    //     printf("\n\n");

    for (j = 0; j < FPTRU_SHAREDKEYBYTES; j++)
      if (k1[j] != k2[j])
      {
        printf("Round %d. Failure: Keys dont match: %hhx != %hhx!\n", i, k1[j], k2[j]);
        return;
      }
  }

  printf("FPTRU-%d-KEM is correct!\n", FPTRU_N);

  printf("Test %d times.\n\n", NTESTS);
  printf("FPTRU_N = %d, FPTRU_Q = %d, FPTRU_Q2 = %d\n", FPTRU_N, FPTRU_Q, FPTRU_Q2);
  printf("KEM size: pk = %d bytes, ct = %d bytes, bandwidth = %d bytes\n\n",
         FPTRU_KEM_PUBLICKEYBYTES, FPTRU_KEM_CIPHERTEXTBYTES,
         FPTRU_KEM_PUBLICKEYBYTES + FPTRU_KEM_CIPHERTEXTBYTES);
}
//int16_t coes1[FPTRU_N] = {163,112,338,590,221,381,1017,571,762,419,278,571,776,693,785,0,58,337,47,361,36,633,44,891,46,105,796,527,929,178,328,102,953,886,313,909,219,382,336,825,92,1021,278,377,744,312,316,695,294,251,138,653,860,308,681,407,456,304,231,44,205,527,459,143,602,301,321,305,875,277,392,797,1021,76,367,267,577,379,260,158,614,711,899,573,409,291,218,288,647,396,302,970,737,439,486,80,954,1013,906,472,639,708,332,520,555,868,29,967,244,998,793,652,271,75,396,454,141,97,986,40,693,352,404,528,162,1008,489,591,256,283,301,397,590,158,56,397,976,321,223,782,725,454,853,181,307,264,160,266,17,368,333,630,483,842,380,931,447,410,438,235,251,979,1018,670,632,463,177,544,787,156,823,791,459,731,909,894,687,748,491,220,288,710,728,775,490,1005,104,937,783,145,47,454,9,162,78,834,908,70,97,248,74,678,51,183,787,526,557,613,261,501,478,60,9,220,124,633,27,467,585,586,99,821,175,883,791,786,352,434,717,444,146,1020,55,299,626,839,340,498,513,743,877,882,299,586,451,952,238,231,905,637,612,196,582,107,262,74,614,332,380,16,493,205,968,556,2,629,514,942,23,890,840,742,977,860,255,152,345,609,940,560,633,50,843,357,558,632,555,75,710,953,962,542,224,147,94,382,1004,712,989,383,105,638,345,899,892,24,735,298,21,32,846,389,675,410,950,757,635,206,831,1003,384,870,787,329,493,736,408,46,750,639,409,956,244,250,734,815,497,117,730,114,16,462,676,7,786,655,324,768,693,229,892,520,768,108,414,751,269,486,88,392,324,534,639,800,349,964,590,656,574,863,601,783,315,499,229,925,136,657,901,1022,545,193,12,634,129,757,490,537,44,614,770,881,312,601,27,810,983,704,616,28,489,683,268,742,570,31,674,80,573,668,279,780,639,590,913,736,796,104,1014,411,296,93,7,532,832,764,464,724,801,127,626,598,310,576,144,617,390,163,544,353,498,841,976,387,870,252,946,242,694,203,702,544,378,8,747,370,701,641,927,1007,646,165,720,887,28,520,720,942,889,156,794,66,260,189,1005,85,23,84,869,86,526,364,111,756,400,94,612,943,549,47,667,958,301,969,706,200,763,105,920,970,1004,769,708,231,12,483,502,246,635,556,601,74,311,138,461,883,481,836,769,578,864,757,777,214,456,776,822,421,207,871,470,147,814,365,704,318,525,843,801,555,502,433,897,294,390,34,958,68,48,969,1011,382,463,107,71,794,825,549,829,864,1001,561,39,420,987,170,176,383,830,167,136,495,733,288,779,630,126,987,658,591,408,153,862,781,248,652,342,379,354,964,899,196,316,324,144,246,380,248,240,186,358,191,728,1,246,507,282,1016,727,621,963,385,783,61,339,406,682,40,954,196,830,29,449,698,56,535,131,382,102,885,930,273,223,884,52,560,922,538,907,36,863,589,425,674,771,981,572,43,457,848,851,908,950,997,815,770,894,587,692,840,500,377,558,251,970,907,205,886,524,101,412,406,479,284,483,854,834,1014,992,299,624,145,937,912,199,323,61,395,193,759,241,221,865,312,617,14,218,347,951,891,402,352,431,505,557,277,793,502,343,835,687,1004,850,770,374,774,86,443,651,1005,787,956,474,531,443,131,34,93,620,353,826,73,311,641,618,908,672,106,163,27,713,772,210,464,283,561,200,39,951,468,883,548,871,889,529,357,931,912,649,99,1019,128,671,94,70,229,180,346,335,302,803,810,633,334,32,735,425,113,631,747,206,46,562,643,792,526,564,191,254,408,521,465,894,108,427,782,663,376,725,966,276,578,154,39,369,830,752,179,176,876,1018,879,282,118,342,617,828,582,648,372,427,295,850,70,622,445,908,112,78,795,26,567,301,216,326,617,825,330,69,282,974,627,31,522,516,200,68,249,852,438,811,420,624,366,344,57,758,180,221,890,486,243,987,535,703,577,362,978,309,958,610,496,677,412,652,376,415,772,397,140,896,346,35,749,61,799,567,102,959,299,7,254,242,501,160,375,844,953,715,1009,130,381,289,165,730,107,481,494,222,61,959,550,825,72,479,46,6,391,671,276,210,511,911,581,581,342,386,170,998,466,663,866,584,136,350,431,869,942,448,921,213,946,933,263,355,984,774,209,189,314,164,857,43,1016,71,864,662,477,999,355,76,398,696,356,375,574,428,726,646,393,482,575,823,808,894,993,767,761,204,645,392,61,390,195,93,690,206,210,693,581,617,91,9,165,61,219,652,918,269,572,404,588,135,439,691,867,692,1007,138,64,410,81,713,585,332,320,524,35,469,829,536,818,448,409,749,434,806,575,568,649,375,980,144,471,916,684,1006,376,792,215,479,452,84,604,825,994,915,266,772,932,620,511,490,859,543,835,144,865,37,208,99,795,131,721,513,86,636,592,638,757,863,377,735,563,536,935,208,1015,627,980,1010,889,997,186,747,395,350,418,726,119,120,905,214,678,874,243,174,930,232,792,298,72,621,456,506,646,259,549,323,364,944,206,910,31,184,552,568,355,248,140,625,827,515,475,18,864,630,42,730,650,662,311,476,710,658,447,255,583,99,320,611,355,282,663,639,133,54,918,124,280,411,390,871,141,394,541,349,162,82,427,984,214,576,268,697,987,815,645,882,935,52,357,540,575,697,68,51,365,192,352,124,671,554,251,321,508,625,28,881,455,982,882,251,885,669,913,782,455,991,80,32,708,191,319,495,317,455,832,362,353,649,836,99,278,669,448,973,196,609,78,88,897,613,582,926,700,157,218,332,41,202,565,93,540,379,603,70,253,708,736,275,763,550,675,364,811,610,79,549,293,13,195,933,680,711,948,715,876,791,292,232,450,1010,774,48,87,549,250,136,906,97,402,644,0,16,0,0,};
//int16_t coes2[FPTRU_N] = {-3,-2,2,0,4,2,0,0,0,0,0,0,2,2,0,-2,-2,2,0,-4,2,4,0,-4,0,4,-4,2,-4,0,-2,0,2,0,0,-2,2,2,0,0,-2,-4,2,0,-4,0,0,-2,-2,0,-2,-2,0,0,-4,2,-2,-4,-4,2,-4,2,0,2,0,4,-2,0,2,-2,0,0,-2,0,0,0,0,-2,4,4,-2,0,0,2,-2,0,2,0,-4,0,2,4,-2,2,-2,2,-2,0,0,0,2,-2,2,-2,0,0,2,0,0,0,0,0,2,-2,0,-2,2,0,4,-2,-2,-4,0,4,-2,-2,0,-2,-2,-4,-2,4,2,-2,2,0,4,2,2,0,2,0,0,2,-2,-2,-2,0,4,2,4,0,0,0,-2,-2,2,0,0,2,-2,-2,2,2,2,0,-2,0,-2,2,-2,0,-2,2,4,0,0,4,0,2,-2,2,0,-4,0,0,0,-2,2,0,0,-2,0,0,0,2,4,-2,0,2,-4,-4,2,0,-2,2,-4,0,-4,2,0,0,0,-4,0,-2,0,4,0,0,0,4,0,-2,0,0,2,2,-2,0,2,-2,-2,0,0,0,0,-2,-2,-2,-2,0,0,0,0,0,4,-2,0,0,0,2,2,-4,4,-2,-2,0,0,0,0,2,2,4,0,0,0,0,2,-2,4,4,-4,4,4,0,0,-2,2,2,-2,-2,0,2,2,-2,-2,-2,0,2,2,2,0,0,4,-2,4,0,0,2,-4,-2,0,0,0,0,0,-2,0,2,-4,2,0,0,0,0,2,2,-4,0,2,-2,0,0,0,-2,0,0,-2,0,2,0,-2,2,0,-4,2,0,-2,4,2,-2,0,-2,0,2,0,2,0,2,2,4,2,4,2,2,0,2,0,2,-2,-2,-2,2,-2,-2,0,0,2,2,-2,2,0,2,0,4,2,0,0,-2,4,0,0,-2,2,0,0,-2,0,2,2,4,2,2,-2,2,0,4,-2,2,0,4,-2,0,0,2,-2,-2,-2,-2,0,-2,0,-4,-2,0,0,-2,-2,2,0,0,0,2,-2,0,-2,-4,0,-2,0,2,-2,2,0,-2,0,0,2,2,-2,-2,0,2,0,0,0,-2,-2,0,-2,2,-2,-2,0,2,0,0,-4,0,0,0,0,0,0,0,-2,-2,0,-2,0,2,-2,2,0,-2,4,0,2,0,4,0,-2,2,-4,0,2,-2,2,-4,0,-4,-4,0,-2,-2,2,-2,-2,-2,0,0,0,2,2,2,-4,0,0,0,-4,-2,0,-2,0,0,0,-2,0,-2,0,0,2,2,-2,-4,0,-4,0,0,-2,-2,4,-4,0,0,0,2,0,0,0,0,-2,2,-2,2,0,0,2,-2,2,-2,-4,0,2,0,0,2,0,4,0,0,0,2,2,0,0,0,0,2,-2,-2,4,2,0,4,-2,-4,-2,0,2,0,-2,0,2,4,-2,0,-2,-2,2,0,2,2,0,2,4,4,0,-2,-2,2,2,-2,0,2,-2,2,0,2,-4,0,0,4,0,0,0,2,0,-2,-2,2,2,-4,0,0,0,4,0,0,0,4,0,2,-2,0,-2,2,0,-2,0,2,2,2,0,2,2,0,0,0,-2,0,-2,-2,2,0,2,0,0,0,0,-2,0,0,0,-2,2,0,4,2,0,0,2,0,-4,0,2,0,0,0,0,0,-2,2,0,-2,4,0,-2,2,2,0,0,2,2,2,-4,2,2,2,0,2,0,0,0,-2,0,4,-2,4,-4,2,-2,2,2,2,-2,2,2,2,0,2,-4,2,2,2,2,-2,0,2,0,0,0,0,-2,2,-2,-2,0,-2,-2,-2,0,0,4,4,-4,0,-2,4,-2,0,0,2,0,2,0,4,-2,2,2,2,4,4,2,0,0,0,0,0,4,2,2,-2,-2,0,0,-2,4,2,0,-4,2,-2,2,-2,-4,-4,2,0,-2,2,0,0,0,-2,0,2,0,0,0,0,0,2,-4,2,0,-2,2,0,-2,2,-2,-2,0,0,-2,2,2,-2,0,4,0,0,-4,-4,2,-2,0,-2,-2,0,0,-2,0,-4,2,-2,-2,0,2,-2,2,2,0,-4,2,2,0,0,0,-2,0,2,2,0,0,0,0,2,2,2,-2,-2,2,2,0,-2,0,0,2,2,2,0,2,0,2,-4,4,4,2,2,-2,0,4,4,0,0,0,2,-2,2,0,0,2,2,-2,0,-4,2,0,0,0,2,0,-2,0,-2,2,-4,0,-2,0,2,-4,-2,-2,0,-2,-2,-2,0,-4,0,0,0,-4,0,-2,0,-2,2,2,0,-2,0,0,-4,-2,2,0,0,0,0,0,-4,0,0,0,-2,-2,0,0,0,2,0,-2,0,0,0,2,0,0,4,-2,4,4,-2,0,2,-2,2,2,-2,2,0,-2,0,2,0,2,-4,-2,-2,-2,-4,0,-4,2,2,2,0,0,0,0,-2,0,-4,0,-2,4,0,0,-2,2,-4,0,2,0,0,-2,2,0,-2,-2,4,-2,-4,-2,-2,0,0,-4,-2,0,-2,-2,0,0,2,0,2,4,2,2,0,-2,2,0,0,0,0,2,-2,0,-2,0,0,-2,2,0,2,0,2,2,0,-2,2,-2,-2,0,-2,0,-2,0,0,0,0,0,0,0,0,4,0,-2,2,2,0,-4,0,-2,-2,0,0,0,0,-2,2,2,-4,0,2,0,4,2,0,-2,-4,2,0,2,-2,0,2,-2,-2,0,2,0,-2,0,-4,0,-2,-2,2,4,0,-4,2,0,-4,0,-2,-2,0,0,-4,-2,0,2,-4,0,0,0,2,2,0,-2,0,2,2,-4,2,2,-2,-2,0,0,2,-2,2,-2,4,2,-2,2,0,4,-2,0,0,0,0,2,-2,-2,-4,0,0,0,-2,2,2,2,-2,2,0,0,4,0,0,2,-2,0,-2,-2,2,-2,2,2,-4,2,4,2,4,4,0,2,-4,0,-2,0,-2,0,-2,4,-4,2,2,-4,-4,0,-4,0,2,0,-4,-2,0,0,0,0,0,-4,2,0,-4,0,2,0,0,-2,4,2,2,0,0,-2,-4,-4,0,2,4,0,0,0,0,2,0,-4,0,0,2,-2,4,0,0,-2,2,-2,-4,0,0,0,-2,-2,-2,0,2,-4,-2,-2,2,2,2,4,};
// void test_ntt(){
//   printf("start ntt\n");
//   poly a,b,c;
//   for(int i=0;i<FPTRU_N;i++){
//     a.coeffs[i]=coes1[i];
//     b.coeffs[i]=coes2[i];
//   }
//   poly_mul_q2(&c,&a,&b);
//   for(int i=0;i<FPTRU_N;i++){
//     printf("%d,",c.coeffs[i]);
//   }
//   printf("\n");
// }
int main()
{
  //test_ntt();
  test_kem();
  return 0;
}
