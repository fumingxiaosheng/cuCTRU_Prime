#include "kernel.h"
#include "params.h"
#include "kem.h"
#include "speed.h"
#include <iostream>
#include "./poly_mul_n653q/n653.h"
#include "poly.h"
#include "tensor.h"

using namespace std;


//int16_t coe1[FPTRU_N]={-273,-190,-148,-140,266,290,142,-246,-348,-162,88,-168,-188,-106,-312,-36,60,-112,86,244,-50,-92,-28,124,296,104,-238,20,476,224,-172,-270,-406,-162,-180,-134,34,0,292,88,-4,10,-10,-114,-238,-196,26,74,-52,-28,340,258,-170,168,88,-48,-8,-224,-358,36,32,58,44,-386,-242,-316,-374,348,222,-290,170,124,-266,-316,-116,-84,-36,-142,-174,-166,-2,-14,-298,-12,-18,-436,-96,84,-254,-174,-276,-458,-252,186,-66,-182,-144,136,-60,-94,-182,-148,-34,508,96,-132,-182,16,-34,-434,-120,-230,140,188,270,-94,-218,-254,-194,-348,58,-362,-220,-178,-34,6,-54,32,158,356,164,318,158,-374,-380,134,98,136,-166,128,-314,-606,12,138,266,500,362,-254,-60,324,-58,192,496,168,66,-26,-146,-256,14,184,24,-224,-70,-150,56,166,-6,20,-90,-216,-134,132,-8,-90,-236,100,-34,34,138,118,0,36,-92,42,-462,-296,312,-8,330,266,240,384,264,-174,242,486,406,140,298,94,216,-128,-54,418,574,362,164,36,-128,222,40,-122,70,148,-24,210,-30,-16,-214,-138,-322,-256,-196,-290,-24,96,132,150,-4,4,74,224,0,-188,-18,56,410,466,370,414,84,124,28,-146,-26,196,254,-24,-346,168,488,354,448,158,36,176,4,-160,-186,268,138,-56,-288,-342,-186,-310,-264,-218,194,132,-202,-630,-152,-88,-50,192,182,122,-44,-178,-268,252,170,78,222,-70,-438,56,38,46,162,298,120,84,-4,-86,196,-64,-50,4,-10,168,-36,68,-118,-118,20,-10,-156,-218,100,168,44,114,-102,-72,386,-90,-408,-192,-94,-104,82,-118,16,-140,-150,-16,-146,-370,-242,-112,-108,-78,-316,-338,10,-78,164,12,-260,-36,-220,-422,-92,-164,198,224,74,-138,266,-36,216,410,46,-46,164,20,352,36,-178,-42,-242,-14,-190,-138,-70,46,-154,150,-58,-388,-304,128,188,8,100,-152,16,-12,-248,-156,-84,-232,20,-62,-176,178,18,128,198,190,22,96,-154,-16,-114,-38,244,14,56,306,178,-178,-384,-152,96,98,182,-74,-40,-426,-348,84,96,-14,-28,140,94,-396,-232,-24,50,-166,-100,-318,-76,-350,-128,-74,44,-48,-112,-242,-206,156,-132,-94,-128,20,-8,284,-24,-316,176,32,-528,24,306,432,472,-64,-92,300,30,96,56,218,68,260,0,-86,196,164,8,44,-62,22,-192,286,30,-184,-410,-172,-126,108,-244,116,-34,-118,-78,-30,-220,-14,-138,-254,130,366,-8,80,402,272,178,-152,162,282,-94,16,26,-130,174,102,46,38,-256,50,30,-136,-200,32,-204,2,-116,2,-68,-34,-180,-28,72,-212,-274,158,56,194,16,-108,254,-118,4,-218,-34,38,90,-8,426,136,-256,228,232,200,272,36,-56,342,56,106,184,-176,308,210,400,40,172,-122,156,-178,302,100,-204,-88,-204,-328,260,-358,40,-312,-48,-56,-244,38,336,-224,224,130,60,-96,-214,-86,-68,114,52,-24,34,-206,-62,-212,210,-92,-148,-30,48,26,-204,-130,78,282,26,106,28,280,-64,12,212,340,-86,122,176,-88,96,-130,-384,58,248,-20,54,72,-62,-16,78,318,-82,-16,-34,108,80,-272,-66,24,322,158,222,60,-314,-110,102,0,-14,-10,-40,198,-286,110,42,170,-126,440,-108,-166,104,-224,242,38,-98};
//int16_t coe2[FPTRU_N] = {-1,-2,-2,-4,0,-2,0,-4,0,4,0,-4,0,2,-4,-2,6,0,2,2,-2,0,0,0,-4,0,0,-2,2,0,-2,0,0,0,-6,4,0,0,0,-4,4,0,2,-4,-2,2,2,-2,0,-2,-2,4,-2,0,2,-2,2,4,0,0,-6,0,2,0,0,0,-2,-2,4,2,0,0,2,2,0,4,-4,-4,2,-4,-2,2,-2,-2,0,0,0,-4,0,2,2,0,0,-2,0,0,0,0,0,0,0,2,-2,-2,2,0,-2,0,0,4,-2,-2,-4,0,2,4,0,-4,2,2,-2,0,0,2,4,0,4,0,0,0,2,2,-4,2,2,2,0,2,4,-2,6,2,4,-2,0,-2,-2,-4,-2,0,0,0,4,2,4,-4,-2,-4,4,-4,2,-2,2,0,4,-4,0,0,0,4,0,0,0,0,4,2,0,0,0,-2,2,2,4,4,-2,2,-2,0,2,2,2,2,-2,0,0,2,4,-2,0,-2,2,0,-2,4,4,-2,-2,-4,-2,-2,-4,-2,4,2,-2,0,-2,-2,0,0,2,-4,0,4,0,0,4,-6,-2,-2,0,2,-2,0,0,-4,0,-2,4,0,-4,-4,0,0,-2,-2,0,0,-2,2,0,4,2,4,-2,2,4,-4,0,-4,2,0,2,2,-2,-2,2,4,-2,-4,4,0,2,-2,4,2,4,-2,-4,-4,2,2,-2,-2,-2,4,2,4,-4,-2,2,-2,2,-2,-2,6,0,-2,2,-4,2,0,0,0,2,0,2,2,0,0,-2,-4,2,0,-2,4,0,-2,-2,4,0,-2,-2,2,2,-2,2,0,-2,-4,0,6,0,-2,2,0,-6,-2,-2,-2,-6,2,0,2,2,-4,2,0,0,0,2,4,-2,4,4,-4,2,2,-2,-2,0,2,2,2,2,-2,2,2,4,0,2,2,6,4,-4,-2,-4,-2,-4,2,2,-6,0,0,4,-2,2,0,0,2,4,0,4,-2,-2,0,0,-4,-2,-4,0,0,-2,0,0,0,-4,2,0,2,2,-2,2,-4,4,0,-2,2,-2,0,0,2,4,-2,0,0,0,2,-4,2,2,-4,2,2,0,-6,-2,2,-2,-4,0,2,-2,0,-4,0,-2,2,4,-2,-2,-4,-2,-2,0,2,4,-2,-4,2,-4,4,2,2,4,2,2,0,0,4,0,-2,0,-2,-2,2,0,4,-2,-2,0,-2,0,-4,-4,-4,-2,0,0,2,0,2,-2,-4,-2,2,2,-2,0,2,-2,-2,4,-2,0,0,-2,-2,2,-2,0,-2,-2,-2,-2,4,2,2,0,2,-2,0,2,-6,4,-2,2,0,-4,2,0,-2,0,0,-2,4,-2,-4,-4,4,-4,-4,-2,4,2,0,-2,0,2,0,-4,0,-2,0,0,2,-4,4,-4,-4,-2,0,2,0,2,2,2,0,2,-2,-2,2,2,-2,-4,0,-6,0,-4,-2,-2,0,0,0,2,0,0,-4,4,-2,2,2,0,-2,2,-2,-4,4,-2,-2,-2,0,4,2,-2,0,2,-2,0,0,4,-2,-2,2,-4,0,0,-2,0,2,0,0,4,-2,-2,0,-4,2,4,2,2,-2,-4,4,-2,0,-2,2,2,-2,2,2,0,-2,-2,-4,0,-2,-4,-2,-4,2,0};
int16_t coe1[FPTRU_N]={1142,725,-21,681,-640,1967,-2199,-1080,1868,2139,-238,-1191,-592,1408,-637,222,-578,-272,1586,2154,244,-604,-1971,-528,-1654,-959,-1448,-1607,79,259,-2288,804,-792,874,1394,-106,1838,-581,-1984,2156,-760,1705,-1015,793,-1159,443,276,-1165,118,1861,-2289,-1727,-1255,-703,279,-150,-1602,-1630,-1661,-996,142,-410,2104,-571,-1667,-1868,-71,1715,209,1715,388,14,1957,1866,-1569,-1002,492,-1906,-76,283,-2177,605,1328,1109,-1049,899,-1054,1447,-1119,-1779,-1971,-1622,2133,-950,-238,1234,541,-1746,594,-918,-775,-2161,528,53,1887,931,279,972,509,1868,1685,1510,1585,-722,1355,-1370,1595,-1147,7,152,-439,-1598,-1770,-1149,-416,-618,2286,1793,2026,383,-1336,-372,1394,-1559,911,2060,2303,927,1000,-2071,-2090,-1685,12,287,315,-503,920,28,668,-1641,1388,1031,-1394,684,-1773,-2108,200,-1730,-1026,747,1013,848,1012,-1807,-695,-1882,-848,-1096,116,1128,-1231,-92,-2310,978,-2204,-539,1685,-2061,-753,-408,2159,1875,-987,1596,1631,-535,260,75,-220,2021,-685,2058,1510,1065,118,-2260,652,1455,1755,1657,-193,-275,-1718,10,1142,1143,-947,-367,502,-1617,-771,399,85,-570,-1765,1962,1462,499,-2011,491,-874,-67,-512,-476,1240,-874,-1147,1927,1457,1696,-1212,-1440,1368,-1727,-1146,2205,835,1478,-719,-215,-456,-892,268,-2069,-141,1814,-2219,2266,254,-360,1444,381,1929,158,-2125,2231,-1796,390,671,1739,-1625,-100,1003,-1065,-2194,-1842,1259,-793,1953,-1374,2162,-2025,-224,-491,-773,-1919,-1765,5,-775,-525,1694,-720,1914,1751,-1283,1050,-2242,1196,-2027,1052,-1210,1864,1302,-2149,-357,-1268,596,-179,-1469,2028,1078,-1810,-765,-2241,1358,727,-616,439,1486,1976,-211,1838,1194,-491,-165,-1752,827,-820,1991,-1764,1446,555,-2261,126,-1347,1512,461,1054,-1379,-1978,1066,1175,2081,876,1483,303,1913,-614,731,1515,1064,-342,-726,1450,1874,-1705,1057,-976,1485,-35,-573,-86,-878,-692,-2011,1379,-808,-130,1185,1719,-683,2013,-1613,2072,-919,846,1215,784,854,-114,2301,-494,-861,-93,-1404,75,2020,525,-2147,-1017,780,-1114,-1210,-927,-1684,-17,-1922,-910,-1945,-782,19,-1033,-823,1361,-806,471,-14,1021,1010,-1828,610,21,-184,-1345,1305,-1316,-2161,-193,-639,2269,-666,-419,1537,-691,1361,-728,937,1960,1468,-127,-1477,2099,1172,-1744,-1575,1524,2067,-1203,-90,1759,-1519,1191,1371,-2116,1402,-2145,1384,-1219,1148,-1212,-658,-2017,1550,0,-2245,14,-903,268,285,1502,-689,-1630,-2071,-599,338,-1189,1315,-559,1451,-1890,-357,900,1424,906,-948,-582,1189,-301,2026,306,-1830,703,-1765,417,-1028,-1437,-2015,868,1545,699,1587,-395,-2119,-1175,1420,-406,673,-784,-162,-127,2247,-2095,-78,-226,1692,-2306,1839,1860,-1453,-956,-136,1795,-186,-2062,-510,-2287,-1006,-1982,1078,1316,-2157,-479,-1257,-2271,2193,-913,1610,2269,1034,1864,1757,605,2195,1705,1710,-2155,-101,1483,-1017,-1301,-25,-318,-2283,-451,388,2049,2025,1302,-71,-2129,756,2024,872,-1140,734,-448,1716,-170,2274,1493,1953,-1438,-1785,-571,-1155,-2125,-2088,2085,-925,-1618,1274,-2006,618,844,1645,-560,1737,-2285,-1457,68,693,-124,1627,-1443,-1746,24,-477,-1045,-500,-596,428,1992,2128,1633,2243,514,1255,-1695,-899,672,-1258,762,-2096,-1156,421,-502,621,-1268,2064,-1709,1006,786,-2299,2213,1937,-1658,-1325,673,1583,844,1542,143,-77,999,-1601,-1656,1427,-1671,1201,1756,565,912,-1424,1277,1465,1734,-1132,186,2067,1146,-2010,-1938,-671,-865,-975,131,2263,-1236,456,1855,1067,1881,2047,1660,-1343,-1860,-501,-1372,-1049,1452,268,-1880,1499};
int16_t coe2[FPTRU_N] = {-3,2,-4,2,-2,2,2,2,2,2,-4,-2,-2,-2,-2,-2,4,0,2,-4,0,-2,0,-4,0,2,-4,0,-2,0,2,4,-6,4,-2,4,0,2,-4,2,-4,-2,-2,2,0,0,4,2,4,2,2,0,6,0,2,-6,2,-2,4,-2,0,-2,0,-2,2,0,4,4,0,-2,-4,-4,-2,-4,0,-4,0,-2,2,6,-2,0,-4,0,0,-4,2,2,-2,-2,0,2,0,0,4,-4,0,-4,2,-2,-4,-2,-2,4,4,0,4,-2,2,-2,0,2,-4,2,0,-2,0,4,0,0,-2,0,0,0,-6,-4,0,-2,-2,2,4,2,-4,0,0,0,-2,-2,4,4,0,0,0,-4,0,6,4,2,0,0,-4,-2,0,2,-2,6,-2,2,-2,-2,0,-2,0,0,0,-2,-2,-2,0,-2,-2,0,0,4,2,0,-4,-2,0,-4,0,-2,2,4,2,0,0,-2,0,2,-2,2,2,0,-4,2,2,0,2,-2,0,-2,0,-2,2,-2,-4,2,0,4,-2,2,4,2,0,-2,0,-2,-2,-4,0,0,2,-4,0,-2,0,-4,0,4,-2,-4,-2,2,0,-4,-2,4,-2,2,0,0,2,4,0,0,2,0,2,-2,2,6,-4,-2,6,-6,4,2,0,4,0,-2,2,2,2,0,-4,0,2,-2,2,-2,-2,-4,-2,4,-2,-2,-4,0,0,2,2,0,0,0,-2,2,2,2,0,2,-4,-2,-2,2,0,2,2,-4,2,-4,-2,0,4,-2,-2,0,4,0,0,-2,0,4,-2,0,4,0,-4,4,-2,4,-2,0,2,2,4,0,2,2,0,2,4,-4,0,0,-2,0,0,0,0,2,-2,2,-6,0,-2,0,-2,0,-2,2,0,-2,0,2,0,4,4,-2,2,4,0,2,0,-4,0,-2,0,0,2,-6,-2,-2,4,2,0,-2,4,0,0,0,-4,0,2,4,-4,-4,-2,2,4,0,0,2,-2,2,2,0,2,0,2,2,2,-2,0,4,-2,0,2,-4,0,2,-2,2,2,-6,-6,2,-2,2,2,0,4,-2,-4,2,0,-2,4,2,2,0,0,0,4,2,0,-2,0,2,-4,4,-2,-2,0,0,2,0,2,-4,-2,-2,0,-2,0,2,-2,0,0,4,4,2,4,0,-4,0,0,0,0,-2,0,2,-4,2,4,0,0,0,-2,-4,-2,2,-2,2,4,0,0,4,0,-4,0,2,0,0,2,-4,-2,-6,0,0,-4,4,0,-2,0,0,-4,0,0,0,4,0,-4,-2,-4,-2,-4,2,-2,2,0,6,4,-2,-6,2,4,2,-4,2,2,-2,2,0,2,4,0,0,4,0,-2,2,2,0,-4,2,0,0,2,-4,0,2,2,4,6,0,4,4,-2,-2,0,0,2,2,-2,2,0,2,-4,-4,4,2,2,0,-4,-2,-4,0,2,-2,-6,-2,2,-2,2,4,-4,2,2,0,0,-2,0,-2,-4,-6,-2,0,0,0,-2,0,2,2,4,-4,2,0,-2,4,-2,4,2,0,-2,4,-2,4,0,0,4,-2,-2,2,-2,2,-2,0,-2,2,2,0,-4,2,-4,0,4,-4,0,2,-4,-4,-2,2,-4,0,2,-2,2,0,-4,2,4};

//unsigned char PK[FPTRU_KEM_PUBLICKEYBYTES]={0x92,0xf3,0x21,0xfe,0x81,0xce,0xdb,0x58,0x8d,0x1c,0x21,0xe2,0xc7,0x86,0x26,0xb8,0xda,0xca,0x80,0x20,0x13,0x88,0x1f,0xc9,0x9,0x9a,0xc6,0xa7,0x48,0xc1,0x32,0xe4,0x61,0x63,0x49,0x49,0x98,0xcf,0x32,0x89,0xfb,0x9b,0x91,0xec,0xf6,0x31,0x4d,0x2e,0x61,0xb5,0xf0,0xae,0x7b,0x7a,0xc5,0x5d,0x7b,0xba,0x4b,0xa8,0xa7,0x18,0x4,0xb6,0xf6,0xf9,0xa7,0xea,0x43,0x47,0xdf,0x9a,0x50,0x1,0x2e,0xad,0x5e,0xa8,0xad,0x1c,0x76,0x86,0xd1,0xda,0x25,0x35,0x3c,0xe1,0x8c,0xec,0xbf,0x52,0xbb,0x5d,0xf3,0x88,0x84,0xf7,0xc0,0xd3,0xf5,0x98,0xdc,0xbb,0x2d,0x1a,0x3c,0x12,0xca,0xa2,0xb6,0xc3,0x3a,0xb1,0xde,0x43,0xd2,0xcb,0xf7,0x37,0xbe,0x88,0x1a,0xea,0x9b,0xb2,0x79,0xae,0x48,0x44,0x30,0x83,0x6c,0x19,0x18,0xa9,0x36,0x9d,0x52,0x26,0x35,0x97,0xe4,0xbb,0x68,0x9d,0x31,0x5d,0xaa,0x61,0xfb,0x56,0xeb,0x8a,0x81,0x37,0xf3,0x26,0x2f,0xc8,0xc,0xc8,0x1a,0x6e,0x90,0xf4,0x82,0x5b,0x45,0x80,0xb3,0x8b,0x84,0xc4,0xe5,0xe5,0xe,0xf8,0xe,0x4,0x4,0xb1,0xfb,0x66,0xad,0xd6,0x8,0xd4,0x61,0xcb,0x18,0xc6,0x67,0xc5,0x1a,0xe,0x29,0xbf,0x2,0x1f,0xa5,0x5b,0xe2,0x8a,0xb2,0xfa,0xf5,0xef,0xdb,0xc4,0x74,0x52,0x4e,0x45,0x32,0xd1,0xb9,0xef,0xbc,0x18,0x59,0x8a,0x5d,0x7e,0x40,0x9c,0x63,0x15,0xf0,0x48,0xad,0xba,0x7f,0xbd,0x3f,0xd4,0x49,0x3,0xd4,0xee,0xba,0xc0,0x6,0xb3,0x20,0xcb,0xc4,0x56,0xd,0x19,0xd3,0xbf,0xd9,0x4d,0xa3,0x87,0xde,0xb4,0x69,0xbb,0xb4,0x35,0xa6,0x35,0xaa,0xac,0x1e,0xb2,0x1,0x72,0x5f,0x41,0x18,0xe8,0x8d,0x82,0xfe,0x6,0xc6,0x21,0xa5,0x1e,0x0,0x75,0x80,0x4f,0xe6,0xd3,0x7d,0x5,0xfd,0x29,0x60,0xa1,0xf6,0x1b,0x18,0xfa,0x90,0x19,0x56,0xeb,0x67,0x32,0xa1,0xb2,0xbf,0xf3,0xee,0x75,0x73,0x7b,0xd2,0x2b,0xff,0xc6,0x72,0x5d,0xf0,0xc4,0x60,0xd,0x67,0x27,0xba,0x1d,0x32,0x1e,0x6e,0xcb,0xae,0xfd,0x63,0x12,0x5,0x18,0x3f,0x1c,0xad,0x9f,0x4f,0xff,0x62,0x86,0xce,0xb2,0x25,0xe7,0xe0,0xff,0x2f,0x57,0x4b,0xd3,0xea,0x9e,0x53,0xc0,0xa4,0xba,0x34,0x4c,0x6d,0xf,0x3f,0x9c,0xae,0xbe,0xf1,0xe0,0xe8,0x7d,0xd1,0x21,0x9a,0x2c,0x64,0xa7,0x46,0x2,0xf8,0xa0,0xc8,0xc6,0x14,0x19,0xf6,0xb6,0xe,0xeb,0x1d,0x22,0xf4,0xaf,0xa9,0x42,0x1c,0xb4,0xfc,0x4a,0x70,0xa7,0x7d,0xa2,0xb5,0x8a,0x7a,0x8d,0x44,0x67,0xa,0x4,0x66,0xa,0xce,0x2a,0x77,0xc2,0xeb,0x63,0x44,0xe5,0x68,0x29,0x92,0x9b,0x95,0x90,0xea,0x25,0xd4,0x8b,0x21,0x5a,0x86,0xb6,0x96,0x8a,0x7,0x63,0x48,0x3b,0xd8,0xaf,0xe9,0x65,0xb5,0x61,0xfd,0xe2,0x9a,0x17,0xf7,0x9a,0x8b,0xac,0x43,0x5e,0x73,0x31,0xfd,0x89,0x8b,0xd3,0x14,0x5b,0x22,0x59,0x1e,0xf9,0xdc,0xa9,0x52,0x7a,0x43,0x8b,0x61,0x5b,0xe6,0x76,0x50,0x3c,0x8,0x81,0xa5,0x91,0x44,0x9a,0xa4,0x65,0x76,0x21,0x48,0x56,0xf1,0xec,0x83,0xf0,0x93,0xbf,0x9d,0x10,0xee,0x2d,0xdb,0xf,0xff,0xa6,0xa1,0x87,0x93,0x6a,0x33,0xd3,0xb2,0x39,0x1f,0xc8,0xf2,0x66,0xcf,0xb2,0x15,0xd0,0xd0,0x3,0xfa,0xa0,0x26,0xeb,0x38,0x6e,0xd2,0x1f,0xa9,0x85,0x93,0xa0,0xe4,0x93,0x41,0x41,0x51,0xee,0xca,0xb5,0x48,0x58,0x45,0x8d,0x61,0x5f,0x6b,0x8b,0xa2,0x24,0xf8,0xd4,0xe4,0x3d,0x3c,0x77,0xf7,0x8,0x63,0x30,0x88,0x59,0xb0,0x53,0x90,0xdc,0xe3,0xe6,0x33,0x8e,0x69,0x3,0xc7,0xd2,0x87,0x8,0x7a,0x93,0x92,0x3d,0xce,0x49,0xef,0x16,0x75,0xc9,0x6a,0xbf,0x36,0x96,0x14,0xd7,0xb7,0x59,0x24,0xc7,0x10,0xcd,0x85,0xe2,0x78,0x75,0xfa,0xc4,0xf6,0x0,0xb9,0xc1,0x1d,0xae,0x2b,0xc0,0xde,0xd6,0xaa,0x56,0x9b,0x20,0x91,0xb1,0xe9,0xc7,0xd,0x24,0x86,0x54,0x33,0xa2,0xf6,0x16,0x55,0x14,0xc8,0xd5,0xf9,0x94,0x55,0xae,0x23,0x60,0xe0,0x45,0x30,0xe8,0x10,0x8a,0x4d,0xb7,0x14,0xd9,0xdb,0x7,0xe8,0xb5,0x1d,0xf4,0xd4,0x1e,0x79,0xc5,0xf5,0xe3,0x64,0x1,0x21,0x6a,0x0,0x42,0xd9,0x44,0x9b,0x97,0x73,0xfa,0xcc,0x27,0x6a,0x33,0x44,0x4d,0x10,0x36,0x95,0x15,0x20,0x33,0x4d,0x85,0x3d,0x3a,0xcd,0x8,0x16,0x6c,0x53,0xe7,0x24,0xd6,0x8e,0xbb,0x23,0x1a,0xb1,0x8b,0xc6,0x2b,0xed,0xa4,0xd0,0xa6,0x86,0x17,0xc7,0xa2,0x72,0x52,0x83,0xfa,0x20,0x78,0x3,0xef,0x4b,0xa,0xe5,0x61,0x1,0x9d,0x83,0x8a,0x57,0xac,0x65,0x2a,0x2a,0x65,0xf8,0x3b,0x8e,0xa5,0x77,0xe3,0x55,0xc6,0x6d,0xaa,0x74,0x13,0x61,0xb0,0x4e,0xf,0xe4,0xad,0xdd,0x66,0xd7,0x7c,0x66,0x2c,0x2f,0xfb,0x57,0xdb,0x7,0x1a,0x9a,0xc0,0x12,0xd3,0x15,0x3,0x42,0x2,0xf0,0x86,0xca,0x4d,0xbc,0xc6,0x5c,0xfc,0xd7,0xfc,0xe5,0x9b,0x76,0xc1,0x8b,0xb0,0x77,0xaa,0x81,0x34,0x51,0xf5,0x9,0xdf,0x1e,0xcc,0x60,0x56,0x6,0x9f,0x43,0x79,0x7b,0xf4,0x4a,0x40,0x24,0x7b,0x17,0xb3,0xe4,0x5c,0x60,0x46,0xc3,0x46,0x69,0x65,0xf8,0x16,0xcf,0x1b,0xc4,0xda,0x9e,0x82,0x48,0xd5,0x70,0x9f,0x7e,0x61,0xbf,0x90,0xad,0xe,0x2e,0x8d,0x99,0x81,0x6f,0x59,0xec,0x68,0x59,0xce,0xac,0xeb,0x88,0xac,0x1b,0x15,0x4f,0xc9,0x9,0x14,0x3d,0x85,0x75,0xd2,0x74,0xc3,0x47,0xe3,0x23,0xfa,0x13,0xb5,0x9e,0x2a,0xef,0x8f,0xb2,0xaf,0xe3,0x73,0x3f,0xb1,0xbf,0xe9,0x8e,0x86,0xd1,0x78,0xa4,0xe0,0xf1,0xa2,0x34,0x42,0x21,0x7b,0x49,0xb2,0x4b,0x2f,0x38,0xbf,0x40,0x9a,0x76,0x6a,0x7b,0xc0,0x24,0x94,0xaf,0x1c,0xfe,0xf7,0x26,0x28,0xf7,0x74,0x97,0x61,0x48,0x14,0xa1,0xb9,0x2c,0x1f,0xc2,0xaf,0x38,0x2e,0x1e,0xd2,0xd9,0x95,0x5f,0xbc,0x4a,0x57,0x3a,0x50,0x4a,0xc7,0xea,0xdd,0x68,0xe2,0x29,0xa3,0xce,0x98,0x77,0x96,0xee,0x40,0x46,0xc3,0x7f,0x74,0xa4,0xad,0xa6,0x31,0xf4,0x97,0x29,0x64,0xac,0x9f,0x60,0xe3,0x67,0xdf,0x67,0xc9,0xd9,0x24,0x12,0x1a,0x50,0xf5,0xd3,0xf8,0x1,0x1f,0x40,0x54,0xac,0x52,0x57,0xd9,0xef,0xfd,0x79,0xa3,0xbc,0xaf,0xb0,0x63,0xb,0xea,0xc1,0xd1,0x7b,0x35,0x20,0xba,0x77,0x5c,0xe,0x4f,0xc7,0x9a,0x79,0x85,0xfb,0x9a,0x6e,0x47,0x80,0x66,0xfc,0x4f,0xe2,0x7b,0x36,0xdd,0xef,0x13,0x9,0x5a,0x68,0x23,0xa2,0xe8,0xe7,0xdb,0xd7,0x72,0x42,0x79,0xf2,0xe6,0x16,0xe7,0xf9,0x73,0x3a,0x26,0x30,0x77,0x66,0x56,0xd5,0xd2,0x76,0x0,0x88,0xeb,0xbf,0x72,0x8d,0x9,0x94,0x89,0x4e,0x47,0xec,0xc,0x5a,0x4c,0x2c,0x1b,0x64,0x8f,0x38,0xd9,0x2d,0x42,0x7c,0x91,0xfa,0x59,0x97,0x9c,0x75,0x3c,0xca,0x87,0x2e,0x7a,0xad,0x95,0x84,0xb3,0xd7,0xf1,0xef,0x76,0x55,0xa3,0x4e,0xd8,0xe6,0xea,0xe8,0x20,0x96,0x3b,0x12,0x5a,0xe0,0xaf,0x21,0x3b,0xb1,0xf0,0xfd,0xa5,0xde,0x81,0xed,0xb7,0xd7,0xe9,0xbb,0xaa,0x74,0x94,0xb9,0xd0,0x5f,0xb0,0x58,0x96,0xeb,0x70,0xc5,0x9e,0xbd,0x24,0x10,0x47,0x98,0xc8,0x89,0x6f,0x53,0x1b,0x90,0x38,0x84,0x90,0x18,0x41,0xc4,0x81,0x76,0x39,0x50,0x53,0xe,0xa8,0xed,0x48,0x44,0x97,0xb,0xd3,0xb1,0xe9,0xdb,0x2e,0x5f,0x8a,0x60,0x5c,0xa4,0xac,0x6e,0x3d,0x36,0xa9,0xcd,0xfa,0x79,0x1d,0xaf,0x6,0x4c,0x2,0xc8,0x3f,0xb9,0x6a,0x0,0x56,0xf,0x74,0xd1,0xb3,0x84,0x7f,0xd,0x28,0x3a,0x73,0x42,0x79,0xb8,0x9a,0x75,0xb6,0x11,0x7b,0x37,0x9e,0x9a,0x99,0xb2,0x7c,0xe,0x56,0x7c,0x8b,0x69,0x61,0x2e,0xac,0xcb,0x9c,0xce,0x3d,0x5b,0xcc,0x2c,0x7b,0x1e,0xca,0xc2,0x8d,0xb0,0x48,0xf5,0xc5,0xfd,0x90,0x5f,0xe2,0xdf,0x75,0xee,0xc7,0x5d,0x14,0x81,0xc8,0x53,0xed,0x1f,0xae,0x8b,0x27,0x84,0x3,0xe9,0x71,0xa7,0x36,0xb9,0x0,0xd0,0x42,0x96,0xe,0x15,0x44,0x47,0xa2,0x3,0x58,0x4d,0xf5,0x6d,0x16,0x86,0x8d,0x11,0x4,0xd7,0xe2,0xf3,0x4c,0x36,0x6,0xd7,0x93,0xa2,0xaa,0xc1,0x8b,0xfb,0x72,0xf2,0xaf,0x20,0xea,0xd8,0xf5,0x3a,0x33,0x9f,0x90,0x79,0xfd,0x2e,0xa1,0x2a,0x24,0xf1,0x40,0xbd,0xd1,0xdf,0x59,0x33,0xfa,0xfd,0xab,0xd1,0xfc,0xdc,0xc5,0x82,0x35,0xda,0xb0,0xc7,0x17,0xd5,0xc7,0xce,0x3f,0x3b,0x9a,0x13,0x57,0x8c,0xdb,0x67,0xbb,0x9d,0x31,0x70,0xeb,0xd3,0xfc,0xd,0x15,0xdd,0x5c,0xe6,0xd2,0x56,0x1,0xf2,0xa,0x3,0xd8,0x4a,0xc,0x1,0x7b,0x9b,0xf3,0x9e,0x85,0x46,0x34,0xc8,0xc9,0x22,0x8a,0xfe,0x13,0x7d,0xc6,0x9e,0x89,0xa9,0xdf,0x88,0xfa,0x1d,0x7,0xf8,0x38,0x31,0x2b,0xc6,0x38,0x69,0x6e,0x47,0xba,0xcf,0xed,0x56,0xce,0xb2,0x2f,0x2f,0x92,0xf0,0xb8,0x17,0x9e,0xf0,0xbd,0x81,0xa1,0xcf,0xb,0x69,0x33,0x57,0x3d,0x3d,0xdc,0x3,0x84,0x58,0x28,0xb4,0x6c,0x59,0x95,0x7e,0x15,0x80,0x2a,0xf,0xc8,0x52,0x47,0xc5,0xe0,0x5a,0xf0,0x78,0xc1,0xec,0x58,0x47,0xd1,0x53,0x67,0x55,0x2d,0x97,0x2c,0x30,0xda,0x90,0xf7,0x8f,0xca,0x51,0x6e,0xc,0x67,0x6b,0xd4,0x1c,0x3a,0x78,0xe6,0x8c,0x7e,0xf,0x6c,0x49,0x8a,0xa2,0xf2,0x5c,0x43,0xde,0x55,0x4b,0x55,0x3a,0xc2,0x40,0x51,0x41,0xf4,0x4,0x53,0x32,0x71,0x14,0x8b,0xdd,0x2,0x91,0x41,0x56,0xd0,0x4,0x69,0x22,0x49,0x1d,0x1f,0xed,0x87,0x20,0x9b,0xc0,0x26,0xd9,0x64,0x55,0x5a,0xa,0xf,0xe6,0x34,0x11,0x2a,0x7b,0x65,0xac,0xc9,0x86,0xab,0x2b,0x45,0x83,0xe,0xd3,0x8c,0x78,0x13,0x29,0x75,0x57,0x21,0x81,0x6a,0x53,0x97,0xd,0xf3,0x9f,0xda,0xf1,0x1f,0x4,0xe2,0xad,0x3d,0x17,0xe,0x7c,0xfe,0xe1,0x70,0x4b,0x94,0x55,0xd2,0xc1,0xd7,0xf8,0xc6,0x77,0x1a,0x29,0x87,0xe9,0xc5,0xfe,0xe5,0xd0,0x3c,0x98,0xde,0xc2,0xb0,0xd2,0x1f,0xc4,0xfd,0x76,0xc5,0x8e,0x61,0x65,0x73,0x50,0xad,0xf2,0x7,0x3,0x25,0x31,0x9b,0x93,0xa9,0x57,0x77,0xda,0x1d,0x16,0x1f,0x6e,0xae,0x96,0x12,0x83,0xc8,0xb9,0x56,0x2a,0xc9,0x20,0xca,0x88,0xc,0x2b,0x4b,0x2c,0xd2,0x79,0xf5,0xb9,0xfc,0x51,0x53,0x44,0x1b,0x60,0xb0,0x68,0x7c,0x9d,0x7d,0x67,0x7a,0x32,0xa0,0x21,0xe0,0x2b,0xc7,0x4e,0x15,0x0,0xba,0xf2,0xa,0x41,0x55,0x1e,0x2c,0x4c,0xb1,0xaf,0x28,0xd0,0x9,0xcc,0xae,0x6e,0xa0,0x5c,0xa5,0x52,0x12,0xed,0x18,0x67,0x7a,0x60,0x9b,0xb5,0xfe,0x62,0xf8,0x43,0xdd,0x42,0x4c,0x13,0x80,0x77,0x8c,0xfa,0x57,0x60,0xf,0xd1,0xfc,0x24,0xf2,0x48,0x1c,0x8,0xe3,0x84,0x65,0x4,0xc2,0xc,0x21,0x51,0xba,0x5c,0x9e,0x65,0xce,0x7,0xca,0x7d,0x37,0x56,0x39,0x42,0x17,0xba,0x7e,0x6c,0xe3,0xa6,0xa2,0x1b,0x15,0x0,0xa9,0x56,0xbc,0x5c,0x53,0x4c,0x42,0xec,0x14,0x6a,0xb6,0x19,0x3b,0x7f,0x65,0x7c,0xa8,0x38,0xaf,0x2,0x6e,0x77,0x4b,0xfd,0x3,0x70,0xf0,0xf9,0x47,0xa3,0xab,0xb5,0xd3,0x42,0xb0,0xa0,0x6,0xc2,0xf,0x57,0x1d,0xb4,0x36,0xaf,0x2f,0xa6,0x97,0xd2,0x75,0x7b,0xea,0xaf,0x50,0x8f,0x97,0x31,0xa5,0x4c,0x6d,0x49,0xa9,0x70,0x8f,0x2f,0xdc,0x13,0xb4,0xa5,0xfd,0x7f,0x25,0x37,0x1f,0x5,0xf5,0x36,0xec,0x3c,0x35,0xf9,0xa4,0xe6,0xa4,0x7a,0xd5,0x9f,0xd1,0x23,0x20,0xcf,0x98,0x15,0x7d,0x90,0x48,0x20,0xd0,0xd0,0x8,0xa9,0x98,0x2d,0x91,0x20,0x53,0xe4,0x8a,0x59,0x23,0x96,0xf4,0x7b,0x8b,0x74,0xcf,0xf4,0x4b,0xf1,0x9d,0xdf,0x8c,0x71,0xe7,0x2a,0xdb,0x5c,0x1c,0xa7,0x17,0x54,0x3,0x8e,0xa,0x59,0xfc,0x99,0x8c,0x9a,0xf1,0xc8,0x88,0xc,0xef,0xab,0x1e,0x8f,0x8,0xf7,0xa8,0x5d,0xb2,0xf6,0xf,0x58,0x32,0x19,0xf7,0xb8,0x9c,0xe5,0xd7,0xa3,0x20,0xf9,0xf5,0x75,0x5e,0x52,0xb1,0x38,0x20,0xcf,0x21,0x87,0x94,0x6d,0xf,0x64,0x6e,0x57,0x6f,0xa2,0x1e,0xa0,0xd2,0x5a,0x9e,0xec,0xe7,0x42,0x6d,0x15,0xd3,0xd8,0xef,0xb,0x37,0xba,0x6,0x86,0xe8,0x45,0x21,0xb6,0xdf,0xea,0x6d,0xff,0x69,0x14,0x7e,0x65,0xa8,0xb8,0xb6,0xe7,0x51,0xd5,0xba,0x77,0xef,0x5b,0xc4,0x40,0xe2,0x1f,0x8e,0xc6,0x4b,0x5a,0xeb,0x48,0xe8,0x46,0x3b,0xe1,0xd,0xf1,0x1b,0x70,0xd2,0x69,0xfc,0x98,0x60,0xee,0x1e,0xc3,0xef,0x5,0xd4,0x75,0x2e,0xd0,0x3,0xe7,0xbb,0x24,0x28,0xf3,0x98,0x7c,0xa8,0x8f,0xed,0xf5,0xe8,0xb4,0xb1,0x73,0x6,0x7d,0xb1,0xfa,0xac,0xbb,0x7f,0x72,0x70,0x1c,0xe9,0x96,0x14,0x27,0xe0,0x19,0x4c,0xa8,0x33,0x2,0xbb,0xed,0x42,0x2b,0x3e,0xd2,0xf3,0xf7,0xd5,0x30,0xfd,0x6a,0x8c,0x68,0x33,0xba,0x84,0x9d,0x13,0x4e,0xf5,0xc1,0xfb,0x84,0xcc,0x10,0x46,0xc4,0xf5,0x73,0xdc,0x5,};

//unsigned char SK[FPTRU_KEM_SECRETKEYBYTES]={0x14,0x35,0x77,0x53,0x55,0x37,0x75,0x51,0x15,0x75,0x53,0x55,0x55,0x77,0x55,0x73,0x51,0x33,0x75,0x35,0x57,0x75,0x33,0x77,0x55,0x33,0x73,0x57,0x77,0x51,0x79,0x73,0x33,0x95,0x53,0x77,0x37,0x31,0x57,0x53,0x97,0x55,0x57,0x13,0x53,0x55,0x75,0x71,0x53,0x55,0x55,0x33,0x53,0x17,0x75,0x53,0x33,0x15,0x33,0x37,0x77,0x51,0x57,0x55,0x55,0x59,0x55,0x99,0x75,0x55,0x75,0x75,0x97,0x37,0x77,0x59,0x53,0x57,0x37,0x57,0x51,0x77,0x33,0x53,0x53,0x57,0x33,0x55,0x53,0x75,0x95,0x33,0x51,0x57,0x55,0x75,0x53,0x57,0x71,0x75,0x15,0x55,0x35,0x75,0x75,0x77,0x53,0x51,0x35,0x59,0x57,0x55,0x35,0x57,0x59,0x57,0x75,0x73,0x77,0x73,0x55,0x95,0x55,0x53,0x75,0x13,0x53,0x55,0x71,0x77,0x73,0x13,0x73,0x55,0x55,0x51,0x37,0x35,0x73,0x37,0x35,0x73,0x75,0x35,0x51,0x73,0x55,0x55,0x51,0x73,0x35,0x37,0x53,0x55,0x77,0x33,0x57,0x37,0x35,0x75,0x75,0x39,0x79,0x35,0x95,0x97,0x35,0x93,0x93,0x35,0x13,0x75,0x53,0x37,0x75,0x59,0x35,0x71,0x59,0x59,0x37,0x77,0x97,0x55,0x77,0x75,0x75,0x55,0x75,0x73,0x77,0x57,0x51,0x75,0x53,0x75,0x17,0x37,0x77,0x79,0x35,0x75,0x15,0x73,0x55,0x75,0x33,0x35,0x77,0x35,0x73,0x33,0x75,0x55,0x77,0x75,0x35,0x57,0x95,0x13,0x37,0x53,0x93,0x59,0x55,0x35,0x73,0x55,0x35,0x55,0x75,0x73,0x15,0x57,0x53,0x31,0x35,0x17,0x35,0x51,0x95,0x17,0x37,0x51,0x93,0x75,0x73,0x57,0x37,0x75,0x57,0x77,0x57,0x77,0x77,0x93,0x33,0x51,0x95,0x35,0x53,0x57,0x77,0x55,0x33,0x73,0x37,0x53,0x77,0x55,0x73,0x73,0x73,0x97,0x75,0x77,0x33,0x79,0x35,0x93,0x35,0x37,0x71,0x53,0x77,0x77,0x55,0x53,0x55,0x55,0x73,0x55,0x37,0x33,0x55,0x75,0x33,0x57,0x37,0x71,0x73,0x55,0x55,0x77,0x31,0x75,0x53,0x37,0x55,0x35,0x57,0x53,0x33,0x55,0x53,0x57,0x79,0x75,0x33,0x35,0x55,0x77,0x35,0x59,0x55,0x77,0x75,0x77,0x75,0x75,0x75,0x55,0x37,0x55,0x37,0x35,0x73,0x37,0x51,0x51,0x55,0x95,0x55,0x53,0x15,0x57,0x77,0x73,0x75,0x37,0x95,0x57,0x91,0x35,0x93,0x59,0x77,0x57,0x97,0x77,0x55,0x75,0x35,0x33,0x55,0x55,0x35,0x71,0x73,0x57,0x53,0x77,0x75,0x37,0x37,0x37,0x77,0x93,0x57,0x53,0x55,0x55,0x59,0x77,0x39,0x57,0x53,0x73,0x57,0x75,0x73,0x75,0x35,0x37,0x13,0x13,0x15,0x55,0x35,0x75,0x17,0x73,0x55,0x95,0x37,0x55,0x53,0x15,0x37,0x75,0x37,0x39,0x33,0x33,0x59,0x37,0x73,0x33,0x55,0x79,0x77,0x55,0x75,0x57,0x73,0x77,0x35,0x79,0x35,0x33,0x55,0x77,0x35,0x15,0x53,0x55,0x17,0x37,0x97,0x33,0x77,0x57,0x33,0x15,0x73,0x31,0x53,0x37,0x95,0x73,0x53,0x13,0x59,0x53,0x55,0x35,0x35,0x35,0x55,0x59,0x57,0x75,0x57,0x33,0x57,0x55,0x55,0x55,0x33,0x17,0x53,0x73,0x55,0x55,0x55,0x51,0x75,0x35,0x55,0x33,0x55,0x37,0x33,0x33,0x55,0x73,0x55,0x73,0x37,0x31,0x55,0x51,0x73,0x33,0x73,0x53,0x31,0x33,0x77,0x53,0x35,0x93,0x17,0x99,0x95,0x77,0x35,0x33,0x17,0x57,0x13,0x73,0x17,0x75,0x77,0x57,0x75,0x35,0x37,0x53,0x55,0x55,0x35,0x13,0x55,0x35,0x55,0x95,0x75,0x71,0x75,0x73,0x33,0x53,0x93,0x37,0x95,0x33,0x55,0x57,0x57,0x53,0x73,0x35,0x71,0x37,0x55,0x57,0x95,0x77,0x13,0x39,0x75,0x33,0x53,0x73,0x75,0x55,0x73,0x75,0x53,0x97,0x13,0x57,0x53,0x55,0x35,0x11,0x75,0x73,0x55,0x73,0x15,0x17,0x51,0x55,0x37,0x93,0x59,0x91,0x15,0x35,0x57,0x55,0x55,0x53,0x35,0x93,0x31,0x37,0x55,0x75,0x77,0x33,0x53,0x35,0x95,0x73,0x35,0x57,0x35,0x51,0x31,0x55,0x55,0x57,0x17,0x53,0x53,0x55,0x55,0x15,0x53,0x37,0x15,0x35,0x37,0x55,0x15,0x79,0x77,0x35,0x75,0x77,0x15,0x33,0x15,0x57,0x33,0x53,0x39,0x57,0x37,0x53,0x35,0x97,0x53,0x57,0x3,0x92,0xf3,0x21,0xfe,0x81,0xce,0xdb,0x58,0x8d,0x1c,0x21,0xe2,0xc7,0x86,0x26,0xb8,0xda,0xca,0x80,0x20,0x13,0x88,0x1f,0xc9,0x9,0x9a,0xc6,0xa7,0x48,0xc1,0x32,0xe4,0x61,0x63,0x49,0x49,0x98,0xcf,0x32,0x89,0xfb,0x9b,0x91,0xec,0xf6,0x31,0x4d,0x2e,0x61,0xb5,0xf0,0xae,0x7b,0x7a,0xc5,0x5d,0x7b,0xba,0x4b,0xa8,0xa7,0x18,0x4,0xb6,0xf6,0xf9,0xa7,0xea,0x43,0x47,0xdf,0x9a,0x50,0x1,0x2e,0xad,0x5e,0xa8,0xad,0x1c,0x76,0x86,0xd1,0xda,0x25,0x35,0x3c,0xe1,0x8c,0xec,0xbf,0x52,0xbb,0x5d,0xf3,0x88,0x84,0xf7,0xc0,0xd3,0xf5,0x98,0xdc,0xbb,0x2d,0x1a,0x3c,0x12,0xca,0xa2,0xb6,0xc3,0x3a,0xb1,0xde,0x43,0xd2,0xcb,0xf7,0x37,0xbe,0x88,0x1a,0xea,0x9b,0xb2,0x79,0xae,0x48,0x44,0x30,0x83,0x6c,0x19,0x18,0xa9,0x36,0x9d,0x52,0x26,0x35,0x97,0xe4,0xbb,0x68,0x9d,0x31,0x5d,0xaa,0x61,0xfb,0x56,0xeb,0x8a,0x81,0x37,0xf3,0x26,0x2f,0xc8,0xc,0xc8,0x1a,0x6e,0x90,0xf4,0x82,0x5b,0x45,0x80,0xb3,0x8b,0x84,0xc4,0xe5,0xe5,0xe,0xf8,0xe,0x4,0x4,0xb1,0xfb,0x66,0xad,0xd6,0x8,0xd4,0x61,0xcb,0x18,0xc6,0x67,0xc5,0x1a,0xe,0x29,0xbf,0x2,0x1f,0xa5,0x5b,0xe2,0x8a,0xb2,0xfa,0xf5,0xef,0xdb,0xc4,0x74,0x52,0x4e,0x45,0x32,0xd1,0xb9,0xef,0xbc,0x18,0x59,0x8a,0x5d,0x7e,0x40,0x9c,0x63,0x15,0xf0,0x48,0xad,0xba,0x7f,0xbd,0x3f,0xd4,0x49,0x3,0xd4,0xee,0xba,0xc0,0x6,0xb3,0x20,0xcb,0xc4,0x56,0xd,0x19,0xd3,0xbf,0xd9,0x4d,0xa3,0x87,0xde,0xb4,0x69,0xbb,0xb4,0x35,0xa6,0x35,0xaa,0xac,0x1e,0xb2,0x1,0x72,0x5f,0x41,0x18,0xe8,0x8d,0x82,0xfe,0x6,0xc6,0x21,0xa5,0x1e,0x0,0x75,0x80,0x4f,0xe6,0xd3,0x7d,0x5,0xfd,0x29,0x60,0xa1,0xf6,0x1b,0x18,0xfa,0x90,0x19,0x56,0xeb,0x67,0x32,0xa1,0xb2,0xbf,0xf3,0xee,0x75,0x73,0x7b,0xd2,0x2b,0xff,0xc6,0x72,0x5d,0xf0,0xc4,0x60,0xd,0x67,0x27,0xba,0x1d,0x32,0x1e,0x6e,0xcb,0xae,0xfd,0x63,0x12,0x5,0x18,0x3f,0x1c,0xad,0x9f,0x4f,0xff,0x62,0x86,0xce,0xb2,0x25,0xe7,0xe0,0xff,0x2f,0x57,0x4b,0xd3,0xea,0x9e,0x53,0xc0,0xa4,0xba,0x34,0x4c,0x6d,0xf,0x3f,0x9c,0xae,0xbe,0xf1,0xe0,0xe8,0x7d,0xd1,0x21,0x9a,0x2c,0x64,0xa7,0x46,0x2,0xf8,0xa0,0xc8,0xc6,0x14,0x19,0xf6,0xb6,0xe,0xeb,0x1d,0x22,0xf4,0xaf,0xa9,0x42,0x1c,0xb4,0xfc,0x4a,0x70,0xa7,0x7d,0xa2,0xb5,0x8a,0x7a,0x8d,0x44,0x67,0xa,0x4,0x66,0xa,0xce,0x2a,0x77,0xc2,0xeb,0x63,0x44,0xe5,0x68,0x29,0x92,0x9b,0x95,0x90,0xea,0x25,0xd4,0x8b,0x21,0x5a,0x86,0xb6,0x96,0x8a,0x7,0x63,0x48,0x3b,0xd8,0xaf,0xe9,0x65,0xb5,0x61,0xfd,0xe2,0x9a,0x17,0xf7,0x9a,0x8b,0xac,0x43,0x5e,0x73,0x31,0xfd,0x89,0x8b,0xd3,0x14,0x5b,0x22,0x59,0x1e,0xf9,0xdc,0xa9,0x52,0x7a,0x43,0x8b,0x61,0x5b,0xe6,0x76,0x50,0x3c,0x8,0x81,0xa5,0x91,0x44,0x9a,0xa4,0x65,0x76,0x21,0x48,0x56,0xf1,0xec,0x83,0xf0,0x93,0xbf,0x9d,0x10,0xee,0x2d,0xdb,0xf,0xff,0xa6,0xa1,0x87,0x93,0x6a,0x33,0xd3,0xb2,0x39,0x1f,0xc8,0xf2,0x66,0xcf,0xb2,0x15,0xd0,0xd0,0x3,0xfa,0xa0,0x26,0xeb,0x38,0x6e,0xd2,0x1f,0xa9,0x85,0x93,0xa0,0xe4,0x93,0x41,0x41,0x51,0xee,0xca,0xb5,0x48,0x58,0x45,0x8d,0x61,0x5f,0x6b,0x8b,0xa2,0x24,0xf8,0xd4,0xe4,0x3d,0x3c,0x77,0xf7,0x8,0x63,0x30,0x88,0x59,0xb0,0x53,0x90,0xdc,0xe3,0xe6,0x33,0x8e,0x69,0x3,0xc7,0xd2,0x87,0x8,0x7a,0x93,0x92,0x3d,0xce,0x49,0xef,0x16,0x75,0xc9,0x6a,0xbf,0x36,0x96,0x14,0xd7,0xb7,0x59,0x24,0xc7,0x10,0xcd,0x85,0xe2,0x78,0x75,0xfa,0xc4,0xf6,0x0,0xb9,0xc1,0x1d,0xae,0x2b,0xc0,0xde,0xd6,0xaa,0x56,0x9b,0x20,0x91,0xb1,0xe9,0xc7,0xd,0x24,0x86,0x54,0x33,0xa2,0xf6,0x16,0x55,0x14,0xc8,0xd5,0xf9,0x94,0x55,0xae,0x23,0x60,0xe0,0x45,0x30,0xe8,0x10,0x8a,0x4d,0xb7,0x14,0xd9,0xdb,0x7,0xe8,0xb5,0x1d,0xf4,0xd4,0x1e,0x79,0xc5,0xf5,0xe3,0x64,0x1,0x21,0x6a,0x0,0x42,0xd9,0x44,0x9b,0x97,0x73,0xfa,0xcc,0x27,0x6a,0x33,0x44,0x4d,0x10,0x36,0x95,0x15,0x20,0x33,0x4d,0x85,0x3d,0x3a,0xcd,0x8,0x16,0x6c,0x53,0xe7,0x24,0xd6,0x8e,0xbb,0x23,0x1a,0xb1,0x8b,0xc6,0x2b,0xed,0xa4,0xd0,0xa6,0x86,0x17,0xc7,0xa2,0x72,0x52,0x83,0xfa,0x20,0x78,0x3,0xef,0x4b,0xa,0xe5,0x61,0x1,0x9d,0x83,0x8a,0x57,0xac,0x65,0x2a,0x2a,0x65,0xf8,0x3b,0x8e,0xa5,0x77,0xe3,0x55,0xc6,0x6d,0xaa,0x74,0x13,0x61,0xb0,0x4e,0xf,0xe4,0xad,0xdd,0x66,0xd7,0x7c,0x66,0x2c,0x2f,0xfb,0x57,0xdb,0x7,0x1a,0x9a,0xc0,0x12,0xd3,0x15,0x3,0x42,0x2,0xf0,0x86,0xca,0x4d,0xbc,0xc6,0x5c,0xfc,0xd7,0xfc,0xe5,0x9b,0x76,0xc1,0x8b,0xb0,0x77,0xaa,0x81,0x34,0x51,0xf5,0x9,0xdf,0x1e,0xcc,0x60,0x56,0x6,0x9f,0x43,0x79,0x7b,0xf4,0x4a,0x40,0x24,0x7b,0x17,0xb3,0xe4,0x5c,0x60,0x46,0xc3,0x46,0x69,0x65,0xf8,0x16,0xcf,0x1b,0xc4,0xda,0x9e,0x82,0x48,0xd5,0x70,0x9f,0x7e,0x61,0xbf,0x90,0xad,0xe,0x2e,0x8d,0x99,0x81,0x6f,0x59,0xec,0x68,0x59,0xce,0xac,0xeb,0x88,0xac,0x1b,0x15,0x4f,0xc9,0x9,0x14,0x3d,0x85,0x75,0xd2,0x74,0xc3,0x47,0xe3,0x23,0xfa,0x13,0xb5,0x9e,0x2a,0xef,0x8f,0xb2,0xaf,0xe3,0x73,0x3f,0xb1,0xbf,0xe9,0x8e,0x86,0xd1,0x78,0xa4,0xe0,0xf1,0xa2,0x34,0x42,0x21,0x7b,0x49,0xb2,0x4b,0x2f,0x38,0xbf,0x40,0x9a,0x76,0x6a,0x7b,0xc0,0x24,0x94,0xaf,0x1c,0xfe,0xf7,0x26,0x28,0xf7,0x74,0x97,0x61,0x48,0x14,0xa1,0xb9,0x2c,0x1f,0xc2,0xaf,0x38,0x2e,0x1e,0xd2,0xd9,0x95,0x5f,0xbc,0x4a,0x57,0x3a,0x50,0x4a,0xc7,0xea,0xdd,0x68,0xe2,0x29,0xa3,0xce,0x98,0x77,0x96,0xee,0x40,0x46,0xc3,0x7f,0x74,0xa4,0xad,0xa6,0x31,0xf4,0x97,0x29,0x64,0xac,0x9f,0x60,0xe3,0x67,0xdf,0x67,0xc9,0xd9,0x24,0x12,0x1a,0x50,0xf5,0xd3,0xf8,0x1,0x1f,0x40,0x54,0xac,0x52,0x57,0xd9,0xef,0xfd,0x79,0xa3,0xbc,0xaf,0xb0,0x63,0xb,0xea,0xc1,0xd1,0x7b,0x35,0x20,0xba,0x77,0x5c,0xe,0x4f,0xc7,0x9a,0x79,0x85,0xfb,0x9a,0x6e,0x47,0x80,0x66,0xfc,0x4f,0xe2,0x7b,0x36,0xdd,0xef,0x13,0x9,0x5a,0x68,0x23,0xa2,0xe8,0xe7,0xdb,0xd7,0x72,0x42,0x79,0xf2,0xe6,0x16,0xe7,0xf9,0x73,0x3a,0x26,0x30,0x77,0x66,0x56,0xd5,0xd2,0x76,0x0,0x88,0xeb,0xbf,0x72,0x8d,0x9,0x94,0x89,0x4e,0x47,0xec,0xc,0x5a,0x4c,0x2c,0x1b,0x64,0x8f,0x38,0xd9,0x2d,0x42,0x7c,0x91,0xfa,0x59,0x97,0x9c,0x75,0x3c,0xca,0x87,0x2e,0x7a,0xad,0x95,0x84,0xb3,0xd7,0xf1,0xef,0x76,0x55,0xa3,0x4e,0xd8,0xe6,0xea,0xe8,0x20,0x96,0x3b,0x12,0x5a,0xe0,0xaf,0x21,0x3b,0xb1,0xf0,0xfd,0xa5,0xde,0x81,0xed,0xb7,0xd7,0xe9,0xbb,0xaa,0x74,0x94,0xb9,0xd0,0x5f,0xb0,0x58,0x96,0xeb,0x70,0xc5,0x9e,0xbd,0x24,0x10,0x47,0x98,0xc8,0x89,0x6f,0x53,0x1b,0x90,0x38,0x84,0x90,0x18,0x41,0xc4,0x81,0x76,0x39,0x50,0x53,0xe,0xa8,0xed,0x48,0x44,0x97,0xb,0xd3,0xb1,0xe9,0xdb,0x2e,0x5f,0x8a,0x60,0x5c,0xa4,0xac,0x6e,0x3d,0x36,0xa9,0xcd,0xfa,0x79,0x1d,0xaf,0x6,0x4c,0x2,0xc8,0x3f,0xb9,0x6a,0x0,0x56,0xf,0x74,0xd1,0xb3,0x84,0x7f,0xd,0x28,0x3a,0x73,0x42,0x79,0xb8,0x9a,0x75,0xb6,0x11,0x7b,0x37,0x9e,0x9a,0x99,0xb2,0x7c,0xe,0x56,0x7c,0x8b,0x69,0x61,0x2e,0xac,0xcb,0x9c,0xce,0x3d,0x5b,0xcc,0x2c,0x7b,0x1e,0xca,0xc2,0x8d,0xb0,0x48,0xf5,0xc5,0xfd,0x90,0x5f,0xe2,0xdf,0x75,0xee,0xc7,0x5d,0x14,0x81,0xc8,0x53,0xed,0x1f,0xae,0x8b,0x27,0x84,0x3,0xe9,0x71,0xa7,0x36,0xb9,0x0,0xd0,0x42,0x96,0xe,0x15,0x44,0x47,0xa2,0x3,0x58,0x4d,0xf5,0x6d,0x16,0x86,0x8d,0x11,0x4,0xd7,0xe2,0xf3,0x4c,0x36,0x6,0xd7,0x93,0xa2,0xaa,0xc1,0x8b,0xfb,0x72,0xf2,0xaf,0x20,0xea,0xd8,0xf5,0x3a,0x33,0x9f,0x90,0x79,0xfd,0x2e,0xa1,0x2a,0x24,0xf1,0x40,0xbd,0xd1,0xdf,0x59,0x33,0xfa,0xfd,0xab,0xd1,0xfc,0xdc,0xc5,0x82,0x35,0xda,0xb0,0xc7,0x17,0xd5,0xc7,0xce,0x3f,0x3b,0x9a,0x13,0x57,0x8c,0xdb,0x67,0xbb,0x9d,0x31,0x70,0xeb,0xd3,0xfc,0xd,0x15,0xdd,0x5c,0xe6,0xd2,0x56,0x1,0xf2,0xa,0x3,0xd8,0x4a,0xc,0x1,0x7b,0x9b,0xf3,0x9e,0x85,0x46,0x34,0xc8,0xc9,0x22,0x8a,0xfe,0x13,0x7d,0xc6,0x9e,0x89,0xa9,0xdf,0x88,0xfa,0x1d,0x7,0xf8,0x38,0x31,0x2b,0xc6,0x38,0x69,0x6e,0x47,0xba,0xcf,0xed,0x56,0xce,0xb2,0x2f,0x2f,0x92,0xf0,0xb8,0x17,0x9e,0xf0,0xbd,0x81,0xa1,0xcf,0xb,0x69,0x33,0x57,0x3d,0x3d,0xdc,0x3,0x84,0x58,0x28,0xb4,0x6c,0x59,0x95,0x7e,0x15,0x80,0x2a,0xf,0xc8,0x52,0x47,0xc5,0xe0,0x5a,0xf0,0x78,0xc1,0xec,0x58,0x47,0xd1,0x53,0x67,0x55,0x2d,0x97,0x2c,0x30,0xda,0x90,0xf7,0x8f,0xca,0x51,0x6e,0xc,0x67,0x6b,0xd4,0x1c,0x3a,0x78,0xe6,0x8c,0x7e,0xf,0x6c,0x49,0x8a,0xa2,0xf2,0x5c,0x43,0xde,0x55,0x4b,0x55,0x3a,0xc2,0x40,0x51,0x41,0xf4,0x4,0x53,0x32,0x71,0x14,0x8b,0xdd,0x2,0x91,0x41,0x56,0xd0,0x4,0x69,0x22,0x49,0x1d,0x1f,0xed,0x87,0x20,0x9b,0xc0,0x26,0xd9,0x64,0x55,0x5a,0xa,0xf,0xe6,0x34,0x11,0x2a,0x7b,0x65,0xac,0xc9,0x86,0xab,0x2b,0x45,0x83,0xe,0xd3,0x8c,0x78,0x13,0x29,0x75,0x57,0x21,0x81,0x6a,0x53,0x97,0xd,0xf3,0x9f,0xda,0xf1,0x1f,0x4,0xe2,0xad,0x3d,0x17,0xe,0x7c,0xfe,0xe1,0x70,0x4b,0x94,0x55,0xd2,0xc1,0xd7,0xf8,0xc6,0x77,0x1a,0x29,0x87,0xe9,0xc5,0xfe,0xe5,0xd0,0x3c,0x98,0xde,0xc2,0xb0,0xd2,0x1f,0xc4,0xfd,0x76,0xc5,0x8e,0x61,0x65,0x73,0x50,0xad,0xf2,0x7,0x3,0x25,0x31,0x9b,0x93,0xa9,0x57,0x77,0xda,0x1d,0x16,0x1f,0x6e,0xae,0x96,0x12,0x83,0xc8,0xb9,0x56,0x2a,0xc9,0x20,0xca,0x88,0xc,0x2b,0x4b,0x2c,0xd2,0x79,0xf5,0xb9,0xfc,0x51,0x53,0x44,0x1b,0x60,0xb0,0x68,0x7c,0x9d,0x7d,0x67,0x7a,0x32,0xa0,0x21,0xe0,0x2b,0xc7,0x4e,0x15,0x0,0xba,0xf2,0xa,0x41,0x55,0x1e,0x2c,0x4c,0xb1,0xaf,0x28,0xd0,0x9,0xcc,0xae,0x6e,0xa0,0x5c,0xa5,0x52,0x12,0xed,0x18,0x67,0x7a,0x60,0x9b,0xb5,0xfe,0x62,0xf8,0x43,0xdd,0x42,0x4c,0x13,0x80,0x77,0x8c,0xfa,0x57,0x60,0xf,0xd1,0xfc,0x24,0xf2,0x48,0x1c,0x8,0xe3,0x84,0x65,0x4,0xc2,0xc,0x21,0x51,0xba,0x5c,0x9e,0x65,0xce,0x7,0xca,0x7d,0x37,0x56,0x39,0x42,0x17,0xba,0x7e,0x6c,0xe3,0xa6,0xa2,0x1b,0x15,0x0,0xa9,0x56,0xbc,0x5c,0x53,0x4c,0x42,0xec,0x14,0x6a,0xb6,0x19,0x3b,0x7f,0x65,0x7c,0xa8,0x38,0xaf,0x2,0x6e,0x77,0x4b,0xfd,0x3,0x70,0xf0,0xf9,0x47,0xa3,0xab,0xb5,0xd3,0x42,0xb0,0xa0,0x6,0xc2,0xf,0x57,0x1d,0xb4,0x36,0xaf,0x2f,0xa6,0x97,0xd2,0x75,0x7b,0xea,0xaf,0x50,0x8f,0x97,0x31,0xa5,0x4c,0x6d,0x49,0xa9,0x70,0x8f,0x2f,0xdc,0x13,0xb4,0xa5,0xfd,0x7f,0x25,0x37,0x1f,0x5,0xf5,0x36,0xec,0x3c,0x35,0xf9,0xa4,0xe6,0xa4,0x7a,0xd5,0x9f,0xd1,0x23,0x20,0xcf,0x98,0x15,0x7d,0x90,0x48,0x20,0xd0,0xd0,0x8,0xa9,0x98,0x2d,0x91,0x20,0x53,0xe4,0x8a,0x59,0x23,0x96,0xf4,0x7b,0x8b,0x74,0xcf,0xf4,0x4b,0xf1,0x9d,0xdf,0x8c,0x71,0xe7,0x2a,0xdb,0x5c,0x1c,0xa7,0x17,0x54,0x3,0x8e,0xa,0x59,0xfc,0x99,0x8c,0x9a,0xf1,0xc8,0x88,0xc,0xef,0xab,0x1e,0x8f,0x8,0xf7,0xa8,0x5d,0xb2,0xf6,0xf,0x58,0x32,0x19,0xf7,0xb8,0x9c,0xe5,0xd7,0xa3,0x20,0xf9,0xf5,0x75,0x5e,0x52,0xb1,0x38,0x20,0xcf,0x21,0x87,0x94,0x6d,0xf,0x64,0x6e,0x57,0x6f,0xa2,0x1e,0xa0,0xd2,0x5a,0x9e,0xec,0xe7,0x42,0x6d,0x15,0xd3,0xd8,0xef,0xb,0x37,0xba,0x6,0x86,0xe8,0x45,0x21,0xb6,0xdf,0xea,0x6d,0xff,0x69,0x14,0x7e,0x65,0xa8,0xb8,0xb6,0xe7,0x51,0xd5,0xba,0x77,0xef,0x5b,0xc4,0x40,0xe2,0x1f,0x8e,0xc6,0x4b,0x5a,0xeb,0x48,0xe8,0x46,0x3b,0xe1,0xd,0xf1,0x1b,0x70,0xd2,0x69,0xfc,0x98,0x60,0xee,0x1e,0xc3,0xef,0x5,0xd4,0x75,0x2e,0xd0,0x3,0xe7,0xbb,0x24,0x28,0xf3,0x98,0x7c,0xa8,0x8f,0xed,0xf5,0xe8,0xb4,0xb1,0x73,0x6,0x7d,0xb1,0xfa,0xac,0xbb,0x7f,0x72,0x70,0x1c,0xe9,0x96,0x14,0x27,0xe0,0x19,0x4c,0xa8,0x33,0x2,0xbb,0xed,0x42,0x2b,0x3e,0xd2,0xf3,0xf7,0xd5,0x30,0xfd,0x6a,0x8c,0x68,0x33,0xba,0x84,0x9d,0x13,0x4e,0xf5,0xc1,0xfb,0x84,0xcc,0x10,0x46,0xc4,0xf5,0x73,0xdc,0x5,0xb3,0x21,0x82,0x2f,0x5b,0x97,0x2a,0xa7,0x22,0x66,0xf,0xbf,0x61,0x63,0x6d,0x3f,0x27,0x79,0xc6,0x6a,0xa5,0x2b,0xdc,0x5f,0x96,0x46,0xd5,0xfd,0xfa,0x4e,0xba,0x2a,};

//#define OUTPUTKEY 1
void test_for_poly_mul(){//已经验证了正确性
    poly a,b,c;
    for(int i=0;i<FPTRU_N;i++){
        a.coeffs[i]=coe1[i];
        b.coeffs[i]=coe2[i];
    }

    poly * a_d;
    poly * b_d;
    poly * c_d;
    cudaEvent_t start, stop;

    HANDLE_ERROR(cudaMalloc((void**)&a_d, sizeof(poly)));
    HANDLE_ERROR(cudaMalloc((void**)&b_d, sizeof(poly)));
    HANDLE_ERROR(cudaMalloc((void**)&c_d, sizeof(poly)));
    //设备端传输数据
    cudaMemcpy(a_d, &a, sizeof(poly), cudaMemcpyHostToDevice);
    cudaMemcpy(b_d, &b, sizeof(poly), cudaMemcpyHostToDevice);
    BEFORE_SPEED
    //poly_mul_653_batch_q1_v2<<<1,N_N653/2,0>>>(a_d,a_d,b_d);
    poly_mul_653_batch_q2<<<1,168>>>(a_d,a_d,b_d);
    AFTER_SPEED("all") //all: 2.509824 ms

    cudaMemcpy(&c, a_d, sizeof(poly), cudaMemcpyDeviceToHost);

    cudaDeviceSynchronize();

    for(int i=0;i<FPTRU_N;i++){
        printf("%d,",c.coeffs[i]);
    }
    printf("\n");

    HANDLE_ERROR(cudaFree(a_d));
    HANDLE_ERROR(cudaFree(b_d));
    HANDLE_ERROR(cudaFree(c_d));

}


void test_for_tensor(){//已经验证了正确性
    poly a,b,c;
    for(int i=0;i<FPTRU_N;i++){
        a.coeffs[i]=coe1[i];
        b.coeffs[i]=coe2[i];
    }

    poly * a_d;
    poly * b_d;
    poly * c_d;
    cudaEvent_t start, stop;

    cudaStream_t stream_0;
    HANDLE_ERROR(cudaStreamCreate(&stream_0));

    HANDLE_ERROR(cudaMalloc((void**)&a_d, sizeof(poly)));
    HANDLE_ERROR(cudaMalloc((void**)&b_d, sizeof(poly)));
    HANDLE_ERROR(cudaMalloc((void**)&c_d, sizeof(poly)));
    //设备端传输数据
    cudaMemcpy(a_d, &a, sizeof(poly), cudaMemcpyHostToDevice);
    cudaMemcpy(b_d, &b, sizeof(poly), cudaMemcpyHostToDevice);
    
    tensor_poly_mul(c_d,a_d,b_d,stream_0); 

    cudaMemcpy(&c, c_d, sizeof(poly), cudaMemcpyDeviceToHost);

    cudaDeviceSynchronize();

    for(int i=0;i<FPTRU_N;i++){
        printf("%d,",c.coeffs[i]);
    }
    printf("\n");

    HANDLE_ERROR(cudaFree(a_d));
    HANDLE_ERROR(cudaFree(b_d));
    HANDLE_ERROR(cudaFree(c_d));

}

void test_for_tensor_2(){//已经验证了正确性
    poly a,b,c;
    for(int i=0;i<FPTRU_N;i++){
        a.coeffs[i]=coe1[i];
        b.coeffs[i]=coe2[i];
    }

    poly * a_d;
    poly * b_d;
    poly * c_d;
    cudaEvent_t start, stop;

    cudaStream_t stream_0;
    HANDLE_ERROR(cudaStreamCreate(&stream_0));

    HANDLE_ERROR(cudaMalloc((void**)&a_d, sizeof(poly) * 2));
    HANDLE_ERROR(cudaMalloc((void**)&b_d, sizeof(poly) * 2));
    HANDLE_ERROR(cudaMalloc((void**)&c_d, sizeof(poly) * 2));
    //设备端传输数据
    cudaMemcpy(&a_d[0], &a, sizeof(poly), cudaMemcpyHostToDevice);
    cudaMemcpy(&a_d[1], &a, sizeof(poly), cudaMemcpyHostToDevice);
    cudaMemcpy(&b_d[0], &b, sizeof(poly), cudaMemcpyHostToDevice);
    cudaMemcpy(&b_d[1], &b, sizeof(poly), cudaMemcpyHostToDevice);
    
    tensor_poly_mul(c_d,a_d,b_d,stream_0); 

    cudaMemcpy(&c, &c_d[0], sizeof(poly), cudaMemcpyDeviceToHost);

    cudaDeviceSynchronize();

    printf("1\n");
    for(int i=0;i<FPTRU_N;i++){
        printf("%d,",c.coeffs[i]);
    }
    printf("\n");


    cudaMemcpy(&c, &c_d[1], sizeof(poly), cudaMemcpyDeviceToHost);

    cudaDeviceSynchronize();

    printf("2\n");
    for(int i=0;i<FPTRU_N;i++){
        printf("%d,",c.coeffs[i]);
    }
    printf("\n");

    HANDLE_ERROR(cudaFree(a_d));
    HANDLE_ERROR(cudaFree(b_d));
    HANDLE_ERROR(cudaFree(c_d));

}


int zhc(){
    poly a,b,c;
    for(int i=0;i<FPTRU_N;i++){
        a.coeffs[i]=coe1[i];
        b.coeffs[i]=coe2[i];
    }
    
    poly * a_d;
    poly * b_d;
    poly * c_d;
    cudaEvent_t start, stop;

    HANDLE_ERROR(cudaMalloc((void**)&a_d, sizeof(poly)));
    HANDLE_ERROR(cudaMalloc((void**)&b_d, sizeof(poly)));
    HANDLE_ERROR(cudaMalloc((void**)&c_d, sizeof(poly)));
    //设备端传输数据
    cudaMemcpy(a_d, &a, sizeof(poly), cudaMemcpyHostToDevice);
    cudaMemcpy(b_d, &b, sizeof(poly), cudaMemcpyHostToDevice);

    BEFORE_SPEED
    poly_mul_653_batch_q1_zhc<<<1,N_N653/2,0>>>(a_d,a_d,b_d);
    AFTER_SPEED("zhc")

    cudaDeviceSynchronize();
    
    HANDLE_ERROR(cudaFree(a_d));
    HANDLE_ERROR(cudaFree(b_d));
    HANDLE_ERROR(cudaFree(c_d));
    
    return 0;
}

void test_for_2222223(){
    poly a,b,c;
    for(int i=0;i<FPTRU_N;i++){
        a.coeffs[i]=coe1[i];
        b.coeffs[i]=coe2[i];
    }

    poly * a_d;
    poly * b_d;
    poly * c_d;
    cudaEvent_t start, stop;

    HANDLE_ERROR(cudaMalloc((void**)&a_d, sizeof(poly)));
    HANDLE_ERROR(cudaMalloc((void**)&b_d, sizeof(poly)));
    HANDLE_ERROR(cudaMalloc((void**)&c_d, sizeof(poly)));
    //设备端传输数据
    cudaMemcpy(a_d, &a, sizeof(poly), cudaMemcpyHostToDevice);
    cudaMemcpy(b_d, &b, sizeof(poly), cudaMemcpyHostToDevice);
    BEFORE_SPEED
    poly_mul_653_batch_q1_v3<<<1,168,0>>>(a_d,a_d,b_d);
    AFTER_SPEED("all") //all: 2.509824 ms

    cudaMemcpy(&c, a_d, sizeof(poly), cudaMemcpyDeviceToHost);

    cudaDeviceSynchronize();

    for(int i=0;i<FPTRU_N;i++){
        printf("%d,",c.coeffs[i]);
    }
    printf("\n");

    HANDLE_ERROR(cudaFree(a_d));
    HANDLE_ERROR(cudaFree(b_d));
    HANDLE_ERROR(cudaFree(c_d));
}

//#define OUTPUTKEY 1
// #define OUTPENCAPS 1
// #define OUTDECAPS 1
//下面可以用来验证正确性
int main_2(){
    //test_for_tensor(); //修改batch_size为2
    //test_for_2222223();
    //test_for_poly_mul();
    //zhc();
    /*for(int i=0;i<20;i++){
        test_for_poly_mul();
        zhc();
    }*/

    //return 0;
    //printf("In main\n");
    unsigned char array_pk[FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE] = {0};
    unsigned char array_sk[FPTRU_KEM_SECRETKEYBYTES * BATCH_SIZE] = {0};
    unsigned char k1[FPTRU_SHAREDKEYBYTES * BATCH_SIZE] = {0};
    unsigned char ct[FPTRU_KEM_CIPHERTEXTBYTES * BATCH_SIZE] = {0};

    unsigned char k2[FPTRU_SHAREDKEYBYTES * BATCH_SIZE] ={0};

    int res[BATCH_SIZE];



    /*printf("original original pk\n");
    for(int i=0;i<FPTRU_KEM_PUBLICKEYBYTES;i++){
        printf("0x%x,",PK[i]);
    }
    printf("\n\n");*/


    uint64_t hxw1,hxw2;

    //hxw1 = cpucycles();
    //crypto_kem_keygen_single_v2(array_pk,array_sk);
    cudaStream_t stream_0;
    HANDLE_ERROR(cudaStreamCreate(&stream_0));
    double total_time=0;
    hxw1 = cpucycles();
    ChronoTimer timer_keypair_batch("keygen batch");
    ChronoTimer timer_encaps_batch("encaps batch");

    for(int i=0;i<HXWTEST;i++){
        //float res = crypto_kem_keygen_v2(array_pk,array_sk,stream_0);
        //printf("%i\n",i);
        //hxw1 = cpucycles();
        timer_keypair_batch.start();
        crypto_kem_keygen_no_inv_batch_stream_ordered_async(array_pk,array_sk,stream_0);
        timer_keypair_batch.stop();
        //crypto_kem_keygen_tensor_core(array_pk,array_sk,stream_0);
        //total_time += crypto_kem_keygen_no_inv_batch(array_pk,array_sk,stream_0);

        //固定公私钥为一个
        /*for(int j=0;j<BATCH_SIZE;j++){
            for(int k = 0;k<FPTRU_KEM_PUBLICKEYBYTES;k++){
                array_pk[FPTRU_KEM_PUBLICKEYBYTES * j + k] = PK[k];
            }

            for(int k =0;k<FPTRU_KEM_SECRETKEYBYTES;k++){
                array_sk[j * FPTRU_KEM_SECRETKEYBYTES + k] = SK[k];
            }
        }*/


        timer_encaps_batch.start();
        total_time += crypto_kem_encaps_v4(ct,k1,array_pk,stream_0); //现在未固定了随机值
        timer_encaps_batch.stop();
        crypto_kem_decaps_v3(k2,ct,array_sk,stream_0,res);
        
        //printf("%f\n",res);s
        //total_time += res;
        printf("解密结果为\n");
        for(int i=0;i<BATCH_SIZE;i++){
            printf("%d,",res[i]);//值为0代表方案成功
        }
        printf("\n");
    }
    hxw2 = cpucycles();

    
    
    //crypto_kem_keygen_small();
    //crypto_kem_keygen_empty();//正常情况下能够完成malloc和free的操作
    //hxw2 = cpucycles();
    //printf("gpu for [%d]keygen  is %llu\n",BATCH_SIZE,(unsigned long long)hxw2-hxw1);
    printf("batch size = %d,%lld,%f\n",BATCH_SIZE,(unsigned long long)(hxw2-hxw1),(float)(hxw2-hxw1)/ (HXWTEST * BATCH_SIZE));
    printf("encaps \n%lf\n",total_time / (BATCH_SIZE*  HXWTEST)); //0.005020 TODO:zhc改回来
    for(long long i=0;i<FPTRU_SHAREDKEYBYTES * BATCH_SIZE;i++){
        if(k1[i]!=k2[i]){
            printf("wrong\n");
            return -1;
        }
    }
    printf("success\n");

#ifdef OUTPUTKEY //验证整个keygen的正确性
    for(int j=0;j<BATCH_SIZE;j++){
        for(int i=0;i<FPTRU_KEM_PUBLICKEYBYTES;i++){
            printf("0x%x,",array_pk[j * FPTRU_KEM_PUBLICKEYBYTES + i]);
        }

        printf("\n\n");
        for(int i=0;i<FPTRU_KEM_SECRETKEYBYTES;i++){//FPTRU_PKE_SECRETKEYBYTES + FPTRU_PKE_PUBLICKEYBYTES;i++){
            printf("0x%x,",array_sk[j * FPTRU_KEM_SECRETKEYBYTES + i]);
        }

        printf("\n\n");
    }
#endif

#ifdef OUTPENCAPS
    for(int j=0;j<BATCH_SIZE;j++){
        printf("result ct\n");
        for(int i=0;i<FPTRU_KEM_CIPHERTEXTBYTES;i++){
            printf("0x%x,",ct[FPTRU_KEM_CIPHERTEXTBYTES * j + i]);
        }
        printf("\n\n");

        printf("result k1\n");
        for(int i=0;i<FPTRU_SHAREDKEYBYTES;i++){
            printf("0x%x,",k1[FPTRU_SHAREDKEYBYTES * j + i]);
        }
        printf("\n\n");
    }
#endif

#ifdef OUTDECAPS
    for(int j=0;j<BATCH_SIZE;j++){
        printf("result k2\n");
        for(int i=0;i<FPTRU_SHAREDKEYBYTES;i++){
            printf("0x%x,",k2[FPTRU_SHAREDKEYBYTES * j + i]);
        }
        printf("\n\n");
    }
#endif
}


//下面用于测试不添加malloc操作的计时
//#define OUTPUTKEY 1
//#define OUTPENCAPS 1
//#define OUTDECAPS 1
int main(){
    unsigned char array_pk[FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE] = {0};
    unsigned char array_sk[FPTRU_KEM_SECRETKEYBYTES * BATCH_SIZE] = {0};

    unsigned char k1[FPTRU_SHAREDKEYBYTES * BATCH_SIZE] = {0};
    unsigned char ct[FPTRU_KEM_CIPHERTEXTBYTES * BATCH_SIZE] = {0};

    unsigned char k2[FPTRU_SHAREDKEYBYTES * BATCH_SIZE] ={0};

    int res[BATCH_SIZE];

    fptru_keygen(array_pk,array_sk);

    fptru_encaps(ct,k1,array_pk);
    
    fptru_decaps(k2,ct,array_sk,res);

#ifdef OUTPUTKEY //验证整个keygen的正确性
    for(int j=0;j<BATCH_SIZE;j++){
        for(int i=0;i<FPTRU_KEM_PUBLICKEYBYTES;i++){
            printf("0x%x,",array_pk[j * FPTRU_KEM_PUBLICKEYBYTES + i]);
        }

        printf("\n\n");
        for(int i=0;i<FPTRU_KEM_SECRETKEYBYTES;i++){//FPTRU_PKE_SECRETKEYBYTES + FPTRU_PKE_PUBLICKEYBYTES;i++){
            printf("0x%x,",array_sk[j * FPTRU_KEM_SECRETKEYBYTES + i]);
        }

        printf("\n\n");
    }
#endif

#ifdef OUTPENCAPS
    for(int j=0;j<BATCH_SIZE;j++){
        // printf("result ct\n");
        // for(int i=0;i<FPTRU_KEM_CIPHERTEXTBYTES;i++){
        //     printf("0x%x,",ct[FPTRU_KEM_CIPHERTEXTBYTES * j + i]);
        // }
        // printf("\n\n");

        printf("result k1\n");
        for(int i=0;i<FPTRU_SHAREDKEYBYTES;i++){
            printf("0x%x,",k1[FPTRU_SHAREDKEYBYTES * j + i]);
        }
        printf("\n\n");
    }
#endif

#ifdef OUTDECAPS
    for(int j=0;j<BATCH_SIZE;j++){
        printf("result k2\n");
        for(int i=0;i<FPTRU_SHAREDKEYBYTES;i++){
            printf("0x%x,",k2[FPTRU_SHAREDKEYBYTES * j + i]);
        }
        printf("\n\n");
    }
#endif

    for(int i=0;i<FPTRU_SHAREDKEYBYTES * BATCH_SIZE;i++){
        if(k1[i]!=k2[i]){
            printf("(%d,%d,%d),",i,k1[i],k2[i]);
        }
    }

    return 0;

}
/**********下面用于多个stream的调用 start*****************/

#include <thread>
#include <vector>

//#define OUTDECPAS
// 定义参数结构体
struct ThreadArgs {
    unsigned char *array_pk;
    unsigned char *array_sk;
    unsigned char *k1;
    unsigned char *ct;
    unsigned char *k2;
    int * res;
    cudaStream_t stream;
};

struct SpeedResult{
    double keygen,encaps,decaps;
};
// 定义 crypto_kem_keygen 函数
/*extern  float crypto_kem_keygen(unsigned char *array_pk, unsigned char *array_sk, cudaStream_t stream);*/

//extern  void crypto_kem_keygen_no_inv_batch(unsigned char *array_pk,unsigned char *array_sk,cudaStream_t stream);

extern double crypto_kem_keygen_no_inv_batch_stream_ordered_async(unsigned char *array_pk,unsigned char *array_sk,cudaStream_t stream);
extern double crypto_kem_encaps_v4(unsigned char *ct, unsigned char *k, const unsigned char *pk,cudaStream_t stream);
extern double crypto_kem_decaps_v3(unsigned char *k, const unsigned char *ct, const unsigned char *sk,cudaStream_t stream, int *res);

// 线程执行函数
void thread_function_keygen(ThreadArgs *args) {
    crypto_kem_keygen_no_inv_batch_stream_ordered_async(args->array_pk, args->array_sk, args->stream);
}

void thread_function_encaps(ThreadArgs *args) {
    crypto_kem_encaps_v4(args->ct,args->k1,args->array_pk,args->stream);
}

void thread_function_decaps(ThreadArgs *args) {
    crypto_kem_decaps_v3(args->k2, args->ct, args->array_sk,args->stream, args->res);
}

SpeedResult stream_test() {
    SpeedResult res;
    // 定义线程数量
    const int NUM_THREADS = NUM_THREAD;
    // 定义线程数组
    //std::vector<std::thread> threads;
    std::thread threads[NUM_THREADS];
    // 定义参数数组
    std::vector<ThreadArgs> thread_args(NUM_THREADS);
    // 定义 CUDA 流数组
    cudaStream_t streams[NUM_THREADS];

    // 初始化参数和 CUDA 流
    for (int i = 0; i < NUM_THREADS; i++) {
        thread_args[i].array_pk = new unsigned char[sizeof(unsigned char) * FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE];
        /*for(int j=0;j<FPTRU_KEM_PUBLICKEYBYTES;j++){
            thread_args[i].array_pk[j]=PK[j];
        }*/
        thread_args[i].array_sk = new unsigned char[sizeof(unsigned char) * FPTRU_KEM_SECRETKEYBYTES * BATCH_SIZE];
        thread_args[i].ct = new unsigned char[sizeof(unsigned char) * FPTRU_KEM_CIPHERTEXTBYTES * BATCH_SIZE];
        thread_args[i].k1 = new unsigned char[sizeof(unsigned char) * FPTRU_SHAREDKEYBYTES * BATCH_SIZE];
        thread_args[i].k2 = new unsigned char[sizeof(unsigned char) * FPTRU_SHAREDKEYBYTES * BATCH_SIZE];
        thread_args[i].res = new int[sizeof(int) * BATCH_SIZE];

        HANDLE_ERROR(cudaStreamCreate(&streams[i]));
        thread_args[i].stream = streams[i];
    }

    uint64_t hxw1,hxw2;
    //+++++++++++++++++++++完成keygen的测速+++++++++++++++++++++++++
    hxw1 = cpucycles();

    // 创建并启动线程
    for (int i = 0; i < NUM_THREADS; i++) {
        //threads.push_back(std::thread(thread_function_keygen, &thread_args[i]));
        threads[i] = std::thread(thread_function_keygen, &thread_args[i]);
    }

    // 等待线程完成
    for (int i = 0; i < NUM_THREADS; i++) {
        threads[i].join();
    }

    hxw2 = cpucycles();

    res.keygen = (double)(hxw2-hxw1)/ (BATCH_SIZE * NUM_THREADS);
    //printf("gpu for [%d]keygen  is %llu\n",BATCH_SIZE,(unsigned long long)hxw2-hxw1);
    //printf("%llu %lf\n",(unsigned long long)(hxw2-hxw1)/ (BATCH_SIZE * NUM_THREADS),res.keygen);
    //+++++++++++++++++++++完成keygen的测速+++++++++++++++++++++++++


#ifdef OUTPUTKEY //验证整个keygen的正确性
    for(int k = 0; k < NUM_THREADS; k++){
        printf("*****%d******\n",k);
        for(int j=0;j<BATCH_SIZE;j++){
            for(int i=0;i<FPTRU_KEM_PUBLICKEYBYTES;i++){
                printf("%x ",thread_args[k].array_pk[j * FPTRU_KEM_PUBLICKEYBYTES + i]);
            }

            printf("\n");
            for(int i=0;i<FPTRU_KEM_SECRETKEYBYTES;i++){
                printf("%x ",thread_args[k].array_sk[j * FPTRU_KEM_SECRETKEYBYTES + i]);
            }

            printf("\n\n\n");
        }
    }
#endif

    //+++++++++++++++++++++完成encaps的测速+++++++++++++++++++++++++
    hxw1 = cpucycles();

    // 创建并启动线程
    for (int i = 0; i < NUM_THREADS; i++) {
        //threads.push_back(std::thread(thread_function_encaps, &thread_args[i]));
        //printf("threads size = %d\n",thread_args.size());
        threads[i] = std::thread(thread_function_encaps, &thread_args[i]);
    }

    // 等待线程完成
    for (int i = 0; i < NUM_THREADS; i++) {
        threads[i].join();
    }

    hxw2 = cpucycles();

    res.encaps = (double)(hxw2-hxw1)/ (BATCH_SIZE * NUM_THREADS);
    //+++++++++++++++++++++完成encaps的测速+++++++++++++++++++++++++


    //+++++++++++++++++++++完成decaps的测速+++++++++++++++++++++++++
    hxw1 = cpucycles();

    // 创建并启动线程
    for (int i = 0; i < NUM_THREADS; i++) {
        threads[i] = std::thread(thread_function_decaps, &thread_args[i]);
    }

    // 等待线程完成
    for (int i = 0; i < NUM_THREADS; i++) {
        threads[i].join();
    }

    hxw2 = cpucycles();

    res.decaps = (double)(hxw2-hxw1)/ (BATCH_SIZE * NUM_THREADS);
    //+++++++++++++++++++++完成decaps的测速+++++++++++++++++++++++++

#ifdef OUTDECPAS
    printf("decaps result\n");
    for (int i = 0; i < NUM_THREADS; i++) {
        for(int j = 0; j < BATCH_SIZE; j++){
            printf("%d,",thread_args[i].res[j]);
        }
        printf("\n");
    }
#endif


    // 销毁 CUDA 流
    for (int i = 0; i < NUM_THREADS; i++) {
        cudaStreamDestroy(streams[i]);
    }

    // 释放参数内存
    for (int i = 0; i < NUM_THREADS; i++) {
        delete[] thread_args[i].array_pk;
        delete[] thread_args[i].array_sk;
        delete[] thread_args[i].ct;
        delete[] thread_args[i].k1;
        delete[] thread_args[i].k2;
        delete[] thread_args[i].res;
    }

    return res;
}


struct KEY {
    unsigned char *array_pk;
    unsigned char *array_sk;
};

/*double stream_exp(){
    float   elapsedTime;
    cudaEvent_t start, stop;
    const int NUM_THREADS = 10;
    cudaStream_t streams[NUM_THREADS];
    std::vector<KEY> pks(NUM_THREADS);
    for(int i=0;i<NUM_THREADS;i++){
        pks[i].array_pk = new unsigned char[sizeof(unsigned char) * FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE];
        pks[i].array_sk = new unsigned char[sizeof(unsigned char) * FPTRU_KEM_SECRETKEYBYTES * BATCH_SIZE];
    }
    BEFORE_SPEED
    for(int i=0;i<NUM_THREADS;i++){
        crypto_kem_keygen_tensor_core()
    }



    BEFORE_SPEED
}*/


#define TESTS 100
int main_0(){
    printf("test num=%d,BATCH_size = %d,NUM_thread=%d\n",TESTS,BATCH_SIZE,NUM_THREAD);
    SpeedResult res_tmp;
    SpeedResult res;
    res.keygen = res.encaps = res.decaps = 0;
    unsigned long long total_time=0;
    for(int i=0;i<TESTS;i++){
        res_tmp = stream_test();
        res.keygen += res_tmp.keygen;
        res.encaps += res_tmp.encaps;
        res.decaps += res_tmp.decaps;
    }
    printf("avarage keygen = %lf\n avarage encaps = %lf\n avarage decaps = %lf\n",res.keygen/TESTS,res.encaps/TESTS,res.decaps/TESTS);
}

/**********下面用于多个stream的调用 end*****************/
/*
int main(){
    montgomery_reduce_n653_cuda()=montgomery_reduce_n653_ptx()
}*/

/*********************************************下面用于测试montgomery的ptx版本
#define NUM_TESTS 1000

__global__ void test_montgomery_reduce(int64_t* inputs, int32_t* outputs_ptx, int32_t* outputs_cuda, int num_tests) {
    int idx = threadIdx.x + blockIdx.x * blockDim.x;
    if (idx < num_tests) {
        int64_t a = inputs[idx];
        outputs_ptx[idx] = montgomery_reduce_n653_ptx(a);
        outputs_cuda[idx] = montgomery_reduce_n653_cuda(a);
    }
}
int main() {
    int64_t* h_inputs = (int64_t*)malloc(NUM_TESTS * sizeof(int64_t));
    int32_t* h_outputs_ptx = (int32_t*)malloc(NUM_TESTS * sizeof(int32_t));
    int32_t* h_outputs_cuda = (int32_t*)malloc(NUM_TESTS * sizeof(int32_t));

    for (int i = 0; i < NUM_TESTS; ++i) {
        h_inputs[i] = rand() % UINT64_MAX;
    }

    int64_t* d_inputs;
    int32_t* d_outputs_ptx;
    int32_t* d_outputs_cuda;

    cudaMalloc(&d_inputs, NUM_TESTS * sizeof(int64_t));
    cudaMalloc(&d_outputs_ptx, NUM_TESTS * sizeof(int32_t));
    cudaMalloc(&d_outputs_cuda, NUM_TESTS * sizeof(int32_t));

    cudaMemcpy(d_inputs, h_inputs, NUM_TESTS * sizeof(int64_t), cudaMemcpyHostToDevice);

    test_montgomery_reduce<<<(NUM_TESTS + 255) / 256, 256>>>(d_inputs, d_outputs_ptx, d_outputs_cuda, NUM_TESTS);

    cudaMemcpy(h_outputs_ptx, d_outputs_ptx, NUM_TESTS * sizeof(int32_t), cudaMemcpyDeviceToHost);
    cudaMemcpy(h_outputs_cuda, d_outputs_cuda, NUM_TESTS * sizeof(int32_t), cudaMemcpyDeviceToHost);

    bool correct = true;
    for (int i = 0; i < NUM_TESTS; ++i) {
        if (h_outputs_ptx[i] != h_outputs_cuda[i]) {
            //if(h_outputs_cuda[i] - h_outputs_ptx[i] != Q_N653){
                printf("Mismatch at index %d: PTX = %d, CUDA = %d\n", i, h_outputs_ptx[i], h_outputs_cuda[i]);
                correct = false;
            //}
        }
    }

    if (correct) {
        printf("All tests passed!\n");
    }

    free(h_inputs);
    free(h_outputs_ptx);
    free(h_outputs_cuda);
    cudaFree(d_inputs);
    cudaFree(d_outputs_ptx);
    cudaFree(d_outputs_cuda);

    return 0;
}
*/