#include "kernel.h"
#include "params.h"
#include "random.h"
#include "poly.h"
#include "pack.h"
#include "speed.h"
#include "tensor.h"

#include "./fips202_ws/global.cuh"

#define CORRECT 1

// #if (FPTRU_N == 653)
#include "./poly_mul_n653q/n653.h"
#include "./poly_mul_n761q/n761.h"
#include "./poly_mul_n1277q/n1277.h"
// #endif

#include <iostream>
#include<sys/time.h>
using namespace std;
void look_coins_h(unsigned char * coins_h){
    printf("look coins h\n");
    for(int i=0; i<FPTRU_COIN_BYTES * BATCH_SIZE;i++){
        printf("0x%x,",coins_h[i]);
    }
}
unsigned char test_coin[((((FPTRU_N * 6 + 7) / 8) * 2)) * 32] = {0x90,0xe0,0x82,0x50,0x54,0xf6,0x8,0xf9,0x24,0x3f,0xf7,0xd0,0x1a,0x22,0x71,0x67,0x93,0x4f,0xdc,0x65,0xd,0x3b,0xe3,0x89,0xf4,0x8f,0x6f,0x68,0xc7,0x56,0xc1,0xe4,0xf6,0x16,0xfe,0x8f,0xf4,0x78,0x5d,0xc0,0x6a,0x41,0x1c,0x6f,0x4f,0xc2,0xdc,0xad,0x35,0x2f,0xb4,0x2f,0xd4,0x0,0xb5,0xe9,0x8f,0x5b,0x8c,0x6c,0x7a,0xc,0xde,0x4a,0x37,0x7f,0x2d,0xf2,0xa9,0x1d,0x82,0x88,0x56,0xa9,0x61,0xde,0xb,0xed,0xea,0x22,0xde,0x5a,0x9e,0x89,0x51,0xe4,0x91,0x92,0x94,0x95,0xb9,0x8e,0xe6,0xbb,0x12,0x33,0xa6,0xde,0xe2,0x4b,0x5,0x44,0xa7,0x2c,0x2d,0xf4,0x4b,0x10,0x39,0xe2,0x49,0x77,0xed,0x6a,0xed,0x8e,0xec,0x6a,0x9e,0x21,0xf7,0x6f,0x82,0x73,0x3e,0xa8,0x13,0xb1,0xc3,0xc,0xd9,0x75,0x13,0x9e,0xa,0x61,0x8c,0xdb,0x7e,0xc3,0x73,0x47,0xaa,0xd5,0x23,0xba,0xb5,0xff,0xe1,0xd7,0x8b,0xee,0x8c,0xc,0x41,0xde,0x3d,0xd3,0x5e,0x1d,0xa1,0x91,0x2,0xb,0x66,0x63,0x69,0x38,0xc2,0x75,0x18,0xce,0xfc,0x18,0x3c,0x4a,0x70,0x29,0x23,0xb2,0x2f,0xa1,0xed,0x84,0xc8,0x1b,0x5c,0x74,0xe0,0x4f,0x20,0x7d,0x93,0xed,0x31,0xfe,0x88,0x8d,0x39,0xef,0x44,0xbc,0x14,0x7a,0xd3,0x62,0x4a,0xb2,0x99,0xbc,0x52,0x31,0x6d,0xe0,0x71,0xb5,0xed,0x83,0xbf,0x86,0xf7,0x65,0xc3,0x5f,0xef,0xe9,0xeb,0x9e,0x62,0x4f,0xdb,0xd8,0xc1,0x92,0x57,0x47,0xdb,0xfb,0x7,0x42,0xec,0xb9,0x9e,0x14,0x9e,0x38,0x41,0xf1,0xed,0xf6,0xb5,0x95,0x70,0xa5,0x44,0x62,0x0,0xed,0x6a,0xc1,0xa3,0x85,0x83,0xe6,0x52,0xf6,0x0,0x30,0xde,0x89,0x17,0x86,0x67,0xd,0x6c,0x80,0x93,0x14,0x36,0x7e,0xe3,0xe5,0x6c,0xa9,0xe2,0x4b,0xf5,0xd2,0x2b,0x7e,0xf3,0xe1,0xfa,0xc2,0x43,0xdc,0x21,0xfb,0x7e,0xd2,0xcd,0x9e,0x9a,0x42,0x60,0x11,0x4b,0xe0,0x71,0x52,0xa8,0xf2,0x1e,0x88,0xb1,0x5e,0x16,0xa1,0xe7,0x3c,0x6e,0xa,0x70,0x29,0x5d,0xa1,0x6e,0x3a,0x2a,0x30,0xf1,0x3,0x67,0x48,0x81,0x4a,0x62,0x5d,0x76,0xc0,0x44,0x82,0x18,0x86,0x4a,0x55,0x13,0x56,0x6c,0xcb,0x9e,0xd3,0x37,0x1d,0x3c,0x62,0x74,0x7b,0x91,0x44,0xec,0x4a,0xfa,0x3,0xe8,0x29,0x68,0xfa,0x18,0xd3,0xfb,0xef,0xd4,0x26,0xf3,0x67,0x44,0x88,0x8b,0x5c,0x79,0x57,0xb6,0x80,0x6d,0x70,0x4a,0xec,0x85,0xca,0x24,0x64,0x38,0xfb,0x39,0x86,0xa9,0x58,0x3d,0xe2,0x3b,0xbb,0x7a,0xb0,0x10,0xd2,0x63,0x3e,0xa1,0xd1,0xab,0x51,0xd0,0xa0,0x84,0x16,0xc1,0x2,0xad,0xb8,0x30,0x28,0xc3,0xd0,0x23,0x47,0x28,0xf0,0x6c,0xcf,0x90,0x64,0xa7,0x73,0x6a,0xa4,0xe7,0x59,0xfa,0x78,0x92,0x71,0x6d,0xdb,0xc5,0x5b,0xa6,0x34,0xbe,0x33,0xfc,0x89,0x60,0x43,0xad,0xae,0x48,0xc8,0x76,0x98,0x86,0x6e,0x65,0xa7,0x9e,0x84,0x58,0xfb,0x5,0x79,0x27,0x51,0x4b,0x3e,0x50,0x99,0xc0,0x8,0x6c,0x4e,0xdb,0xb5,0x9b,0x59,0xcc,0x9b,0x77,0x9,0x36,0x96,0xe8,0x2f,0x34,0x8c,0x8e,0x6b,0x3f,0xea,0xfa,0xaa,0x66,0x85,0x23,0x3d,0x8c,0x1,0x3a,0x11,0xdb,0x73,0xf3,0x98,0xf7,0xa3,0xbd,0xf,0xc9,0xbe,0xb2,0x4d,0x9b,0xd2,0x15,0x89,0x12,0xd6,0xe3,0xa3,0xe8,0x72,0x91,0x85,0xf1,0x25,0x84,0xdf,0x6e,0xf4,0xa9,0x53,0x33,0xb6,0x3c,0x81,0xc8,0xfc,0x3d,0xa0,0x69,0x1,0xd6,0xf5,0x35,0xfe,0xe1,0x37,0x76,0xbe,0xc0,0x18,0x7e,0x6e,0x12,0x78,0x9c,0x2f,0x14,0xf7,0x47,0x15,0x79,0xcc,0x8f,0x71,0xf5,0x3c,0x14,0xba,0x60,0x6a,0xf8,0xa8,0xc2,0xe3,0xb1,0x97,0x9b,0xa1,0x29,0xab,0x90,0x62,0xc9,0x71,0xd,0xe5,0x45,0x57,0xa1,0x14,0x86,0x3e,0x2b,0xbe,0x72,0x8d,0x68,0x9,0x37,0xe4,0x3d,0xda,0x5e,0xb0,0x88,0xea,0x72,0xe0,0xf2,0x75,0x9c,0x2e,0x78,0x83,0x25,0xe2,0x61,0x9,0x5f,0x37,0x63,0xe,0x61,0xe8,0x0,0xe8,0xdf,0x8c,0x2a,0xf2,0xd4,0xc6,0x51,0x2e,0x69,0xc5,0xe5,0x78,0x5f,0x2b,0x84,0x9e,0xc2,0x50,0xa1,0x95,0x15,0x11,0xc9,0x66,0xc8,0x1c,0x4d,0xc2,0x48,0x7d,0x4c,0xb3,0x2f,0xfe,0x8b,0x7,0xb6,0x2a,0xfa,0xcd,0xcd,0x28,0xd,0x26,0x43,0xd0,0x9f,0x76,0xfc,0x0,0x45,0x3c,0xf4,0x66,0x3f,0xc8,0x99,0xf0,0x19,0x3,0x9a,0x64,0x5f,0xf1,0x3,0xfd,0x82,0xc7,0x22,0xf0,0x7b,0x2a,0x15,0x67,0xae,0x55,0xc1,0x64,0x85,0xe6,0x5f,0x38,0x8f,0x50,0xf9,0x29,0x24,0x76,0x64,0xc1,0x9f,0xf4,0x64,0xf4,0x86,0x3,0x24,0x9a,0x76,0x69,0x7f,0xec,0x94,0xbc,0x28,0xbe,0x8e,0xb6,0x11,0xc6,0xf8,0x6a,0xf5,0x59,0x35,0x5e,0xed,0x9e,0x3b,0x38,0xad,0x1a,0x26,0x8b,0x64,0x57,0x1,0xe,0xd,0x4d,0xe,0x15,0xb5,0x7d,0xb7,0x8c,0x94,0xc,0xf9,0x5a,0x25,0x7d,0xa7,0x3e,0xe3,0x6b,0x61,0xe2,0x91,0xfd,0xa8,0x3d,0x63,0xdb,0xd4,0x67,0x11,0x2b,0xb9,0x7b,0x4f,0xc0,0x83,0xd3,0x73,0x50,0x6c,0xa6,0xe6,0x68,0x2,0xf2,0xd0,0xac,0x6,0xd8,0x1f,0x8e,0x7,0x7,0xba,0xf0,0xd4,0x9e,0x2d,0xae,0x50,0x6,0x7d,0x33,0x6c,0x62,0x97,0x77,0x56,0x26,0x95,0x75,0x94,0xf3,0xb3,0xde,0x1,0x6d,0xbc,0xb7,0x9a,0xb8,0x80,0x23,0x4d,0x3a,0x5b,0x0,0x7,0xa0,0xdd,0x7a,0x71,0xa2,0x60,0x85,0xee,0x9f,0x9c,0x50,0x32,0xf6,0x15,0xa4,0x10,0x8c,0xb1,0xe0,0x8f,0x3c,0xc,0xae,0x6,0x3a,0x3,0x63,0x89,0x35,0xc,0x9a,0xe0,0x10,0x31,0x0,0x73,0x64,0x51,0x15,0xa4,0x28,0x76,0xc5,0x90,0xd8,0xf3,0x3d,0x3c,0x8b,0x8,0xcb,0x80,0xc2,0xc8,0xfe,0x1f,0x55,0xa9,0xf8,0x98,0x6f,0xf7,0xfe,0xfe,0x38,0xcb,0x2c,0xce,0x56,0x48,0xc1,0xd1,0x83,0x6,0x6b,0x10,0x2a,0xc9,0x58,0xc,0xe2,0x94,0xc3,0xe7,0x38,0xf0,0x87,0x6f,0xfa,0x4d,0x43,0xf2,0x27,0xe2,0x16,0x0,0xa8,0xb6,0x41,0xe,0x30,0x16,0xa2,0x6a,0xd3,0xe8,0x7a,0xad,0x20,0x8c,0x3f,0x24,0xec,0x8a,0xff,0x6a,0x8d,0xbe,0x11,0xd7,0xbb,0xaf,0x3c,0x1c,0x49,0x63,0xf4,0xe1,0xf,0x85,0x8d,0xa,0x0,0x8b,0xfd,0xfd,0x71,0xa1,0x76,0x7,0x98,0x72,0xb6,0x40,0xc2,0xa4,0xc7,0x42,0x68,0x53,0xcd,0x79,0x82,0x22,0xee,0xef,0xf8,0xb0,0xf7,0xb1,0xf1,0x89,0x39,0xae,0xd,0x9a,0x75,0xe1,0xc4,0xe5,0xc4,0xe3,0xe6,0xa4,0xbe,0xe0,0xa9,0x47,0x3e,0x7b,0x39,0xd5,0x51,0x63,0x20,0xb3,0x33,0x15,0x82,0xc2,0xc3,0xdf,0xf8,0x19,0xde,0xdc,0xc5,0x6e,0x39,0xa,0x7,0x82,0xba,0x68,0xe,0x1b,0x82,0x66,0x65,0x81,0xee,0x47,0x9b,0x2d,0x95,0xfa,0x3d,0xd8,0xbe,0xfb,0x58,0x67,0xb0,0x33,0x33,0x61,0x98,0x4b,0x83,0xfe,0x8f,0x6f,0xa0,0x6a,0x45,0xb1,0xd4,0x2f,0x48,0xec,0x56,0xd7,0x10,0xf0,0x31,0x3,0x85,0xdd,0xfa,0x6a,0xad,0x1b,0x45,0x49,0xf8,0x3,0x82,0x31,0xfa,0xeb,0x46,0xad,0x54,0xeb,0x45,0xcf,0x6a,0x17,0xfd,0xe0,0x8a,0x77,0x1b,0xe,0xe,0xa,0x1c,0xe7,0x71,0x8,0x8f,0x75,0xd,0x50,0xec,0x96,0xc3,0x8c,0xcb,0x1b,0x58,0x39,0x94,0x9c,0x3a,0xe7,0xda,0xfb,0x49,0x40,0xd0,0x45,0x78,0xed,0xec,0xa,0x30,0x97,0xe,0x8b,0x43,0x6c,0x28,0x29,0xd4,0x21,0x50,0xf1,0xdb,0x3,0x6b,0x4,0x55,0xfe,0x57,0xb3,0xd,0xc4,0x7,0xe2,0x65,0x3d,0x5a,0xf4,0xfb,0x4b,0x49,0x1e,0x79,0xfa,0x2a,0x72,0x79,0xc2,0xb6,0xb4,0x13,0xad,0x7a,0xcb,0x49,0x57,0x3b,0xc6,0xba,0x89,0x15,0x5c,0x51,0x96,0xca,0x49,0x93,0xc5,0x5d,0x3c,0xe4,0x33,0xc5,0x4f,0xd1,0xbc,0xb0,0x79,0x1c,0x75,0x9f,0xa8,0x21,0x62,0x78,0x4d,0xce,0x0,0x11,0x68,0x1,0x1c,0x4c,0x1b,0xef,0x99,0xd,0xed,0x5f,0xa6,0x4c,0xf6,0xd7,0x1f,0x9e,0xe4,0xc5,0xcd,0xb6,0xf6,0xce,0x5,0xdf,0x51,0xac,0xb4,0x63,0x11,0xb,0x52,0x41,0xae,0x12,0xdf,0x9c,0x54,0xdc,0x1c,0x12,0xc4,0xca,0x7f,0x6e,0x96,0x52,0x77,0xb1,0xac,0xfd,0xbf,0xbe,0xd,0x9,0x2f,0x7f,0x6d,0x73,0x20,0xb5,0xe9,0xf7,0x2e,0x42,0x13,0x9b,0x9a,0xb7,0x6e,0x36,0x3,0xa7,0x86,0x84,0x38,0x89,0x1e,0xd0,0xca,0xc3,0x9c,0xbb,0x30,0xe8,0xf2,0x66,0xbc,0x6c,0x53,0xaa,0x7b,0x66,0xa3,0x6b,0x1f,0xe9,0x63,0xb3,0xdf,0x2d,0x90,0x5f,0x41,0x7c,0xde,0x37,0xdb,0xd3,0x5c,0xb1,0x7f,0x99,0xe6,0x70,0x9a,0x45,0x87,0xde,0x6a,0x9c,0x53,0x58,0x74,0xe,0x63,0x1d,0x51,0x9d,0x6b,0xae,0x2f,0xb2,0xeb,0xed,0x16,0xba,0x3e,0xc4,0x9c,0x38,0xf1,0x21,0x66,0xd,0xce,0xd,0x5,0x1b,0x38,0xa,0x9c,0xca,0xff,0x87,0x73,0x9e,0x97,0x6d,0x34,0x9,0xd0,0xa1,0xb9,0x4a,0xee,0x3b,0x81,0xfd,0x1a,0x9c,0x9d,0x7a,0x6d,0x0,0x74,0x36,0x8d,0xf2,0x2b,0xad,0xf2,0x62,0x2a,0xe8,0xf0,0x88,0xc6,0xd3,0x61,0xd4,0x29,0xb9,0xf2,0x76,0xed,0xb0,0xd8,0xd5,0x42,0xac,0x42,0x39,0xd2,0x3c,0xd1,0x60,0xc6,0xf5,0x94,0xbf,0x7,0x96,0xf9,0xa0,0xb8,0x4d,0xfa,0x5e,0x85,0x91,0xb9,0x27,0xab,0x51,0x9f,0x3a,0xe4,0xde,0x4,0xeb,0x2f,0x41,0x16,0xae,0x91,0xfb,0xf1,0xa7,0xb3,0xd5,0xa7,0xa,0x6a,0x1c,0xff,0x28,0x4f,0xd9,0xb8,0x31,0x1b,0x3a,0xc0,0x52,0x74,0x16,0xe5,0xc,0xa5,0xb6,0xce,0x5a,0x89,0xb,0xb3,0xd8,0xc0,0xf6,0x1d,0x7a,0xbb,0xf2,0xc0,0x0,0x4a,0x6b,0x9,0x94,0x76,0x7e,0xdc,0xfc,0x77,0xcc,0x5b,0x9f,0x31,0xa9,0xe0,0x2b,0x45,0x49,0x5f,0x4d,0x60,0xb2,0xfe,0xb3,0x1f,0xba,0xd9,0xee,0x23,0x61,0x6b,0x40,0xa1,0x95,0x73,0x49,0x6e,0x53,0xb5,0xf7,0x45,0x8f,0xd9,0x8e,0xcd,0x65,0x8c,0xcd,0xa,0xa4,0x97,0x5a,0x62,0x55,0x53,0x45,0xfe,0x8,0x2e,0xf2,0xbc,0x33,0xdf,0x29,0x3b,0x2a,0xcc,0x2a,0x33,0xad,0x81,0xc8,0xa6,0xb3,0x4c,0xbd,0x8f,0xae,0x82,0x9f,0x91,0xb1,0xd5,0xec,0x5,0x78,0x32,0x97,0xcb,0x5d,0x66,0xf8,0x89,0x51,0x23,0xb0,0xe,0x84,0xd6,0x98,0x89,0xf5,0xf5,0x8d,0xda,0x98,0xf0,0x2,0xcd,0x81,0x7b,0xe2,0x88,0x36,0xa5,0xab,0x45,0xa5,0xc3,0x96,0x8,0xc7,0x9f,0xd3,0xf,0xbf,0x5f,0xc7,0x64,0x92,0xfc,0x31,0xa9,0xe1,0x8,0x77,0xff,0x32,0x96,0x5f,0x77,0xb2,0xe7,0x4c,0xbd,0xe1,0xfa,0xed,0x2c,0x59,0x9d,0xc4,0x25,0x4c,0x1b,0x61,0x26,0x6b,0x6b,0x48,0x7f,0xa7,0xb3,0xbc,0x6a,0x6,0xa7,0xa0,0x9a,0x9f,0x9a,0xae,0x89,0x49,0xa1,0x6a,0x1c,0xef,0xb9,0x5f,0x1c,0xec,0x3f,0xf0,0xa5,0xaa,0xea,0x65,0xeb,0xc,0x8f,0x71,0xa8,0x6f,0x66,0x6e,0xe1,0x3d,0x90,0x85,0x4,0x23,0x85,0x8,0x40,0x17,0x25,0xd2,0x23,0xd3,0x39,0x52,0xbf,0x20,0x48,0x44,0xec,0x34,0xae,0x15,0x1c,0xb8,0xec,0x39,0x46,0x8c,0x3,0x49,0xe6,0x9a,0x7c,0xf1,0xc4,0x3b,0x14,0xd5,0xcd,0x59,0x91,0x9,0xb6,0xa4,0xb0,0x8b,0xb2,0xb,0x29,0x6f,0xa9,0x91,0x2c,0x3f,0x9e,0x2c,0x77,0x39,0xaa,0xdc,0xfe,0xbb,0x93,0xe9,0x6a,0x51,0xa,0xba,0x87,0x70,0xf4,0x4,0x57,0x62,0xfc,0x6e,0xa2,0x10,0xbe,0xc7,0x87,0x24,0xa,0xd4,0x1a,0x5c,0x51,0x58,0x7f,0xf8,0xec,0x8e,0xf9,0xcb,0x17,0x34,0xa0,0xd,0x22,0xa9,0xfd,0xfe,0x41,0xfd,0xa1,0x12,0x2e,0xe1,0x29,0xc1,0x46,0xd1,0xf7,0xc8,0x32,0x6f,0x4a,0x6,0xf8,0x91,0xd0,0x5,0x1a,0x50,0x16,0xa6,0x9b,0x66,0x7c,0x5f,0xcc,0xda,0xb5,0x85,0x67,0xd6,0x6c,0x99,0xf2,0xde,0xaf,0xaa,0x52,0x8,0x8e,0xfc,0xd5,0xe6,0x4c,0x3c,0x77,0xa5,0xb5,0x1,0xfa,0xa0,0xc9,0xbf,0xc9,0x2f,0x24,0x9a,0xc3,0x93,0xc,0x7a,0xe2,0x6d,0x90,0x1a,0x66,0x2b,0x88,0x64,0x2d,0x45,0x66,0x30,0x97,0x1f,0xd9,0x88,0xda,0xd0,0x53,0x35,0xf2,0x87,0x3b,0xa7,0x1c,0xdc,0x9d,0xad,0x1c,0x55,0x6c,0x39,0xae,0x63,0xbb,0xe0,0xe7,0x6,0xfa,0x15,0x3a,0x9a,0x4c,0xa,0x22,0xd6,0xc9,0xde,0x3c,0x2,0x0,0x72,0x2b,0x8a,0xce,0xa0,0xd0,0x34,0xb8,0xf8,0xf8,0x20,0xe,0x58,0x16,0x8b,0x3,0x15,0x85,0xf6,0x0,0x15,0x65,0x82,0xeb,0x94,0x97,0x86,0x53,0x8b,0x37,0xbe,0x9e,0x54,0x5,0xbf,0x3b,0xad,0xc1,0xa,0x4d,0xc1,0xe4,0xb3,0xf2,0xcc,0x82,0x71,0x87,0x5d,0xbd,0x71,0x34,0xaf,0x30,0xe3,0xa5,0xa3,0x42,0x8b,0x40,0x8b,0x3f,0x5d,0xfb,0x63,0x67,0xf8,0xf2,0xda,0xbb,0xa8,0x24,0x2,0x9d,0xf2,0x5f,0xfa,0xe3,0x20,0xad,0x38,0xd9,0x88,0xed,0xa6,0xd2,0xc3,0x64,0x47,0xd5,0x42,0xe,0x3a,0xf6,0xea,0xec,0x28,0x43,0xf3,0xef,0xe6,0xf5,0x6d,0x75,0x73,0x26,0x31,0xc0,0xec,0x89,0xa2,0xb0,0x83,0x8b,0xab,0x46,0xd1,0x29,0xef,0x58,0x14,0x9c,0x2b,0x2f,0x54,0xea,0x2c,0x2d,0x4f,0x7b,0x89,0xbf,0x6b,0x96,0x3a,0xf1,0xdd,0x9e,0x73,0xf9,0x87,0xf9,0xc8,0x5b,0xac,0xf1,0x2c,0x40,0x6e,0xc6,0xf8,0xe8,0x34,0xff,0x60,0x8d,0x6c,0x32,0x83,0xfe,0x8b,0xf5,0xd9,0xb9,0xc9,0x66,0x8,0xc0,0xaf,0x64,0x8e,0x39,0x14,0xf2,0x24,0x2b,0x53,0xd0,0x8c,0x9c,0x27,0x5a,0x3,0x1b,0xc5,0xdf,0xaf,0x3e,0xf,0x97,0xc2,0x6c,0xf,0x43,0xe7,0x7,0xfe,0x19,0xc2,0x50,0x9f,0xfe,0xf,0xe1,0x3f,0xe0,0xbb,0x2c,0x2d,0x50,0x4,0xe8,0xae,0x76,0xd6,0x30,0x9f,0xb8,0x48,0xda,0xda,0xf1,0x27,0xe,0x6f,0x1,0x4d,0x3,0x1f,0x62,0x8e,0xfd,0x4e,0x6a,0x5a,0x9d,0xbe,0x5e,0x88,0xa5,0x5a,0x2c,0x17,0xa4,0xa3,0x42,0x3,0xf6,0xdc,0xe5,0x9c,0x39,0xdb,0x40,0x6f,0x2f,0x1f,0x6d,0x76,0xc3,0x8e,0x57,0x93,0xb,0x53,0xdd,0x36,0x45,0xeb,0x96,0x22,0x5f,0x54,0xac,0x3d,0x5b,0x6,0x59,0xe5,0x5e,0x6d,0x71,0xee,0x1d,0xb3,0x16,0x30,0xb8,0xa,0x81,0xf8,0xdb,0x36,0x6f,0x5e,0x8a,0x33,0xb3,0x5c,0xda,0x50,0xa0,0x66,0xd0,0xab,0xc9,0xbb,0x38,0x8b,0xbc,0xdc,0x46,0xfb,0xbe,0xc7,0x90,0xc7,0x68,0xaa,0x9b,0x16,0x4e,0x32,0x43,0xff,0x1,0x1d,0x71,0x49,0x86,0xc6,0xcd,0xae,0xde,0xeb,0x6e,0xd,0xd5,0xee,0x86,0x7e,0x75,0x69,0x72,0x81,0xfe,0x24,0x6a,0xe5,0x8b,0xf6,0x62,0xc4,0x52,0xe7,0xbe,0xd8,0xf2,0xa1,0xd3,0x9b,0xe0,0xfe,0x4,0xe6,0xe1,0xc7,0x25,0xba,0xcb,0x4e,0xa7,0xdc,0xa3,0x71,0x6c,0x2f,0x4f,0x9a,0x7f,0xf0,0x49,0x34,0xd7,0x14,0xfc,0xc9,0xb5,0xc6,0x24,0x9b,0x4e,0x8a,0x21,0xb3,0xa1,0xca,0xc0,0x3a,0x1f,0xd7,0x73,0x13,0xbd,0x60,0x4e,0x13,0x93,0xba,0x99,0x8,0x77,0x65,0xe4,0xf,0xa6,0x6f,0x9c,0x64,0x7d,0xbf,0xf,0xd3,0x18,0x59,0xa0,0x5b,0xe1,0x67,0x1c,0x74,0x70,0xf3,0x23,0x21,0x93,0x5e,0x20,0x6,0x9f,0x30,0xdf,0x9f,0x4,0x40,0x87,0x15,0x95,0x7b,0x31,0xb5,0x96,0xf0,0x0,0xc3,0x3b,0x49,0xb8,0xce,0x57,0xba,0x23,0xbd,0x2f,0x2,0xa8,0x4b,0x38,0xa0,0xb3,0xf2,0x56,0x53,0x37,0xd0,0xea,0x17,0x42,0xdc,0xa1,0x2c,0xa8,0xfc,0x3,0xa6,0x9a,0x3b,0x7c,0x72,0xbd,0x40,0x49,0x72,0xca,0xfe,0x98,0xb7,0x35,0x47,0x56,0xd4,0x5c,0xa8,0xe9,0x6,0xb,0xe7,0x62,0xc5,0xd8,0x45,0xd7,0xbe,0x60,0xd1,0xdf,0xa4,0x70,0x3e,0x1f,0xd1,0x79,0x9c,0x5b,0x92,0x7f,0x7d,0x54,0x17,0x32,0x6b,0x1a,0x63,0xc9,0x4c,0xd6,0x2,0xd4,0x5e,0x99,0xd,0x1d,0x19,0x73,0x7b,0x20,0x73,0x47,0xf6,0x26,0xcb,0x64,0x27,0x64,0xae,0x9b,0x96,0x5,0x9a,0x5a,0x17,0x68,0x4f,0xba,0x98,0x7,0x98,0xec,0xeb,0xfa,0xd8,0x5a,0x7,0xcd,0x30,0xa8,0x42,0x72,0xe5,0x4b,0x1f,0x89,0xa7,0xdb,0x6a,0xe0,0x23,0x76,0x8,0x3f,0x12,0x29,0xf0,0xdb,0x4d,0x81,0xd2,0x41,0x64,0xd0,0x88,0x21,0x31,0xf5,0x16,0xd7,0x7,0xca,0xb1,0x93,0x53,0x86,0xcb,0xeb,0x2e,0x94,0x11,0x96,0xc9,0xfe,0x3f,0x81,0xa7,0xa,0x80,0x72,0xd3,0x9,0x16,0xb1,0x10,0x31,0x22,0x34,0xe4,0x95,0xba,0xcc,0xd6,0x96,0x2b,0x8e,0x25,0xbb,0x30,0x47,0x33,0x9,0x35,0xf3,0xb0,0x94,0xaf,0x3e,0xf9,0xd,0x14,0xea,0xc5,0x88,0xe7,0x53,0xf2,0xb9,0xa3,0xb9,0xc8,0xd3,0xa6,0x1b,0x75,0xc1,0xea,0xde,0x8b,0x37,0xed,0xbb,0xfe,0x5b,0xfd,0x2b,0x77,0x99,0xe1,0x92,0x3,0x75,0xd7,0x22,0x74,0x40,0x47,0x36,0xbb,0x78,0x5e,0xe4,0xcb,0xe9,0x99,0x11,0xf8,0x11,0x54,0xe5,0xb4,0x50,0xed,0xed,0xdd,0xf6,0x8c,0x6b,0x3b,0x5a,0xc4,0x53,0xf8,0x19,0x18,0xd3,0x62,0x93,0x8c,0x8e,0x6a,0xbc,0x71,0xee,0xff,0x9d,0x49,0xe3,0x1a,0x2,0x74,0x47,0xdc,0xc0,0x8c,0x55,0x17,0xa7,0x17,0xeb,0x71,0xf8,0x96,0x4a,0xac,0xbd,0x74,0xd0,0x2c,0xaa,0x77,0x6e,0x5b,0xd,0x9d,0xd7,0xaf,0x6e,0xe5,0x49,0xcb,0xb8,0x3a,0xe5,0x74,0xf1,0x38,0xea,0x5b,0x41,0x34,0x67,0xa8,0xa4,0x72,0xe9,0x34,0xa9,0xf6,0xb1,0x82,0x0,0xb1,0xc8,0x1,0xfe,0x3,0x1d,0xc1,0x99,0x67,0x76,0x7,0x2a,0x29,0x83,0x5b,0x7e,0xa4,0x53,0xd2,0x1a,0xc5,0x53,0xd3,0x8,0x7e,0xfb,0xbf,0xbd,0xa3,0x61,0x5c,0x57,0xee,0x6d,0x4,0x80,0x8,0x93,0x9b,0x3c,0x7e,0xc2,0xbc,0x59,0x74,0x88,0x4,0x8c,0x2e,0xc2,0x9e,0x17,0x73,0x37,0xcc,0xf8,0x14,0x93,0xe5,0x5f,0xd2,0x2,0x4d,0xe8,0x50,0x88,0xb0,0xff,0xf3,0x19,0x76,0x68,0xea,0xeb,0x97,0x64,0x96,0xc7,0xca,0x1c,0x5,0xd3,0xa9,0x1a,0xf3,0x1c,0x9b,0x9,0xe0,0x8b,0x81,0xa,0x7f,0xe1,0xa,0xbd,0xf8,0xb0,0x46,0xa4,0x87,0x5c,0x2c,0x2a,0x68,0x47,0xac,0xef,0x9,0xf3,0x90,0x88,0x3f,0x9e,0x28,0x65,0xc6,0xda,0x91,0xcd,0xc2,0xe3,0x60,0x1,0x6c,0x41,0xd5,0x3a,0xe2,0xc7,0x90,0xe8,0x10,0x3a,0xbc,0x6c,0x31,0x6e,0xc6,0xf6,0xa8,0x6a,0x6,0x49,0xdc,0xa2,0x9b,0x3a,0x25,0x24,0x25,0xf5,0x8a,0x82,0xfe,0xc0,0xc0,0x80,0xed,0xf0,0xbc,0x67,0xa2,0x19,0x96,0x99,0x6,0x65,0x97,0x2c,0xc1,0xc2,0x22,0x99,0xb9,0x9f,0x4,0x77,0x30,0x34,0x5b,0x5c,0x6a,0x59,0x1c,0x78,0xe0,0xd2,0xf9,0xf4,0xa5,0x20,0x27,0xe5,0x8f,0x4e,0xa4,0x29,0xa3,0xdf,0xa5,0xab,0xcb,0x21,0x4f,0x91,0x4d,0x8a,0x99,0x28,0x38,0x3e,0x84,0x36,0xbb,0x3e,0x78,0x9e,0xa,0xf8,0x72,0xaf,0xe6,0x88,0x27,0x4,0x15,0xdd,0x1f,0x40,0x6f,0xec,0xb4,0x60,0x7b,0x0,0x8,0xb0,0x8c,0x8f,0xda,0x80,0x35,0x63,0x7d,0xf9,0x6e,0x96,0x6b,0x52,0x7b,0x87,0x3a,0x45,0x3e,0x85,0xa0,0xe5,0xfb,0xb3,0x1,0x2b,0x6d,0x42,0x42,0xbe,0x22,0xba,0x45,0x7a,0xcd,0xfa,0x97,0x10,0x53,0x74,0xcb,0xda,0xe5,0xac,0xc6,0xb8,0x74,0xc7,0x96,0x6e,0x68,0x39,0x90,0x56,0xc2,0xf0,0x30,0xac,0x74,0x93,0x35,0x25,0x4d,0x6c,0x5c,0x91,0x5,0x51,0x23,0xaf,0xef,0x69,0x95,0xfe,0x94,0x5e,0xdb,0x1b,0xa3,0x5b,0x2b,0xba,0x1f,0x10,0x7e,0x79,0x3d,0xd,0x10,0x10,0x86,0xc5,0xc2,0x47,0xb5,0xb0,0x8,0x92,0xc,0x2c,0xb2,0xea,0x56,0x33,0x2b,0x23,0x95,0x5b,0xb1,0x24,0x25,0xa1,0x80,0xec,0xaa,0x93,0xbf,0x79,0xa0,0x6c,0xe5,0x44,0x62,0x1f,0x83,0x3,0xea,0xbd,0xf0,0x0,0x56,0xe0,0x6e,0x42,0x18,0x5d,0x85,0xab,0x1,0xb8,0xe3,0x64,0x5b,0x8b,0x83,0x52,0x11,0x20,0xc0,0x35,0xe0,0x5,0x2a,0x7c,0x71,0xf2,0x8a,0x43,0x53,0xd6,0xd2,0x7c,0x62,0x5b,0xe1,0x74,0xf0,0xd3,0x97,0xe1,0x19,0x37,0x80,0x57,0xc4,0x12,0x88,0xc0,0x8e,0x60,0x49,0x25,0x52,0xa6,0xba,0xa8,0xa7,0x6b,0x48,0xf8,0x99,0x1d,0xd5,0xd,0xdc,0xff,0xd6,0xf4,0x8d,0x19,0x4d,0xa4,0x3f,0x6,0x0,0x2b,0xb5,0x81,0x43,0x2,0x18,0xc2,0x6f,0x95,0xdc,0x76,0x27,0x45,0x1c,0xff,0x2a,0x7e,0x1,0xbc,0x37,0x54,0x7d,0x20,0x6d,0x11,0x79,0x86,0x2c,0x3e,0x21,0xe5,0xbb,0x35,0x8f,0x69,0xb,0xec,0xd8,0xf8,0xea,0x31,0xd5,0xca,0xba,0x8,0xe0,0xeb,0x83,0xb1,0x7d,0x60,0x5e,0xca,0x2d,0xe1,0x16,0x8c,0x33,0xba,0xd5,0x2c,0x4a,0x8,0x5a,0x75,0xe8,0xa0,0x38,0x71,0x7,0xa8,0xd6,0xb2,0x93,0x57,0x64,0x25,0x75,0x71,0x82,0x20,0x3d,0x70,0xb,0x2,0x46,0x7c,0x51,0xbb,0xc9,0xa2,0xeb,0x98,0x1d,0x4e,0x8d,0xdb,0xb6,0x6,0x46,0xc0,0xa2,0x44,0xb2,0x2d,0x4,0x1e,0x35,0x15,0x5a,0x2e,0x54,0xc9,0x95,0x7e,0xe2,0x86,0x72,0x69,0xaa,0xc7,0xb1,0x84,0xd,0x5,0xca,0x9,0x23,0x17,0x69,0x49,0xf2,0x25,0x8f,0xe1,0xc6,0xa5,0x7d,0xf7,0x8e,0xad,0x75,0x68,0x35,0x7b,0xfa,0x41,0xe9,0x7f,0x1b,0x24,0x1a,0xb4,0x32,0x5e,0xea,0x5b,0x7e,0x72,0x77,0xb5,0x40,0x64,0x68,0x3e,0xef,0xb0,0xe2,0x27,0x89,0xaf,0x74,0x9d,0x73,0x67,0x7e,0x66,0x9e,0x2f,0xc8,0xa,0xb7,0x2e,0x6f,0x8d,0x99,0x32,0xf3,0x35,0xc8,0xee,0x1,0x5f,0x77,0xb6,0xeb,0x44,0x4,0xc6,0x2c,0x55,0xd5,0x60,0x30,0x15,0x85,0xf4,0x45,0x82,0xc5,0x2b,0xde,0x83,0xa3,0xc9,0xf4,0x20,0x63,0x66,0x5b,0xe7,0xfb,0xf8,0xa4,0xc1,0x1b,0x5d,0xa2,0xba,0x9a,0x27,0x86,0x23,0x72,0xb7,0x4e,0x20,0x7e,0x5,0xd8,0x6e,0x16,0x71,0xbc,0x6,0x59,0xb7,0x85,0xe3,0x6a,0x68,0x9a,0x8c,0xa4,0x56,0xfb,0xbd,0xae,0x21,0x81,0x73,0xe5,0x5e,0x69,0x9c,0xc8,0x7a,0x62,0x30,0xbd,0x3c,0xe0,0x61,0x41,0x7b,0xb6,0x7f,0x4,0xd6,0xa,0x45,0x90,0x0,0x7e,0xf1,0x45,0xad,0xb5,0xb0,0xa2,0x12,0xb1,0x24,0x7d,0xba,0xdf,0x91,0x8f,0x97,0x72,0x40,0x39,0xe6,0x4b,0xd9,0x6a,0xb9,0xb9,0x9a,0x24,0x90,0x1d,0x4,0xde,0x3f,0xc3,0x59,0x97,0x37,0xc8,0x4d,0x30,0x4e,0xb9,0x9e,0x74,0xd6,0xe7,0x7d,0x7,0x88,0x4a,0xc5,0x16,0x5d,0xa9,0x38,0x47,0x58,0xd,0xc3,0xee,0x48,0xec,0x9,0x6d,0x79,0xda,0xc,0xb1,0x15,0xf3,0x25,0x1f,0xc1,0x6d,0xba,0x20,0x68,0x84,0x35,0xca,0xf7,0x33,0xa0,0xc6,0x15,0xf3,0x5d,0x66,0xcb,0x5b,0xc,0xa9,0xeb,0xb2,0x77,0x4c,0xba,0xdc,0x4b,0xb9,0x4e,0xf2,0x97,0x3,0xa9,0x5c,0x38,0xc3,0x8e,0x2a,0xf5,0x8,0x88,0x10,0xe,0xc7,0x9d,0x10,0x8,0xf5,0x2f,0xf3,0x9d,0x4,0xac,0x68,0xe0,0x8c,0x75,0xe,0xea,0xcc,0x9e,0xea,0x10,0x97,0x20,0x94,0x95,0xa5,0xdf,0x27,0x6e,0x40,0x99,0xaa,0xde,0x50,0xf,0x63,0x51,0xd7,0x9a,0x1c,0x45,0x97,0x3a,0x6a,0x16,0x4c,0xdb,0xd4,0x22,0xb3,0xd6,0xe1,0x31,0xfb,0x9d,0x3,0xa6,0x4,0x3a,0xc6,0x2b,0xbf,0x88,0xd0,0x2b,0x4a,0xc0,0x90,0xa4,0x41,0x81,0x86,0x4e,0xfa,0xa6,0xe7,0x80,0xb1,0x9f,0x9d,0x88,0x4d,0x62,0x51,0x92,0xbe,0xcf,0x9d,0x43,0x6d,0x64,0x38,0x39,0xef,0x1d,0x7,0xc4,0xd5,0xbd,0x7a,0xf4,0xbb,0x9,0x48,0x81,0xde,0xc5,0x55,0x60,0x73,0x16,0x84,0xb3,0x84,0xca,0xaa,0x5a,0x16,0x26,0x9a,0xda,0x69,0x42,0x9f,0x86,0x14,0xd9,0xad,0xab,0x11,0x15,0xf,0x49,0x75,0xf2,0xa9,0x9e,0xbf,0xee,0x32,0x4a,0xe9,0xab,0x46,0x2,0x41,0x9f,0xc,0xd7,0x85,0x84,0xf2,0x69,0x58,0x4a,0x25,0xf0,0x4b,0x5e,0x2d,0xe7,0xa7,0x2e,0x2,0xf7,0x15,0xb9,0x90,0xc2,0xb7,0x3d,0x16,0x64,0x7b,0xf1,0x5e,0x0,0x95,0x7f,0x6a,0x22,0x4f,0x3a,0x2,0x27,0xa8,0x84,0xe2,0xa1,0xf9,0xb2,0x7f,0x1c,0xdd,0x64,0xc8,0xc4,0xc4,0x4f,0xc5,0x6e,0x9c,0xc2,0x2d,0xcb,0x94,0x3b,0x6d,0xa3,0xfb,0x95,0x9f,0x77,0x5,0x69,0xc,0xbc,0x71,0x7c,0x88,0xe8,0xeb,0x4c,0xb3,0x2b,0x31,0x2c,0x7b,0x98,0x6a,0xe6,0x66,0x49,0xbb,0x39,0x58,0xc0,0x6b,0xea,0x4a,0x42,0x41,0x42,0x83,0x62,0x74,0xe0,0xc4,0x31,0x55,0x2a,0x73,0x91,0xfe,0x83,0xb0,0x3b,0xc,0x84,0x45,0x19,0x41,0x57,0x8a,0x5a,0x1,0x1c,0x92,0xaf,0xf4,0x45,0xf8,0x35,0x81,0xb9,0x80,0x97,0xe2,0x9a,0x31,0xe9,0xc0,0xd2,0xd9,0x9b,0x49,0x88,0xf,0x71,0x4a,0x2e,0x17,0x49,0xb0,0x42,0x0,0x23,0x22,0x5b,0x5e,0xb2,0x35,0x10,0x57,0x53,0xb8,0xb0,0x41,0xe3,0x6f,0x25,0x47,0xe3,0x75,0x54,0xa7,0xfd,0x84,0x98,0x9d,0x9d,0x1a,0xd9,0xcb,0xe2,0x95,0x4a,0x49,0xad,0x39,0x4,0xb0,0x41,0x40,0x8e,0x5d,0x9,0xd9,0x74,0x46,0xfc,0xcd,0x9d,0x57,0x50,0xac,0x25,0x33,0x12,0xd,0xa8,0x58,0xf3,0x7b,0x7d,0x87,0x6b,0xee,0xdd,0xc8,0x90,0x1,0x14,0xb4,0x82,0x40,0x81,0xb7,0xd6,0x25,0x86,0xb8,0x2c,0x7f,0xa6,0xe9,0x4,0x60,0xdf,0xe5,0x44,0x53,0x83,0x5a,0x3b,0x8c,0x6f,0x53,0x9a,0x5c,0x88,0xf6,0xe3,0x55,0xab,0xd6,0xd1,0xf,0x35,0x95,0x45,0xc0,0x5d,0x6,0xa,0x91,0x47,0xd4,0x4,0x5b,0x48,0xf0,0x4f,0xa6,0x9c,0x75,0x25,0xe8,0xf9,0xaa,0x94,0xa2,0x7a,0x36,0xa4,0x95,0xee,0x78,0xce,0x60,0xdf,0x61,0x82,0x3c,0x76,0x7e,0xba,0x2c,0x91,0xfa,0x44,0x14,0x3a,0xc9,0x9e,0x2b,0xa9,0xe7,0x90,0x4d,0x1,0xc0,0xed,0x10,0x51,0xbf,0x83,0x74,0xf,0x2,0x39,0xb0,0x4c,0xd9,0x1b,0x47,0xac,0xad,0x5a,0xde,0xc,0xe,0x43,0xb5,0x6,0xa9,0xd5,0xa0,0x9d,0x63,0x58,0xee,0x98,0xd0,0xf4,0x6,0x48,0xfd,0x1a,0x37,0x93,0xf9,0x43,0xfa,0xa0,0xad,0xcc,0x80,0x36,0x13,0x3a,0x3c,0x90,0xbe,0x6,0x41,0x7,0x2,0x5d,0x88,0x23,0x54,0x6e,0xc7,0xfa,0xf1,0xc3,0xef,0x29,0x18,0x97,0xfc,0xb8,0x8,0x45,0xb9,0xfc,0x5d,0x75,0x19,0xe1,0x6f,0xba,0x16,0x3e,0xa5,0x48,0x20,0xd0,0xbc,0xa5,0xe,0x1f,0x36,0x1d,0x5d,0xf6,0xb8,0xd8,0x64,0x4e,0x6f,0xfc,0x7,0xb5,0xce,0xb4,0x4d,0x90,0x71,0xb4,0x30,0x51,0xe0,0xf8,0x47,0xab,0xcc,0x2a,0x4d,0x62,0x4b,0x91,0xe5,0x5f,0x9,0x2e,0x74,0xb,0xf5,0xa2,0x16,0x9f,0x65,0x3b,0x53,0x85,0xd2,0x8e,0xb4,0x36,0x80,0x87,0x37,0x85,0xa1,0x90,0xdf,0x46,0x3f,0x97,0xe5,0xea,0xe9,0x3b,0xb2,0xc4,0x63,0x5a,0xd0,0x1f,0x24,0xd7,0xc4,0x3f,0x6d,0xb2,0x6d,0xf1,0x2e,0x90,0x5a,0x13,0x72,0xa5,0x7c,0x4c,0xec,0xed,0x61,0xd3,0xca,0x81,0x4a,0x90,0x21,0xc3,0x56,0xb5,0x23,0x3,0x92,0xe8,0x4b,0xcb,0x4d,0xe3,0xc,0x35,0x32,0x5d,0xa0,0xc2,0xe6,0x81,0x8b,0x83,0xe1,0x3e,0x1d,0x8c,0x84,0xa5,0x69,0xa0,0xd0,0x81,0x8c,0xe3,0xaa,0xad,0x2f,0xed,0xda,0x5b,0x5c,0x50,0xeb,0xbc,0x25,0x83,0x98,0x26,0xd,0x85,0x68,0xcc,0x4a,0xd,0x29,0xf3,0x27,0x59,0xb0,0x6b,0xe,0xb1,0x6c,0xc8,0x9b,0x43,0x74,0xa0,0x5e,0x3b,0x22,0xce,0xed,0xd0,0xa7,0x80,0x9,0xc6,0x70,0x79,0xbe,0x8a,0xee,0xc6,0x16,0x84,0x3,0xb6,0xfa,0xa3,0xbe,0xf0,0xe3,0x11,0x50,0x49,0xce,0xb5,0xcc,0xf0,0x4c,0x11,0xfe,0xe9,0xc3,0x49,0x1a,0x3c,0x91,0xc0,0x31,0x66,0xe0,0xb,0xd2,0xca,0xa0,0x27,0x69,0xdb,0xc7,0x38,0x54,0x5a,0xae,0x44,0x81,0x8e,0x8b,0x44,0xd4,0x55,0xc2,0x4b,0x54,0xeb,0x98,0xa5,0xbe,0x19,0x34,0xd,0x93,0xfd,0x47,0x8f,0xf2,0xe8,0x54,0x7,0x95,0xd9,0xf2,0x5d,0xb,0xe1,0x44,0x74,0xe5,0xf3,0xe7,0xab,0xeb,0x4d,0x3b,0xd,0xdb,0xee,0x4b,0xc9,0x5e,0x6a,0x5c,0xd9,0x69,0x9e,0x1e,0xab,0x1b,0x3a,0x93,0xe4,0x4c,0xdd,0xe8,0xee,0x48,0x64,0x6a,0x62,0x20,0xd8,0x3e,0xae,0x3e,0xad,0x4e,0xee,0xff,0xf4,0x8a,0x59,0x98,0xd4,0x98,0xc8,0x6b,0xc8,0x42,0x47,0xb2,0x8,0x51,0x6,0x1c,0x28,0xcd,0xe7,0xe6,0x9b,0x6,0x77,0x1,0xb6,0x54,0xf6,0xc5,0x6c,0x8d,0x7f,0xa0,0xa,0x51,0xca,0x9d,0xe,0xc4,0xca,0x34,0xd2,0x1f,0x3b,0x81,0xfd,0xee,0xc1,0xb9,0xb9,0x60,0xa0,0x4c,0xec,0x4c,0xac,0xae,0xca,0xe,0xa2,0xf4,0x13,0x65,0x80,0xa0,0xf0,0xb,0x9f,0x55,0xb6,0xd0,0x63,0x6b,0xf6,0xe0,0xda,0xa2,0xaf,0x26,0x99,0x41,0xf6,0xe7,0x61,0x10,0x2f,0x52,0xe0,0xa3,0xd7,0xa5,0xb3,0x12,0x47,0xb1,0x40,0xcc,0xb8,0x66,0x1b,0x6d,0xe5,0x58,0xb7,0x27,0x90,0x7f,0x6f,0x43,0x8c,0x64,0xd1,0xd0,0x77,0x7a,0x19,0x15,0x1d,0x5c,0x4c,0x72,0xa7,0x9f,0xfa,0x62,0x9c,0x15,0xfb,0xfd,0x34,0xbe,0xbd,0x98,0x16,0xa3,0xc1,0xa6,0x53,0x19,0x91,0x5c,0x54,0xaa,0x18,0xef,0x4e,0x6,0x83,0xd9,0xbc,0x75,0x64,0xc2,0x44,0xb1,0xfa,0x2f,0x18,0x1b,0x9c,0xf8,0x9c,0x39,0x21,0x8a,0x68,0xaa,0x2f,0xac,0xe3,0x64,0xcb,0x9f,0xb2,0x6c,0x87,0xfb,0x87,0xa1,0xb3,0xf7,0x39,0xe5,0x99,0x3a,0x47,0x61,0x5a,0x43,0x11,0x3f,0x1f,0x8b,0x47,0x73,0xf4,0xc7,0x70,0xd3,0x29,0xd4,0x7c,0x42,0x3f,0x69,0x4d,0x27,0xe5,0x90,0x4b,0x3d,0xc3,0x4d,0x96,0x59,0x38,0xe2,0xc5,0xd3,0x20,0xab,0x31,0x89,0x19,0xea,0xba,0xbb,0xa7,0x38,0x2f,0x47,0x6b,0x36,0xd9,0xf2,0x99,0x24,0x22,0x24,0xed,0x57,0xc0,0xd8,0xc2,0xcb,0xb7,0x9f,0xd8,0xf,0xe8,0xaa,0x6c,0xda,0xeb,0x40,0x57,0xa,0x74,0x28,0xc,0xf4,0x26,0xe1,0x4,0x59,0x2a,0x50,0xf3,0x49,0xdb,0xe8,0xd6,0x10,0x8f,0xa5,0x5a,0xc7,0xfa,0x93,0x85,0xd9,0x83,0xad,0x1c,0x76,0xdd,0xe5,0x57,0xac,0xb0,0xb0,0x3,0xdc,0x8,0xf6,0x5b,0x88,0xc1,0x4c,0x3e,0x8c,0x7,0xdf,0xc9,0x56,0xc4,0xc3,0xc,0x32,0xba,0xb6,0xb3,0x76,0xf6,0x2,0xd4,0xaa,0x1b,0x5a,0x71,0x6c,0x9a,0x5c,0xe8,0xde,0xde,0x56,0xdc,0x4b,0x32,0x8f,0x22,0x3d,0xa,0x99,0x44,0xa9,0xf7,0xc9,0x7e,0x6,0xdc,0xe8,0x46,0x19,0x4f,0xe2,0x56,0x51,0xe3,0x2a,0x26,0x2e,0xb1,0x13,0x12,0x2c,0xac,0x93,0xe,0x0,0xb8,0x57,0x4f,0xf4,0x44,0x24,0x9,0x88,0x2d,0xc0,0x56,0xff,0x41,0xe5,0xd9,0x8a,0xa1,0xfc,0x9a,0xee,0xf6,0x46,0xb8,0x26,0xec,0x7,0x5e,0x1a,0x2f,0xd9,0x3f,0x93,0xba,0x3a,0x65,0x77,0xd8,0x87,0x16,0xbc,0x7d,0x17,0x3e,0xb5,0xc4,0xd5,0x76,0xfa,0x8c,0x58,0x6d,0xa0,0x40,0x24,0xef,0x96,0x58,0xe0,0x88,0x12,0x43,0x11,0x5a,0xe,0x5c,0xf8,0x5f,0x4f,0x4f,0x63,0xb,0x91,0xec,0xa0,0x78,0x33,0xa6,0xf6,0xf4,0x63,0x60,0xa1,0x7d,0xaa,0xe,0x5c,0x69,0x82,0xe5,0x6,0x9,0xe0,0x4e,0x4b,0x56,0x1e,0x2e,0x45,0xe7,0xfe,0x1,0xfd,0x69,0xa7,0x17,0x15,0xf5,0x71,0xf5,0x5d,0xa1,0x52,0x79,0x5f,0x45,0x6e,0xe7,0x19,0x1a,0x5e,0x46,0x9a,0xc9,0x1d,0xa,0x68,0xd5,0xe1,0xc1,0xc8,0x86,0xc6,0x35,0xa4,0x72,0xcb,0x63,0xc5,0x66,0x7a,0x90,0xbd,0x12,0xc,0x64,0x12,0xb6,0x41,0x32,0xaf,0xf8,0xf2,0x8d,0xca,0xd2,0x1a,0xaf,0xf4,0xd7,0x72,0xa7,0xea,0x35,0xa9,0x88,0x89,0x43,0xd6,0x9,0x9c,0xe2,0xe0,0xaf,0xbe,0x14,0x46,0x3c,0xb0,0xd4,0xd7,0xd9,0x92,0xc7,0xc8,0xc3,0x41,0x80,0xc7,0xcf,0x72,0x3c,0x9f,0x22,0x4f,0xf8,0x99,0xc,0x7a,0xdc,0x72,0xd8,0x92,0x67,0x40,0xee,0x22,0xc5,0xe2,0x42,0x88,0xaa,0x5b,0x2,0x5d,0x48,0x89,0x1e,0x19,0x65,0x86,0x5,0xb7,0xc8,0xea,0x25,0x49,0x5c,0xa0,0x76,0x2c,0x3e,0x94,0x2d,0x67,0xc2,0xf6,0xe1,0xb8,0x3d,0x45,0x4e,0xe5,0xf4,0xfe,0xf9,0xe1,0x8e,0x56,0x7e,0xcf,0xc5,0x7,0x3a,0x40,0x6,0x8c,0xf0,0x9c,0x25,0xc8,0xed,0x92,0x14,0x7f,0x14,0x18,0x42,0x34,0xb9,0xa6,0x2f,0xbb,0xf0,0xb,0x62,0x44,0xb9,0xb8,0x13,0x50,0x2d,0x9f,0xf5,0xc6,0x38,0xa1,0x35,0xd0,0xf4,0x8,0x82,0xe4,0x3f,0x3b,0xf8,0xfe,0x44,0x8f,0x91,0x99,0x7,0x3e,0x91,0xc5,0xf7,0x15,0xc7,0x9b,0xf7,0x2a,0xc2,0x1b,0xb6,0xc0,0x26,0xae,0x6e,0x1b,0x6f,0xca,0x67,0x4a,0x5,0xaa,0x38,0xdb,0x47,0xd4,0x78,0x48,0xb8,0xd8,0x97,0x12,0x47,0x99,0x67,0xa9,0x58,0xd5,0x93,0x10,0xa1,0x27,0x6c,0xef,0x5e,0xed,0xec,0x31,0x86,0x8a,0x15,0xe6,0x15,0xaf,0xf9,0x6e,0x4f,0x3f,0xb6,0x44,0x30,0x5d,0x45,0x10,0x1f,0x7b,0xc4,0x1a,0x76,0x20,0x47,0x37,0xc1,0xb,0xd1,0x2,0xc2,0xe9,0x80,0xf6,0x30,0xe,0xe3,0x57,0x6d,0xdc,0x2c,0xfc,0x62,0xc,0x2a,0xe4,0x9f,0x4a,0xe0,0x37,0x15,0x23,0x2a,0xca,0x62,0x26,0xa2,0x48,0x1,0x2c,0x5a,0xc9,0x68,0xd8,0xde,0x90,0xee,0xae,0x6e,0xe5,0x82,0xe9,0xd5,0xa8,0xaa,0x53,0x37,0x6,0xdf,0x10,0x89,0xe3,0xb7,0xea,0x5c,0xb9,0xe5,0x4e,0x25,0x87,0xdd,0xc1,0xd0,0x8e,0xfb,0x45,0xb4,0xc7,0x7,0xac,0x0,0xba,0x26,0xe2,0xd8,0x4d,0x2f,0x5e,0x53,0x6a,0xd9,0xe6,0x88,0x2c,0xe9,0x6b,0xe,0xc6,0x6d,0xfb,0x8a,0xcf,0x6c,0x26,0x12,0xa2,0x82,0x8b,0x5a,0xaa,0x6,0xf,0xda,0x2b,0xb8,0x17,0x66,0x6a,0x49,0x23,0x3c,0x57,0xb4,0xcf,0x1f,0x36,0x9d,0x37,0x8,0x10,0xc0,0xa0,0x83,0xcc,0x75,0x8c,0x62,0xe6,0x90,0x71,0x92,0x62,0x22,0x45,0xbf,0xfc,0xf8,0xe6,0xd7,0x53,0xd5,0xf3,0x67,0xae,0xa8,0x46,0x85,0xf2,0xcc,0x39,0xa,0x8c,0x95,0xc2,0x92,0x90,0x36,0xc4,0xfe,0xed,0x6d,0xfa,0xf6,0x6b,0x2f,0xf5,0xf,0x19,0x83,0x35,0x1b,0x12,0x5c,0x95,0x58,0x73,0xb,0x25,0xef,0x9,0xec,0x87,0xc1,0x70,0x46,0x16,0x75,0xd1,0xb1,0xf5,0x83,0xb1,0xb7,0xa6,0x33,0x47,0xab,0x4f,0x7,0x2d,0xd,0xb8,0x57,0xee,0xff,0xf9,0xe6,0x53,0xb9,0xcf,0x25,0x8,0xf1,0xa7,0x5a,0x0,0x3,0xd9,0x33,0x7e,0x1a,0x5f,0xb7,0xd7,0x94,0x56,0xfb,0x44,0x38,0x80,0x84,0x1c,0xf6,0x91,0x5b,0xee,0x54,0x46,0x7a,0x25,0x82,0x3c,0x59,0xb4,0xac,0xd6,0xab,0x42,0x2a,0x67,0x6c,0x6,0xeb,0x24,0x2f,0xa3,0x2c,0x19,0x92,0x9d,0xab,0xcc,0xb3,0xf4,0xf8,0x3,0xe,0x47,0x95,0x8c,0x9e,0xa6,0xb3,0x1,0xcf,0x1d,0x74,0xd0,0xfa,0xb0,0x58,0xc8,0xe3,0x50,0x6c,0x98,0xc4,0x61,0x73,0x3b,0x66,0xb1,0x78,0x74,0x52,0xf,0xf2,0x7a,0x74,0xba,0xee,0xc2,0xe8,0xd1,0x85,0x29,0xf9,0x9e,0x70,0x4f,0xee,0xbf,0x14,0xb8,0xfd,0x63,0x9a,0xe,0xd0,0xc6,0x67,0x51,0x1d,0x2b,0x1b,0x9e,0x3e,0x0,0x58,0xa2,0xf8,0x8c,0x8a,0xd5,0x8b,0x95,0x50,0x90,0x2d,0x98,0x92,0x6a,0x2f,0x91,0x5e,0x9,0xe7,0x54,0xfb,0xc7,0x1c,0xec,0xcc,0x90,0x76,0xd2,0xe5,0xcf,0xa,0x55,0xf,0xe2,0x76,0x63,0x68,0x95,0x12,0xf2,0x75,0x9d,0xed,0xef,0xf5,0xa3,0x6d,0x34,0x67,0xed,0xd4,0xc9,0x58,0xf6,0x74,0x58,0xe2,0x10,0xd7,0x52,0xb4,0xc7,0xc9,0x87,0x9e,0xd4,0xe,0x3b,0xdb,0xb3,0x6a,0x38,0xb,0xbf,0x55,0x2d,0xa4,0xa4,0xa7,0xfa,0xc3,0xfb,0x66,0xb6,0x8,0xf6,0x63,0x74,0x6c,0x3c,0x74,0x20,0x3e,0xbc,0x4,0x87,0xd2,0x95,0x38,0xe8,0x51,0x9f,0xd2,0xbf,0x96,0xb7,0xc3,0x25,0x1a,0xf8,0x7d,0xd2,0x4a,0x19,0x44,0xb1,0x6d,0xb0,0x90,0x49,0xf5,0xb5,0xf2,0x46,0xc2,0x54,0xf,0x3,0x2d,0x1d,0xd3,0x6e,0x56,0x9d,0xfa,0xf7,0x69,0xa3,0x28,0xc,0x7b,0xdf,0x1,0x70,0xa9,0x4d,0xf4,0x97,0xe6,0x2d,0xba,0x54,0xc3,0xe6,0x74,0x6a,0xd1,0x78,0xba,0xeb,0x5d,0xe3,0x3c,0x3a,0xd5,0x11,0xef,0xb5,0xbe,0x43,0x45,0x41,0xe4,0x41,0x18,0xab,0xd7,0xf7,0xeb,0xad,0x63,0x24,0x6f,0xaf,0xc6,0xbc,0xb5,0x62,0xf6,0x5d,0xce,0x65,0x37,0xed,0xcf,0x7b,0x24,0x11,0x5b,0x41,0x57,0x6f,0x11,0x3d,0x84,0x69,0x94,0xe8,0x47,0x1c,0x98,0x79,0xdd,0x9a,0xd9,0x93,0xa2,0xb4,0xa7,0x52,0xec,0xa9,0x31,0x15,0x8e,0x7f,0xca,0xf2,0xa1,0xd0,0xf5,0x69,0x63,0x83,0xa5,0x81,0x70,0x93,0x93,0xda,0x3a,0xd0,0x8c,0x7a,0x59,0x87,0x30,0x3e,0x27,0x73,0x58,0xc9,0x74,0xcc,0xbc,0xae,0x89,0xbe,0xc0,0x53,0xf1,0x58,0x1e,0xfa,0xf6,0x59,0xfd,0x63,0xba,0xa3,0x7a,0x2c,0x6,0xb1,0xa5,0xac,0xb4,0xe3,0xc6,0x1,0xb4,0x85,0xbf,0xc6,0xc6,0x24,0x97,0xc,0xff,0x3f,0xa,0xb3,0xe0,0xf0,0x79,0xbf,0x7f,0x6a,0x7f,0x4f,0x92,0x6d,0xe5,0xa9,0x2d,0x2,0x6c,0x74,0xd7,0x1e,0x8,0x99,0xbd,0x72,0x8b,0xb3,0x63,0x98,0x55,0xe4,0xdf,0x37,0x8c,0x9,0xc,0x6b,0x7c,0xbd,0xee,0x2c,0x58,0x15,0x42,0x4d,0x27,0x20,0x22,0x5b,0x53,0x10,0x12,0xc7,0x3e,0xb5,0x95,0xa7,0xc8,0x0,0x35,0x5d,0x0,0x2b,0x8f,0x21,0x3f,0x42,0x57,0x8c,0xeb,0x53,0xa1,0x39,0x39,0x8,0x9e,0xbb,0xa2,0x66,0x59,0x3,0x68,0x11,0x2,0x68,0xac,0xb,0x21,0x93,0x5f,0xa3,0x7b,0xfb,0x8b,0x26,0xe9,0x57,0xd1,0x1d,0xa6,0x9,0x61,0xe9,0xad,0xde,0x12,0xc5,0x3a,0xcd,0xb8,0xfd,0xab,0x2d,0x3a,0xe4,0xa4,0x61,0xad,0xb7,0x2a,0xc7,0x3b,0xf0,0x3c,0xa7,0xa4,0xc0,0x0,0xfb,0xeb,0x97,0x22,0x14,0x47,0x83,0x57,0x3c,0x5b,0x7f,0xd7,0x6d,0xe8,0xb0,0xb4,0xbe,0x98,0x2a,0x99,0xb7,0x26,0xe7,0x98,0xc,0x4,0x2,0xb6,0xb2,0x4e,0x31,0xd8,0x13,0xba,0xba,0x2b,0xcc,0xa6,0xae,0x33,0x4f,0x3,0x76,0xa3,0xd2,0x36,0x7f,0x32,0xc1,0x0,0xb,0x6c,0x8e,0x7e,0x81,0xa6,0xe0,0x30,0x25,0x1f,0xa6,0x77,0x60,0x3e,0xcd,0x72,0x9,0x46,0x2,0x58,0x44,0xb7,0xad,0xe1,0x78,0xdb,0xef,0xfc,0xb6,0x45,0x81,0x91,0x4e,0xa6,0xf0,0x1e,0x92,0xca,0x5b,0x86,0x3a,0xa,0x2,0xaa,0x18,0xc1,0xfe,0xa8,0x6b,0x13,0x12,0x6d,0xde,0x2,0xdf,0xbc,0x80,0x6f,0x45,0xac,0xff,0x66,0x2,0x1a,0x4c,0xaa,0xfc,0x8a,0x4b,0x86,0x9c,0x8,0xd8,0xc3,0x84,0x55,0x8c,0xd5,0xe4,0xa2,0x13,0x31,0xa2,0x16,0x26,0xaf,0xb6,0x49,0x94,0xc9,0x18,0x98,0xb,0x11,0xed,0xb9,0x25,0xd,0x1b,0x78,0xf7,0x74,0x0,0xe3,0xcd,0xae,0x34,0xb1,0x8c,0x9d,0x21,0xa,0x30,0x67,0x3a,0x76,0x9f,0x73,0xc3,0x71,0x6b,0x5e,0x3b,0xcf,0xc9,0x1d,0x9,0x9,0xbb,0x79,0xa2,0xa1,0x3d,0x4a,0x3c,0x3d,0x2f,0xc7,0xe3,0x52,0x90,0x5,0x96,0x2,0xf1,0xd2,0xfb,0x8a,0xc3,0x7b,0x83,0xf9,0xdb,0x5b,0x75,0x58,0xa6,0x84,0x3d,0xed,0xcc,0x1d,0xc0,0x18,0xcc,0x2b,0xa2,0x9c,0x8f,0x81,0x24,0x4,0xf9,0xbb,0x2d,0x3d,0x11,0xee,0x67,0x1f,0xef,0xf6,0x6d,0xea,0x66,0xb0,0xf4,0xc8,0x1e,0x2e,0x40,0x3b,0xd7,0x7a,0x40,0x3b,0x24,0xd5,0x60,0xdb,0xc3,0x8b,0xe,0x3c,0xfe,0x1,0xbe,0x4c,0x24,0x5e,0x1,0x40,0x34,0xa2,0x86,0x93,0xa7,0x7f,0x3,0xa6,0xc4,0x2,0xe7,0xc4,0xe6,0x63,0x6b,0x96,0x76,0xe3,0x3a,0xe1,0x7a,0x90,0x38,0x70,0x93,0x28,0x97,0x96,0xc,0x7a,0xfb,0xd3,0xfd,0xe2,0x1d,0x2d,0x50,0xe0,0x5d,0x3e,0x42,0x56,0xff,0x35,0x6c,0x7b,0x35,0x41,0x5a,0xab,0x94,0xe6,0x68,0xbf,0x6a,0x6c,0x22,0xe4,0xff,0xe7,0x1e,0x80,0x30,0x74,0xf1,0x5b,0xb9,0xce,0xa5,0xca,0x3,0x50,0xcb,0xf0,0x65,0xcf,0x9c,0xe7,0xe6,0x2e,0xe8,0x1d,0xd1,0x6d,0xcf,0x84,0x62,0xd4,0x31,0xf0,0xa9,0x9d,0x28,0xbf,0x5b,0xdc,0x21,0x7a,0x9d,0x40,0x18,0xff,0xb3,0x62,0xbc,0x46,0x23,0xf5,0x9d,0xc1,0x9c,0x79,0x7b,0xc5,0xa9,0xd5,0xd0,0x60,0xdd,0x99,0xcb,0x4b,0xfe,0xf3,0xaa,0xd,0x67,0xce,0xaa,0xae,0xd4,0xd3,0x27,0x58,0xee,0xef,0x19,0x26,0xce,0x8e,0xb7,0x86,0xfe,0x3f,0x8b,0x37,0x17,0x3b,0xe6,0xdc,0x20,0x83,0x73,0x43,0xac,0xb0,0x9d,0xeb,0x4d,0x95,0xf1,0xce,0x7a,0x2f,0x4,0xc2,0x17,0x66,0xa1,0xbd,0x4b,0x37,0xb0,0xd2,0x36,0xd5,0x6e,0x6,0x92,0x11,0x71,0x36,0xda,0xfc,0xa2,0x98,0xfb,0xa8,0x37,0x1d,0xf2,0xa9,0x74,0x28,0x8e,0x25,0xf9,0xa1,0x99,0xc9,0xef,0xe9,0x6a,0x60,0xcf,0x96,0xe4,0x78,0x74,0x6e,0x86,0xbf,0x2c,0x9d,0xb5,0x77,0x99,0x61,0x45,0xcc,0x7e,0xee,0xc2,0x3c,0x62,0x27,0xcd,0x81,0xe9,0x44,0x93,0x31,0x29,0xe,0x75,0x53,0xea,0x1f,0x74,0x76,0xda,0x8b,0x14,0xe1,0xbb,0x7e,0xcc,0xb5,0x1e,0xd4,0x48,0xeb,0xb8,0x1,0x3f,0x8c,0x75,0xb7,0x75,0xd8,0x4,0xfb,0x7b,0x80,0x65,0x2,0x84,0xd3,0x95,0x7,0xa2,0x6e,0x1d,0xa2,0x67,0x5a,0x62,0x2c,0x7,0xdc,0x20,0x6,0x36,0xb5,0x85,0xb8,0x73,0xb7,0x58,0x6f,0xa8,0x1a,0xd,0xd,0x98,0x70,0xea,0x3f,0xbc,0x58,0xa,0x1d,0xcc,0xa9,0xcc,0xdd,0x8a,0x7f,0x76,0xaf,0x62,0xdf,0x12,0xf1,0xda,0x6b,0xe1,0xb7,0x9f,0xee,0x7c,0x1f,0x81,0x29,0x8a,0x72,0xa7,0xa5,0x81,0x92,0x5a,0x96,0xee,0x81,0xad,0x7a,0xd9,0xf6,0xcf,0x7f,0xed,0x54,0xbf,0x28,0x8a,0x62,0x76,0x26,0x6f,0x50,0x7f,0xc5,0xa8,0x29,0x9a,0xd2,0x33,0x55,0x8,0x4e,0x32,0x5,0xa7,0x1b,0xf2,0xce,0xdc,0x8e,0x4b,0x2c,0xb8,0x76,0x6d,0x44,0x77,0x0,0x83,0xd2,0xca,0x20,0xfd,0xc7,0x41,0xa4,0x32,0xa2,0x15,0x16,0xc4,0x71,0x67,0x27,0x74,0x30,0xd9,0xe9,0xce,0x48,0xda,0x39,0x6d,0x70,0x16,0x1d,0x1d,0xd6,0x36,0x7c,0x17,0x6c,0xc8,0x66,0x62,0x42,0x3e,0xe2,0x68,0xbd,0xbb,0xeb,0x1d,0xc8,0x3c,0x95,0x3b,0xc4,0xcb,0xe9,0xc8,0x4,0x5b,0x65,0x1c,0x11,0xc7,0xe5,0x49,0x19,0xeb,0x9,0x54,0x28,0x56,0x1c,0x8,0xca,0xdc,0x1b,0x84,0x4c,0xcb,0x27,0x6a,0x70,0x42,0x67,0x8a,0xe3,0xd3,0x63,0xe0,0x90,0x7b,0x88,0x3e,0x10,0x56,0x44,0xb9,0xeb,0xa6,0xf3,0xa0,0xcc,0x73,0x56,0xbe,0x16,0xea,0x33,0xb3,0x79,0x1b,0xce,0xa5,0x3e,0xf9,0x94,0x73,0x49,0x81,0x46,0xcf,0x2e,0xf8,0x94,0xd2,0xf3,0xc4,0x46,0xd8,0x71,0x0,0xdf,0x6d,0x9b,0x7d,0x50,0x83,0xf7,0xd1,0x45,0x7b,0xe9,0xa8,0x5c,0x6e,0xdf,0x6f,0x71,0x97,0x65,0x95,0x59,0xaf,0x2a,0x88,0xfb,0x11,0x67,0xb4,0x2b,0x20,0x61,0x52,0x88,0x3,0x93,0x58,0xd2,0x64,0xe2,0x76,0x52,0x28,0xdd,0xd9,0xf4,0x14,0x3f,0x13,0x61,0xb8,0xfc,0x21,0x73,0xe9,0xb6,0x7b,0x7f,0x51,0xe3,0xe,0xc1,0x55,0xa0,0xb6,0xb5,0xc9,0x1c,0xe7,0xb3,0x63,0x34,0xcd,0x53,0x81,0x38,0xb7,0xe1,0xd4,0x9d,0xdf,0xd8,0xf2,0x2f,0x8,0x53,0x6b,0xd6,0xb,0xbd,0x69,0x5,0xb3,0x3d,0x4c,0xd1,0x60,0xcb,0xd0,0x7b,0x71,0x8f,0x9d,0x9,0xe,0xc8,0x74,0xd,0x2e,0x7f,0xb,0x40,0xe8,0x5c,0x67,0xad,0xe6,0xb4,0xab,0xbf,0xa,0xbc,0x35,0x1d,0x81,0x43,0xce,0x6b,0xc,0x90,0xf8,0x4a,0x35,0xe8,0x3f,0x27,0xc9,0x10,0xd2,0x96,0x56,0x3d,0x68,0xa9,0x67,0x9c,0x37,0xee,0x1f,0x6d,0x22,0x1f,0x7d,0x8a,0xc9,0x5c,0x6e,0x78,0xcc,0xd9,0xee,0x30,0x3d,0x42,0x57,0x12,0xad,0x88,0xd2,0x11,0xc5,0xf1,0x14,0xbe,0x5d,0x58,0xb6,0xdd,0xec,0xfd,0xcf,0xdc,0xa1,0x24,0x87,0xf4,0x24,0xa2,0xf4,0x16,0xe1,0x70,0x92,0x2f,0xb4,0x16,0x28,0x47,0x95,0xac,0x27,0x53,0xfa,0x9a,0x63,0x68,0x8d,0x1d,0x8e,0x5,0xeb,0xe5,0x32,0xab,0xd2,0x8a,0x19,0x63,0x8a,0x7,0x4d,0x5e,0x1e,0xd4,0x48,0x50,0x8c,0x15,0x41,0xde,0x96,0x30,0x16,0x9c,0xd,0x75,0xc,0x1e,0x2d,0xea,0xef,0xba,0xb4,0xae,0x9e,0x89,0x2e,0x67,0x5f,0xc3,0x2b,0x5d,0x67,0x47,0xeb,0x64,0xc8,0x7f,0x2d,0xfa,0xb5,0x54,0x62,0xd5,0x51,0x3f,0xf0,0x6c,0xd8,0xf1,0x4f,0xf,0x4b,0xe7,0x33,0x55,0x25,0x91,0x99,0x46,0x83,0xee,0xb9,0x79,0x50,0x2b,0x1d,0x61,0x59,0x9,0x36,0x34,0x16,0xcf,0x4c,0x8e,0x86,0x56,0x5e,0x79,0x25,0x3b,0xd,0x9e,0x69,0x12,0xbb,0x4c,0x94,0x6,0x46,0x7f,0x25,0x9b,0x2e,0xa,0x71,0x27,0x38,0x19,0x13,0xea,0x5c,0x4b,0x47,0x6,0x48,0x12,0xc3,0xc8,0x16,0x56,0xcc,0x99,0x54,0xaf,0xd2,0x14,0xe2,0x63,0x36,0xbc,0x2c,0x66,0x16,0x51,0x18,0xa7,0x2b,0x4e,0xd6,0xdf,0xc5,0x31,0x7d,0x69,0xc7,0x6c,0xff,0xda,0x1,0x21,0x4e,0xad,0xc1,0xfa,0x83,0xeb,0x9a,0x72,0xd6,0x4f,0x7b,0x91,0xfd,0xdd,0xa5,0x49,0xad,0x7b,0xcb,0x3a,0xe5,0x30,0xe8,0x87,0x68,0x89,0xbc,0xb5,0xa7,0xd3,0x60,0xef,0x3a,0xf9,0xe1,0xf6,0xd1,0xc2,0xdf,0x68,0x1a,0x30,0x4d,0xd3,0x11,0xeb,0x94,0xd4,0x7c,0xe,0x6d,0x7f,0xcc,0x61,0x84,0xe4,0x70,0xc9,0xb9,0x19,0xbd,0xf,0xa1,0x5b,0xe7,0xc9,0x3b,0xe6,0x53,0xd5,0x17,0x5,0x21,0x5d,0x38,0x9,0x8a,0x49,0x8,0x60,0x6,0x7,0xeb,0x5,0x46,0x4b,0x68,0xe0,0x3a,0x86,0x8b,0xf1,0x95,0x42,0x86,0x1c,0x4d,0x21,0xc8,0x24,0xcb,0xd0,0xa,0xf2,0x10,0x9f,0xdb,0xb6,0x12,0x39,0x95,0xf4,0xde,0x4c,0x4e,0x1c,0xdb,0x39,0xa6,0xf7,0x9e,0x2c,0x92,0xe6,0xb8,0xdc,0x90,0x24,0xeb,0xe1,0xbb,0x68,0xce,0x4e,0xb4,0x41,0xec,0x60,0x6e,0xec,0x81,0xc1,0xb1,0x10,0xbf,0x44,0x85,0x14,0xd,0xe8,0x1e,0xd5,0x19,0x3e,0x21,0x6,0xbc,0xce,0x67,0x91,0xdf,0x8f,0x21,0x83,0x29,0xbf,0xd7,0x30,0xa3,0x94,0x2f,0x31,0x85,0x28,0x44,0x9,0x1d,0x23,0x6d,0x70,0xf5,0xb6,0x1c,0x5d,0x7e,0xda,0x61,0xa1,0x49,0x29,0xab,0x8a,0xdc,0xfc,0x25,0x7d,0x49,0xa9,0xa6,0xfe,0xc6,0x1e,0xa6,0xa,0xfd,0xa3,0xba,0xaf,0xd1,0x73,0xa3,0xc6,0x88,0x60,0xf4,0x13,0xd1,0x3c,0x33,0xfd,0x95,0x35,0x1c,0xd0,0x93,0xa8,0xb,0x9d,0x1c,0xb1,0xde,0xf1,0xfe,0x30,0x83,0xc8,0x7d,0x41,0x1f,0x3f,0x83,0xfa,0x76,0xdc,0xd9,0x70,0x56,0xa8,0xd,0xa6,0x9d,0x80,0x7e,0xee,0x68,0xe1,0x84,0x8a,0x5,0x7b,0x88,0xfe,0x2e,0x3f,0x11,0xda,0xc3,0x68,0x7d,0x51,0xa9,0x1c,0x63,0xe9,0xf3,0xd2,0xa1,0xd7,0x35,0x18,0xf3,0x7c,0xb0,0x90,0xbe,0x2b,0x99,0x2f,0xc8,0xd,0xaa,0x8c,0x15,0xe1,0x57,0x79,0xa1,0x83,0xa4,0xe7,0xf2,0xd8,0xff,0x2a,0xae,0x61,0xf1,0x22,0x82,0x57,0xf1,0xe,0xba,0x80,0x80,0x56,0x10,0xd1,0xd4,0xe9,0xc,0xc1,0xac,0xad,0x4e,0xa5,0xec,0x2f,0xa,0xa1,0x98,0x64,0x72,0x1d,0x46,0xc8,0xf8,0x26,0x27,0x91,0xba,0xbf,0x12,0x9f,0xb6,0xe2,0xa3,0x80,0xda,0x4d,0x6,0xc9,0x82,0xea,0xc7,0x84,0x7c,0x2c,0xd8,0x2d,0x39,0xa2,0x4a,0xa5,0xca,0x91,0xb4,0xc9,0x4b,0xac,0xf9,0xa6,0x2a,0xa9,0xd,0xd4,0x3e,0xa7,0x91,0xaf,0x4d,0xf8,0xcb,0x0,0xa7,0x2a,0xfc,0xe8,0x14,0x5e,0xdc,0x25,0xf,0x53,0xd9,0x5e,0xf3,0x7d,0x64,0x62,0xd1,0x58,0x83,0xd0,0x8b,0xf1,0x24,0x8c,0xff,0xb,0xb0,0x5c,0xf,0xe7,0xd8,0xb5,0x13,0x85,0xf0,0xed,0xad,0xa1,0xc3,0x1c,0x56,0x36,0xa7,0x68,0xd8,0x52,0xe6,0xde,0x4f,0xbf,0x27,0xc4,0x80,0x9d,0x63,0xd5,0x35,0x49,0x10,0x4f,0xab,0x83,0x64,0x1d,0xe4,0x5a,0x2b,0x3a,0xd8,0x55,0x6b,0x90,0xd5,0xca,0xb4,0x52,0x52,0x4f,0x1e,0x6b,0xe8,0x58,0xfa,0x22,0x6f,0x6f,0x3d,0x75,0xc3,0xb1,0xc6,0x6e,0x30,0xb8,0xac,0x63,0x4,0x7e,0x55,0x7,0x3c,0xb7,0x65,0x4e,0xf6,0x1a,0xe5,0xf9,0x86,0xae,0xff,0x19,0x87,0x76,0xf,0x1f,0xc6,0xc6,0x1c,0x33,0xe7,0x9b,0xcd,0x9a,0xde,0xea,0x6b,0x51,0xf3,0x2b,0x2a,0xff,0xb1,0x91,0x44,0x9b,0x14,0xcc,0xb4,0x50,0x29,0xc,0x1,0x4,0x7,0x30,0xd7,0x91,0x8c,0x69,0x93,0xca,0x47,0x1b,0x30,0xf,0xc0,0x0,0xa6,0x8b,0xdd,0x3,0x3f,0x61,0x92,0xc,0x7a,0xf5,0xe3,0xc2,0x41,0x26,0xe4,0x30,0x8a,0xa1,0x91,0x37,0xcd,0x37,0x63,0x8d,0xbd,0xea,0x97,0xa4,0x40,0xc,0xce,0x2a,0xaa,0x5f,0x43,0x30,0x94,0x5,0x7b,0x71,0x6d,0x77,0x39,0x10,0x3b,0x6c,0x74,0x3d,0x9,0xa6,0x4a,0xc7,0xd1,0x4d,0xcd,0xe5,0x9a,0x5d,0xcc,0x3f,0x4,0x5c,0x9,0xb4,0xfa,0xe3,0xaa,0x37,0xd0,0x75,0x41,0xdb,0x2f,0x1b,0x7a,0xc9,0xca,0x11,0x59,0x40,0xab,0xb0,0xee,0x87,0xb,0x3a,0x25,0x1,0xbe,0x4b,0x0,0x1b,0x9a,0x65,0x4c,0xba,0x6c,0x97,0x31,0x79,0x62,0x47,0x4d,0x3,0xe6,0x46,0x4d,0x87,0x5a,0xfa,0x1c,0x5f,0x57,0x1,0xcb,0x7f,0x80,0x6b,0x2a,0x62,0xe9,0x7b,0x1e,0x94,0xec,0x2e,0x19,0x30,0x44,0xb0,0x31,0x5b,0x8b,0xef,0xf6,0x65,0xec,0x85,0x80,0x1d,0x2f,0xd9,0x49,0xf,0x5b,0xa1,0x7a,0xb6,0x7a,0x85,0x8a,0xb7,0xd6,0x1a,0x1f,0x66,0x81,0xb3,0x9,0xa1,0x31,0x46,0x1,0x7c,0xdb,0xbb,0x3f,0x8b,0x72,0x4,0xf7,0xd4,0x61,0x3f,0xcc,0x64,0xf3,0x58,0x53,0x34,0x76,0xff,0xf5,0x76,0x31,0xcf,0x52,0xbb,0x36,0x74,0x8e,0x5c,0x27,0xfd,0x3d,0xdb,0xe2,0xc6,0x94,0xbc,0x2a,0xa8,0x52,0x6b,0x40,0xd7,0x9d,0xeb,0x3f,0x12,0xbf,0xb0,0x74,0x4b,0x62,0x77,0x7e,0xf0,0xa1,0xbb,0x44,0x8d,0x9a,0x9e,0xf0,0x56,0x2c,0xb4,0xe1,0x0,0xb7,0x28,0x8,0x52,0x46,0xed,0xca,0x17,0xf5,0xa1,0xb0,0x85,0xb,0xe6,0x7e,0xd7,0x80,0x6e,0xfa,0x19,0x15,0xc0,0x9b,0x62,0x34,0x11,0x83,0x92,0x5d,0x8a,0x2b,0x48,0x66,0x74,0xe8,0xf8,0x3f,0x2a,0x59,0x5a,0x10,0x25,0x9,0xe2,0x7c,0x3a,0x26,0xcf,0x15,0x65,0x48,0x7d,0xde,0x6c,0x30,0xf7,0x8a,0x5b,0xa4,0xb2,0x2c,0xc7,0xd7,0x84,0x95,0x65,0x25,0x79,0xd3,0x7a,0x85,0x12,0x4c,0xbc,0xd0,0x45,0x2,0x71,0xb9,0x26,0xad,0xb8,0x66,0xaf,0x51,0xd1,0x6f,0xce,0xe9,0xb8,0x7a,0xda,0xa8,0xcb,0x74,0xf,0xa9,0xa0,0xb,0x56,0xff,0xa3,0xc,0xb1,0x78,0x80,0xc5,0xbc,0x34,0x84,0x31,0xf0,0xc2,0x40,0xfe,0xea,0x75,0x86,0x9c,0x94,0xcf,0xee,0xda,0x70,0xf8,0x29,0x8d,0x81,0xc7,0xc,0x90,0x37,0x9f,0xd5,0x3,0x8d,0xe4,0xd5,0x35,0xef,0x1e,0x11,0xb,0x99,0x7e,0x52,0xa1,0x21,0xca,0x71,0x26,0x84,0xcd,0xcc,0x44,0x4e,0xec,0x7f,0x2c,0x7d,0xe6,0x24,0x55,0x6a,0x16,0xe5,0xaa,0x98,0xe0,0x44,0xc5,0x28,0xfe,0x16,0xe0,0x37,0x28,0x4a,0x4,0x41,0xbb,0xa5,0x6,0x7f,0x66,0x8d,0x52,0x5,0xb8,0x60,0x5b,0x75,0x9f,0xc7,0x9d,0x6f,0x51,0xa4,0x1d,0x30,0x26,0x50,0x61,0x8,0x7c,0xec,0x79,0x30,0x39,0xb2,0xe9,0xd9,0xf3,0x99,0x69,0xd0,0xa2,0xab,0x54,0x11,0xb6,0x14,0x16,0xf7,0x58,0xdb,0x6e,0x40,0x96,0x90,0xc8,0x49,0x73,0xe,0xb7,0x89,0xc0,0x85,0x42,0x79,0x47,0x9a,0xdb,0x7a,0x54,0x3d,0x10,0x7,0xf4,0xf0,0x25,0x97,0x6b,0x23,0xc6,0xc0,0x45,0xa2,0xac,0x38,0xb2,0xdc,0x99,0xd2,0xdc,0xe0,0xc0,0x2,0xc,0xfb,0x47,0x94,0xdd,0x62,0x3a,0x1f,0x83,0x68,0x78,0xd2,0xd9,0x36,0xa8,0xca,0xf7,0x1b,0x7f,0xd3,0x48,0xd2,0x3d,0x16,0xc5,0x41,0xe2,0xe7,0xde,0x17,0xb9,0x31,0xf3,0x22,0x9c,0xd4,0x3f,0xf2,0xca,0xde,0x1c,0x79,0x2a,0xb0,0x25,0x2c,0x5c,0x8e,0xfc,0xb8,0xb7,0x91,0x78,0x92,0xc9,0xff,0x2c,0xb,0xb5,0x3f,0xf0,0x20,0xd6,0x20,0xad,0x9,0xe0,0xe4,0x78,0xe8,0x43,0xbd,0xe4,0x3b,0x16,0x6d,0x92,0x48,0xe8,0xf,0x98,0x99,0x9b,0x4b,0xf0,0x3f,0x69,0x67,0x3e,0x7b,0x12,0x21,0xfa,0x8b,0x63,0xff,0xad,0x46,0x40,0x2,0xcc,0xec,0x5f,0x31,0xa4,0xb4,0x16,0x85,0xcb,0x7a,0x92,0x67,0xf5,0xda,0xa2,0xb9,0x31,0x23,0xaf,0xf1,0x8a,0xd6,0x72,0x65,0xc9,0x34,0x62,0x15,0x6c,0x94,0x1b,0x8b,0x94,0xec,0xd8,0x8c,0xf3,0xde,0x10,0xfe,0xc5,0x5,0xd9,0x1b,0xa7,0xb4,0x7a,0x3d,0x8f,0xab,0x1f,0xa3,0x99,0x25,0x93,0x80,0x15,0xa,0xe,0x3d,0x98,0x74,0xe1,0xec,0x3d,0x71,0x81,0x86,0x66,0x21,0xd0,0xc8,0x48,0x4c,0x6,0x5d,0x73,0x4f,0x1c,0xc5,0xa1,0x18,0x43,0x7,0x9f,0xc9,0x7c,0x1e,0x5e,0x1b,0x1d,0xb4,0x1b,0x23,0x8,0xca,0x2,0x64,0xcf,0x99,0x81,0xac,0x99,0x85,0x3b,0xd8,0x1e,0x7f,0x16,0x41,0xa1,0xb6,0xfc,0x67,0x83,0x71,0x62,0x91,0x31,0x98,0xdd,0x3b,0x1b,0xc6,0x89,0x11,0xc,0x97,0xbe,0x7f,0xf2,0x30,0xae,0xd4,0xa8,0x27,0xaa,0xca,0x1a,0xa6,0x9,0xc1,0xa9,0x96,0x19,0x28,0x3b,0xfe,0x98,0xce,0x7b,0xf3,0x56,0x52,0xd5,0x7e,0xdb,0x86,0xe0,0x1a,0xaf,0xed,0x1a,0x4,0x5f,0xc7,0x2d,0xe3,0x6b,0xfb,0x1d,0x1c,0x5e,0x0,0x4b,0xfc,0x1f,0x4f,0xd2,0x99,0x95,0x44,0x55,0xe2,0x17,0x6e,0xd,0xb5,0xd0,0xc1,0x9d,0xdf,0x3e,0xa,0x44,0x3a,0x81,0x29,0x9e,0x20,0xc9,0xc8,0x18,0xf1,0x6,0xd3,0x59,0x18,0x58,0x59,0x76,0xda,0x37,0xcf,0xb8,0xf0,0xf6,0x23,0x6a,0xd6,0xca,0x6a,0x3,0x82,0x8c,0xd3,0x42,0x82,0xa0,0x9,0x8c,0x25,0x13,0x53,0x3c,0xf,0xb6,0x2d,0x5e,0x31,0x5f,0x6,0x46,0xf1,0x52,0xc6,0x4b,0x6a,0x75,0x8a,0xc3,0x69,0x8d,0xbc,0x1b,0x43,0x83,0x0,0xfe,0x4c,0xc0,0x84,0x78,0x2e,0xe7,0xda,0x44,0xf4,0xa2,0xf6,0xd1,0x70,0x89,0x39,0x92,0xd2,0xde,0x88,0x74,0x82,0x7d,0xcd,0x16,0xaf,0xcb,0x2b,0xab,0x5,0xe3,0xfe,0xfd,0xf8,0x25,0xf2,0x18,0xa8,0xcb,0x76,0x2e,0x9b,0xb9,0x53,0xcd,0x33,0x83,0x8,0x7f,0xa2,0x93,0xe4,0x49,0xd,0x72,0x69,0xa2,0x5e,0x45,0x41,0xc9,0x0,0x2,0x19,0xbc,0x6d,0x3c,0xf1,0x79,0xe6,0x40,0x24,0xa6,0xef,0xb0,0xb6,0x25,0xfa,0xef,0x35,0xb6,0x94,0x8b,0xbb,0xb5,0x50,0x59,0xa6,0xb7,0xe7,0x0,0x6e,0x11,0x49,0x77,0x9b,0x9,0x15,0xb8,0x2e,0x9d,0x4e,0x7d,0x90,0x3e,0xaf,0xef,0x15,0x63,0xc9,0xee,0x99,0x45,0x6b,0xd1,0x88,0xf5,0xd6,0x6,0x84,0x7,0xfa,0x56,0x4a,0x31,0x52,0x46,0x5b,0x65,0xd3,0x7f,0x84,0xc2,0x78,0x48,0xab,0xa9,0xee,0xdc,0x54,0x17,0xc6,0x5b,0x2d,0x42,0x75,0xce,0xed,0x9c,0xf,0xad,0x9b,0x18,0x9c,0xd8,0xfc,0xaa,0xb7,0x29,0x2e,0x14,0x1,0xea,0x9b,0xd0,0x45,0x4f,0x39,0x85,0x7d,0xc4,0x91,0x73,0x27,0xa7,0x8c,0xcb,0x28,0x2,0x36,0xe2,0xec,0xb3,0x26,0x8e,0xda,0x17,0x3e,0x31,0x64,0x87,0x8e,0xe4,0x74,0x7c,0x47,0x36,0xcf,0xb5,0xd0,0x28,0xa6,0x38,0xad,0x49,0x27,0xe,0xb6,0x70,0x20,0x8a,0xe6,0xf9,0x7d,0x25,0x16,0xc6,0xd0,0xc,0x1f,0x49,0xb0,0x26,0x63,0xb4,0x50,0x4,0x45,0x42,0xda,0xc,0xb3,0x2e,0x1d,0xd7,0xdf,0x88,0x12,0xf2,0x86,0xb7,0x35,0x64,0x57,0x8b,0xc3,0xfa,0x4b,0x66,0xb8,0xf2,0xc7,0x38,0xbd,0xc,0xe,0x1d,0xa2,0x1f,0xaf,0x3e,0x46,0x94,0x2d,0x82,0x8,0x44,0x2a,0xc9,0x22,0xc3,0x24,0xe1,0xed,0xae,0x70,0xd4,0xea,0xf4,0x0,0xa2,0x12,0xa2,0x3b,0x6b,0x20,0x73,0xaa,0xc5,0xe0,0x5f,0xf1,0x41,0xe4,0xd0,0xda,0xc6,0x1b,0xbf,0xfe,0x91,0xe1,0x4b,0x39,0x3b,0xf2,0xf1,0xfa,0x68,0xf7,0xf,0x80,0x57,0x1b,0xbf,0x52,0x85,0x0,0x65,0x90,0x14,0x20,0xb2,0x8e,0xde,0xff,0x86,0xc6,0x62,0xd9,0x5b,0x9d,0x56,0x8b,0x77,0xf2,0x34,0x3,0xe7,0x1,0x29,0x7c,0xb9,0xfe,0x22,0xa7,0xf2,0x31,0x5d,0x4,0xcb,0x8d,0x96,0xd5,0x93,0x78,0x3f,0x96,0x41,0x8e,0x70,0x7f,0xff,0x37,0x78,0xfa,0xe4,0x2,0x4d,0x70,0x7b,0x23,0x9b,0x80,0x72,0xf,0x3,0xf,0xbc,0x38,0xae,0x60,0xfb,0x93,0x9e,0xfe,0x89,0x9c,0x1b,0x2d,0x7a,0xcd,0x48,0xd1,0xbd,0xdf,0x38,0xd5,0x6d,0xeb,0xed,0x2e,0xfb,0x23,0x39,0x22,0xec,0xb3,0x61,0x6e,0x16,0x2d,0xa,0x82,0xfa,0xb9,0xca,0xd9,0xb4,0xb1,0xab,0x6e,0x59,0x29,0xad,0x1c,0x91,0x34,0xd9,0xe2,0xd,0x35,0x93,0x2a,0x4,0xad,0x9d,0x74,0xa9,0x75,0x48,0xa5,0x6d,0xae,0x46,0x50,0x11,0xc3,0x56,0xc0,0xf9,0x7d,0x8e,0xa9,0xd5,0x84,0xe7,0xf5,0xf0,0xc2,0xa2,0xb3,0x6a,0x22,0x8f,0x2a,0xed,0x5e,0xf5,0xd5,0x41,0x5,0x15,0x44,0xde,0xc2,0xeb,0xa,0x16,0xec,0x55,0x34,0x75,0x99,0x20,0xbb,0xc6,0x5b,0x1a,0x1c,0xc2,0x7f,0x23,0xdf,0xa8,0xf4,0xbd,0x25,0xae,0x7,0xb9,0xa7,0x8c,0x36,0x50,0x21,0xb5,0xe7,0x5d,0xb1,0x37,0x7a,0xd0,0x8e,0xd6,0x31,0xbd,0x83,0x63,0x29,0xe4,0x6a,0x79,0xfa,0x20,0xc0,0x8e,0xab,0xd2,0xf5,0x8c,0xf8,0x22,0xa9,0xda,0xdb,0x4e,0x77,0x5e,0x1d,0xf7,0xaf,0x6,0x3c,0xcc,0xa4,0x5d,0xe3,0xa2,0xf8,0x16,0x85,0x8,0x3c,0x7d,0x45,0x9a,0x81,0x52,0xbf,0x56,0x3c,0xc3,0x76,0x1f,0x80,0xa5,0x11,0xff,0xe8,0xbf,0xe9,0xe8,0xd5,0x61,0xf2,0xa,0x14,0xc,0x67,0xf3,0xe9,0xc9,0x25,0x84,0x80,0x1,0xb2,0x2,0x9c,0x42,0xe6,0x5e,0xb6,0x5d,0x3a,0xa4,0xb4,0xa,0xf5,0xdc,0x2a,0xe,0xaf,0x70,0xf7,0x12,0xa2,0x8,0x44,0x57,0x15,0x13,0x37,0xc7,0x4b,0x1e,0x9c,0x12,0xac,0x2f,0xc6,0x2c,0x53,0xb3,0xe8,0xef,0xee,0xc3,0xa5,0x7e,0xbd,0x3a,0x7c,0x5c,0xde,0xc9,0x3d,0x1b,0xe7,0x13,0x9c,0x82,0xba,0xd6,0x35,0xce,0x2a,0x70,0x64,0x5b,0x59,0xa6,0xa6,0x75,0x57,0x27,0xec,0xf5,0x41,0x54,0x9f,0x7c,0xa2,0x30,0x14,0x73,0xb7,0xa1,0x2f,0x42,0xa3,0x50,0x95,0x4d,0xdd,0x5f,0x61,0x4c,0x2c,0x32,0x72,0xf3,0x64,0xe4,0x8a,0x35,0x4d,0xfb,0x9b,0xef,0xa2,0xa7,0x6a,0xa5,0x9d,0x17,0xb6,0x4c,0xcf,0x3e,0x1c,0x75,0xe2,0x15,0x15,0xae,0x92,0xdc,0x3a,0x8f,0xae,0xc9,0x20,0xd6,0x1d,0x69,0xe7,0x46,0x7c,0x96,0x49,0xc6,0x3a,0x9d,0x15,0x3c,0x38,0x37,0xd7,0x64,0x7d,0xe4,0xed,0x6b,0x1c,0xd,0xa,0x5e,0xf2,0x3e,0x41,0xc0,0xa3,0x5d,0xba,0x5a,0x72,0x5e,0x76,0xde,0x1f,0x78,0x9f,0x21,0xd4,0x13,0x4e,0xbd,0x19,0xb4,0x4f,0xbf,0x10,0x3a,0xf6,0x94,0xa,0x69,0x9c,0x30,0xff,0xa6,0xfc,0xa7,0xdf,0xd7,0xa5,0xfa,0x75,0xda,0xbf,0x74,0x89,0xea,0x9c,0x99,0x40,0x6e,0xbf,0x9e,0x4c,0x45,0x4d,0x5f,0x29,0xa6,0x4,0xb7,0x8a,0xed,0x55,0xd2,0xb9,0xa5,0xb7,0x2b,0xaa,0xb4,0x2d,0x11,0xd3,0xae,0xe8,0xeb,0x11,0x1b,0xf8,0xa3,0x13,0x6c,0xa5,0x44,0x69,0xf3,0xe0,0x3,0x6e,0x86,0x39,0x4c,0xc8,0xa6,0x91,0xef,0xdc,0xa7,0xc7,0x69,0x97,0x67,0x58,0xb6,0x5e,0x53,0xc9,0x78,0x7a,0x21,0xb7,0x34,0x2e,0x79,0xb9,0x63,0xa8,0x50,0x47,0x99,0x38,0x5e,0x96,0x27,0x68,0xe8,0xaa,0xd5,0x6c,0x1b,0x13,0xfa,0xbb,0x37,0xa5,0xb3,0x4a,0x45,0xe,0xae,0xb8,0x4e,0x14,0xbf,0xb1,0xbf,0x5a,0xe8,0x72,0xda,0x5e,0x5c,0xf8,0x86,0xbe,0xb4,0xdc,0x35,0x99,0x58,0xd9,0x7f,0xd2,0x45,0x5e,0xf7,0xc8,0x6a,0x84,0x27,0x2d,0xf4,0x17,0x2c,0xbf,0x60,0xb2,0x69,0xee,0x3e,0xa4,0x5,0x4a,0x86,0xab,0x1f,0xa,0x78,0x94,0x7a,0xf1,0xa3,0xa6,0xa6,0xcf,0xa3,0xa0,0x6d,0xec,0x3f,0x44,0x9,0x2a,0xfb,0xed,0x59,0x81,0x8a,0x10,0xeb,0x74,0x9e,0x6f,0xe4,0xcf,0x39,0xb8,0x91,0xf5,0x2d,0x54,0x7e,0xb4,0x78,0xc2,0x95,0x6c,0x67,0x1f,0x9c,0xc7,0xc1,0x24,0xab,0xdc,0x2e,0x18,0xbe,0xb,0x31,0xfd,0x22,0xb,0xd0,0x49,0x69,0xae,0xc4,0x92,0x84,0x79,0xaa,0x51,0x69,0xbf,0x7f,0xd4,0x80,0xa3,0x86,0x38,0x5d,0x5a,0x55,0xac,0xa2,0xac,0xcc,0x19,0xf0,0x38,0xc6,0x90,0x8c,0xfc,0xce,0x97,0x93,0x35,0x52,0x4,0x7f,0x23,0x89,0xe7,0x48,0x58,0xa7,0x7c,0x66,0xdd,0x5d,0x65,0xb3,0x7,0xc5,0x63,0x4c,0x99,0xd1,0xf6,0xdb,0xcb,0x53,0xe0,0xce,0x5c,0xce,0xee,0xbe,0xe6,0x67,0x0,0xeb,0x27,0xc,0xc9,0xc5,0x25,0x7a,0x7f,0x28,0x40,0x62,0x7f,0xa2,0x4a,0xf5,0x86,0x94,0x52,0x90,0xb7,0x38,0x5,0x10,0x88,0x81,0x35,0x28,0xbf,0x97,0x69,0x66,0x14,0x7a,0xae,0xea,0x30,0xf6,0x62,0x46,0x57,0xa5,0x5d,0x6c,0x6e,0x1f,0x99,0x7e,0xb1,0xaf,0x20,0x12,0x5a,0x7b,0x88,0x2e,0x61,0xbf,0xbe,0xb3,0x5c,0x1f,0xe4,0x62,0x75,0x9a,0xf5,0x36,0x57,0xae,0x4b,0xdf,0x47,0xfe,0x22,0xb0,0xb3,0x96,0x6a,0x47,0x2a,0x46,0x99,0x11,0xed,0x3a,0xea,0x33,0x51,0xe0,0x30,0x5b,0x4e,0x6a,0x3a,0x32,0xdb,0xf3,0xbd,0xcd,0xaa,0x9d,0xff,0x71,0x25,0x97,0xcc,0xea,0xec,0xe8,0xac,0xf4,0x6b,0xf2,0xf0,0x2f,0xc2,0x84,0xfa,0xfa,0xe5,0x1f,0x8f,0x50,0x82,0xf6,0x7e,0xb7,0x1e,0xdd,0xad,0xc,0x28,0x2b,0x49,0x65,0x15,0xaf,0x21,0x64,0x8f,0x37,0x52,0xac,0x4,0x90,0xbe,0x4d,0xd0,0xdd,0xe8,0x9b,0x3e,0xba,0x97,0x64,0xdc,0x0,0x57,0xc2,0x83,0x38,0x37,0x30,0xd1,0x58,0x5c,0x15,0x2d,0xf4,0x26,0x56,0x1f,0x62,0x4a,0x25,0x49,0x44,0x40,0xf0,0xe6,0x54,0x2e,0xd2,0xd4,0x94,0xca,0xcc,0xe4,0x45,0x9d,0xea,0x96,0x1b,0x2d,0xeb,0x45,0xe0,0x2,0x3e,0x8c,0x63,0x42,0x2d,0xb7,0x62,0x1a,0xe4,0xa1,0xc4,0xa2,0xd1,0xc6,0xa2,0x21,0x5b,0xf4,0xa3,0xef,0xe5,0x11,0xe3,0xac,0x6,0x5f,0xc7,0x21,0x58,0xdf,0xf1,0x19,0xfd,0x63,0xcd,0x1,0xb6,0x56,0x77,0xb5,0x1f,0x22,0x7b,0x26,0x82,0xdd,0xfe,0xc6,0xd0,0x82,0x1c,0xa4,0xc0,0x43,0x4f,0x98,0x8c,0x89,0xd3,0xe7,0x94,0xda,0xfd,0x41,0xd3,0x9b,0xd6,0xe3,0x67,0x85,0xfe,0x42,0x4d,0x22,0xd9,0x27,0x85,0xc8,0x3d,0xc9,0xdc,0x75,0x7a,0x9e,0x67,0x92,0xb,0x2e,0xf9,0x87,0xc4,0x30,0x91,0x43,0x7e,0x33,0x11,0x4a,0x53,0xf7,0xc0,0x2a,0x42,0x1e,0x2a,0x4f,0x2e,0xba,0xd6,0xd8,0xd0,0xa6,0x1,0xfa,0xdf,0x37,0xf1,0x51,0x61,0x4f,0xc9,0xb2,0x4b,0x3,0x5b,0x4c,0xfe,0xf5,0x3d,0x27,0xef,0x80,0x4b,0x1e,0x32,0xae,0x92,0x3a,0xaa,0x55,0x20,0x53,0x6,0x17,0x5e,0x2e,0x8f,0xe2,0x5c,0x33,0x64,0x97,0xd9,0xd6,0xb8,0xc8,0x20,0x9,0x43,0xc5,0x11,0x6c,0xfb,0x10,0xf2,0x30,0x47,0x5b,0xe6,0xa9,0xec,0xe5,0x25,0xc4,0x44,0x5,0xab,0x7d,0x5e,0xad,0x26,0xb8,0x84,0xe7,0xac,0x70,0x1a,0x88,0x1a,0xda,0x57,0x61,0xb5,0xb6,0x69,0x69,0x21,0xd6,0x9a,0x2b,0xfd,0xed,0xe2,0x9a,0x22,0x32,0x74,0x92,0x62,0x14,0xef,0x7b,0x1c,0xca,0x61,0x11,0xf2,0xb7,0x5c,0xff,0xa9,0x96,0x23,0xea,0xb,0xdf,0x5b,0x9e,0x32,0xe2,0x14,0x9f,0xa,0xcb,0x37,0x3d,0x5b,0xf6,0x23,0xd8,0xd4,0x79,0x97,0xb7,0xd8,0x75,0x26,0xac,0x64,0x34,0x1b,0xee,0xd4,0xc8,0x20,0x33,0x2e,0xc0,0xb9,0xb7,0xbd,0x12,0x4,0x3b,0xbd,0x2,0x9d,0x11,0x37,0x6d,0x13,0x11,0xe5,0x72,0x3f,0x60,0x58,0x4b,0xc9,0xb1,0x21,0x9b,0xbc,0x53,0xa5,0x35,0x95,0xb4,0x4b,0x35,0x6a,0xcb,0xb6,0x7d,0xc6,0x37,0xaf,0xe1,0xf8,0xb9,0xe,0xa9,0xb5,0xc3,0x5d,0x3c,0xc4,0x7,0xb9,0xe9,0x4e,0x80,0xa1,0xfc,0xec,0xab,0x10,0xbb,0xec,0xd2,0xff,0xf2,0x45,0xf2,0x28,0xce,0x6c,0x1c,0x74,0xb2,0xc0,0x5f,0xcf,0xdb,0x4f,0xb5,0x62,0x5a,0xef,0x15,0x74,0x1b,0xb4,0xa1,0x4c,0xcb,0x13,0xb0,0xdf,0x1f,0x2,0x85,0xfc,0xb7,0xf8,0xd5,0x91,0x27,0x7e,0xde,0xf0,0x55,0x4c,0x26,0x60,0x32,0xcc,0x7a,0x78,0x83,0x90,0x75,0xd6,0x5c,0xa5,0xd4,0x3e,0x91,0x34,0x7d,0x30,0x31,0x24,0x3b,0x92,0xa4,0x65,0x76,0x4e,0xc5,0xeb,0x4a,0x43,0xf5,0x57,0x8e,0xe2,0xc,0x25,0xf8,0xff,0xbb,0xc6,0x7d,0x77,0x7a,0x55,0x17,0xc1,0xa5,0xa0,0xae,0xa4,0x7e,0x2d,0x8,0xe6,0xe0,0x78,0x2b,0x2b,0x14,0x38,0xa2,0xc1,0xa7,0x53,0x43,0x58,0x8a,0x78,0x8e,0x96,0xad,0x55,0x7c,0xa5,0x56,0xbb,0xed,0x8c,0xb1,0x46,0x26,0x77,0x43,0x98,0x8b,0x5e,0x9a,0xb3,0xba,0xc4,0x69,0xd3,0x63,0x6,0x7,0xd,0xc0,0xaa,0xce,0xda,0x20,0x6a,0xd4,0xaa,0xac,0x30,0xf,0xcd,0x2,0xf7,0xc2,0x9c,0x3a,0x63,0xa6,0x6,0x3e,0x60,0x4b,0x16,0xf1,0xb3,0xda,0x94,0x43,0x74,0x7e,0x7,0x31,0x1a,0x98,0x78,0x39,0x58,0x9d,0x8a,0xf2,0x23,0x85,0x77,0x21,0x9a,0x96,0xfe,0x6c,0x52,0xa6,0xf4,0x32,0xe8,0xc6,0x1f,0x51,0xd4,0x5c,0xe4,0xca,0xc6,0x5f,0xc2,0xbf,0x1b,0xb4,0x15,0x98,0x57,0xd,0xf3,0x4,0x38,0xe2,0xb0,0x9,0x61,0xad,0xc4,0x93,0xa2,0x7,0xd3,0x97,0xc8,0xf,0x83,0xa6,0x6d,0x25,0xdb,0x9b,0x8f,0xa1,0x5c,0x2,0xcc,0x84,0xbb,0x17,0xaa,0xb9,0xc4,0x22,0xc7,0xd2,0xa7,0xb,0xc5,0x20,0xc7,0x1e,0xf0,0x29,0x5b,0xd5,0x21,0x2a,0x28,0x20,0x1c,0xc5,0x4c,0x69,0x5a,0xcd,0xf5,0x67,0xbc,0xdf,0x64,0x61,0x19,0xb0,0x6c,0x8a,0x8f,0xa4,0xae,0x26,0xec,0x96,0xaf,0x69,0x14,0x34,0xdf,0xa5,0x1f,0x96,0x9f,0x4c,0xde,0x6b,0x21,0x96,0xe4,0x3f,0x49,0xd5,0xc9,0x3,0x40,0x82,0xd9,0x37,0xbb,0xf7,0x98,0xbf,0x72,0xf5,0xea,0xbf,0x40,0x6f,0x84,0x88,0xf5,0x82,0xad,0x18,0x88,0xc5,0x2,0x2f,0xe9,0xd2,0x86,0xc3,0x13,0x18,0xfc,0x21,0x33,0x28,0x99,0xa1,0xcf,0x69,0xd0,0x2a,0xb6,0x76,0xe,0xc3,0xa0,0xd1,0x7f,0x52,0x15,0x4e,0x14,0x95,0x60,0xea,0x9e,0x1f,0xb2,0xf9,0x1c,0x6b,0xbd,0x37,0x25,0x61,0xe3,0x9e,0xee,0x83,0xbf,0x1,0x1d,0xe3,0x30,0xa,0xce,0x88,0xd6,0x8,0x17,0xe1,0x18,0xb6,0x87,0x37,0x4,0x50,0xe0,0x72,0x1e,0x42,0x79,0xd0,0xf4,0x31,0x89,0x4f,0xc,0xe1,0xdc,0x5c,0x9,0xd6,0xdc,0xeb,0x81,0x50,0x86,0xda,0xbb,0x12,0xbf,0x44,0x25,0xec,0x94,0x92,0x28,0x33,0x7a,0x15,0x28,0xb0,0xad,0xb6,0xc1,0x98,0x4e,0xb6,0x63,0xdb,0x6,0xa7,0xe0,0x9c,0x8d,0x5b,0xa,0xd3,0x69,0x60,0xeb,0x7e,0xb1,0x89,0x25,0x69,0x84,0x4d,0x3c,0x42,0xb0,0x5e,0xe,0xee,0xa6,0x3d,0x84,0x38,0xff,0x52,0xcc,0x4d,0x9c,0x44,0xe5,0x1f,0xcd,0x6,0x7,0x5b,0x2f,0xb7,0x6,0xb3,0x10,0x49,0xcd,0xc8,0xb7,0x33,0xa,0xb3,0xd0,0x73,0x8e,0xa3,0x72,0x50,0x69,0xe1,0x7e,0x92,0xae,0x53,0x4e,0x24,0xaa,0x1b,0xb1,0xb,0xe9,0x63,0xc1,0x5d,0x8d,0x4c,0xfb,0x2d,0x32,0x95,0x80,0x32,0xaf,0xa3,0xe4,0x89,0xb1,0xac,0x11,0x44,0x7f,0x50,0xc7,0x25,0x2d,0x3b,0x29,0x22,0xa9,0x0,0x42,0x63,0x28,0xe4,0xb7,0x6,0xc,0x49,0xd6,0x10,0x17,0x92,0x52,0x9f,0xcb,0xed,0x9d,0x31,0x2f,0xfc,0xbe,0x12,0x1c,0xd3,0xb6,0x74,0xf1,0xb1,0x68,0xd0,0x39,0x68,0xbf,0x4a,0x67,0x8,0xb2,0xf7,0xec,0xbf,0x8a,0xc1,0xab,0x6d,0x65,0x10,0x2c,0xe4,0x45,0x1e,0x77,0x32,0xb6,0xfc,0x36,0xdd,0xd,0x75,0x48,0xf0,0x77,0x29,0x9b,0x3,0xad,0xd2,0x35,0x9d,0x3f,0xcb,0x3,0xfe,0xd0,0xd8,0x56,0xdd,0x76,0x6c,0xc7,0x61,0xc4,0xc3,0xb7,0x6c,0xa1,0x8b,0xfc,0x50,0x42,0xd9,0x69,0xdb,0xef,0xf,0xaa,0xab,0x8,0x62,0xb7,0xbb,0xca,0x6a,0x96,0x58,0x2a,0xa1,0x51,0x56,0xf4,0xa9,0xb3,0xd6,0x81,0x5,0x61,0x55,0x23,0x17,0x78,0x4e,0x16,0x7f,0xe1,0x7,0x7d,0x3f,0x8b,0x17,0xc3,0x73,0x33,0x2e,0x63,0xe5,0x71,0x76,0xb6,0x3f,0x7e,0x88,0x72,0x5e,0xda,0x20,0x5a,0x67,0xb4,0xa6,0x8a,0x4c,0x4c,0x20,0xd1,0x92,0x2f,0xc8,0x74,0xf5,0x86,0xfa,0x5d,0x65,0x71,0xf6,0x95,0xc0,0xa6,0xd8,0x15,0x26,0x5f,0xa6,0x5e,0xf9,0x20,0x94,0xbe,0x9b,0xd5,0x41,0xf8,0x82,0x36,0x7a,0x69,0x8c,0x64,0x1f,0x24,0x20,0x84,0x6,0xb9,0xb1,0x50,0x5e,0xc7,0xa4,0x7c,0x41,0x7f,0xac,0x97,0x6f,0x61,0x46,0xc6,0x94,0xa0,0x8e,0xbf,0xf9,0x79,0x63,0x4c,0xeb,0xf5,0x3f,0x51,0xc4,0x4,0x74,0x82,0xa3,0xe7,0x8c,0x53,0x80,0x73,0xe7,0x65,0x37,0xf7,0x88,0x58,0x9b,0xc3,0x1,0xaa,0x2,0x12,0xce,0xce,0xfe,0x4e,0xa7,0xc5,0xf6,0x16,0xff,0x6f,0x3d,0xc6,0x66,0xab,0xe7,0xb5,0x4,0x8b,0x28,0xc4,0xea,0x9a,0x8,0xdf,0xc1,0x59,0x87,0xb7,0xd4,0x77,0x88,0xed,0xbe,0xed,0x44,0x6d,0x91,0x83,0x42,0x48,0xeb,0x3f,0x43,0xf7,0xd5,0x79,0x76,0xf1,0x60,0x18,0xea,0x4b,0x98,0xd7,0xc1,0x12,0x9e,0x65,0x55,0xff,0xa7,0x58,0x9,0x30,0x49,0x1b,0x70,0xb8,0x95,0x41,0x3c,0x7a,0x47,0x5,0xdb,0x3e,0x22,0x57,0x76,0xce,0x5c,0xa0,0x6f,0x9e,0x6b,0xbe,0x13,0xaf,0xc0,0x5c,0x61,0xb3,0xc,0x16,0x2b,0x5f,0x9e,0x7d,0x36,0xec,0x3d,0x4a,0xb5,0x81,0xa4,0xee,0xe1,0x61,0x28,0x5b,0xb0,0x93,0xee,0xd,0xa,0x5b,0x71,0x3c,0xdc,0x82,0xd9,0x3f,0xc8,0xe8,0xc1,0x91,0xa4,0x3,0xae,0x89,0xf8,0x8f,0x23,0x97,0x29,0x1,0x84,0x1c,0xd6,0x66,0xff,0xbe,0x25,0x71,0x78,0xd5,0x7a,0x24,0xe5,0x2e,0xfc,0xa9,0x83,0xf4,0x82,0xe9,0xcf,0xa3,0xfb,0xfc,0xde,0x7b,0x46,0x92,0x62,0x8f,0x4e,0x6d,0xd0,0xdc,0x0,0x90,0xb0,0x48,0x36,0x11,0x36,0x5f,0x97,0x8b,0x65,0xe3,0xa1,0xde,0x87,0x7d,0xf3,0x43,0x80,0xfd,0xfb,0xdc,0xb1,0xe9,0x91,0x12,0xbd,0xdb,0xc1,0x66,0x34,0x9d,0x6e,0x6e,0x37,0xb5,0x9b,0x8b,0xf3,0xc,0xe7,0x1c,0x4e,0x8e,0xe7,0x38,0x81,0x1a,0xb6,0xf3,0x2b,0x8a,0xd7,0x1a,0x3f,0x94,0xe8,0xf0,0xcd,0x98,0x1d,0xaf,0x37,0xa1,0x62,0xf0,0x5a,0x38,0xdb,0x81,0xfa,0x13,0x89,0x28,0x4a,0xf,0x8d,0x9a,0xde,0xf6,0xc1,0xeb,0x67,0xe0,0x3d,0xa5,0x8c,0x90,0xd3,0xec,0x1a,0xb3,0xa8,0x36,0x86,0xe4,0x95,0xd6,0x4f,0x5f,0x1b,0xb7,0x9c,0x3c,0xa1,0xb2,0xa1,0xda,0xc8,0x9a,0xb6,0x2b,0x65,0xce,0xe6,0x7a,0xd0,0x28,0x74,0x51,0x7c,0x4a,0x38,0xa8,0x68,0xc3,0x35,0xf4,0xdd,0x20,0x40,0xd8,0x4e,0x86,0x49,0x3,0x4c,0x53,0x5b,0x79,0x94,0xfe,0x35,0xfc,0x3,0x1,0x5c,0x1e,0x32,0x40,0x5,0x35,0x43,0x34,0xda,0x44,0xc5,0xda,0xf6,0xef,0x31,0x8e,0x43,0x18,0xa8,0x10,0x41,0x55,0x35,0xd8,0xd,0xa2,0xaa,0xeb,0x22,0x44,0xb3,0x4b,0xae,0xf7,0xc4,0x8,0x72,0xb,0xed,0xf2,0x6d,0x70,0x6e,0xd6,0x65,0xd2,0xdc,0x44,0x12,0x6d,0x3f,0xf9,0x79,0x2b,0xd3,0x96,0x5a,0xbd,0xf8,0x82,0x62,0x2e,0xe4,0xec,0xa8,0xb1,0x5e,0x31,0xc2,0xf2,0xb,0xcf,0xd2,0x87,0x26,0x15,0xba,0x55,0xd7,0x84,0x2a,0xe9,0xb2,0x8f,0x36,0xd7,0xd,0x23,0x43,0xdb,0x5,0x35,0xa1,0xcb,0xd4,0x50,0xa9,0x6e,0xac,0x86,0x9e,0x31,0xce,0x82,0x71,0x28,0x76,0x49,0xb9,0x70,0xe9,0xc3,0xac,0xa2,0x8f,0xc2,0x35,0xe7,0x4a,0x9,0x1,0x6a,0xa1,0x4d,0x41,0x6d,0x47,0x5a,0x92,0xad,0xe8,0x51,0x81,0xa0,0xd,0x34,0xd7,0xf2,0xa1,0xe0,0x17,0x34,0x22,0xfd,0xd8,0x1f,0xe7,0x23,0x14,0x79,0xe8,0x7d,0x9b,0x15,0x1a,0x94,0x8f,0xa5,0xb1,0xc7,0x24,0x3e,0x2d,0xdb,0x89,0x57,0x8d,0x98,0xb4,0x92,0x0,0x58,0x3e,0xc1,0x68,0x1b,0x3a,0x3c,0x38,0xc3,0xfa,0x75,0x30,0x8c,0x6,0xf2,0x6c,0xf8,0x9,0x69,0xf0,0x2f,0x98,0x2f,0xd4,0xc5,0xe3,0x2b,0xfa,0x5c,0x40,0xc1,0x3e,0x1a,0xe6,0x4c,0x7d,0xbd,0xd0,0xf3,0x98,0x27,0xad,0x3c,0x1c,0x5f,0x41,0xb3,0x7e,0xcb,0xef,0xdc,0xc7,0x5e,0x5a,0x22,0xa4,0xb4,0x1e,0xaf,0x81,0xeb,0xe4,0xd3,0x92,0xa4,0xdf,0xbb,0x91,0x5f,0x42,0xe0,0xd,0x2b,0x6a,0x76,0xff,0xd8,0x8a,0x58,0xb5,0x95,0xd,0x45,0x92,0x78,0x11,0x3e,0xbc,0x24,0xe1,0x49,0x6a,0x47,0x23,0x59,0x59,0x83,0x76,0xab,0x47,0x9c,0xc4,0x4f,0xb7,0x80,0xbf,0x30,0xfb,0x96,0x94,0x72,0xa4,0x21,0xfc,0xfc,0x47,0x50,0x71,0xc2,0x83,0x72,0x6c,0xf1,0x26,0xdc,0x77,0x30,0x29,0x87,0x44,0x56,0x37,0x1e,0x86,0x6,0x2f,0x97,0x83,0x15,0xdb,0xc,0xa0,0x1c,0xd4,0x8d,0x59,0x41,0xf5,0xba,0x5e,0xc4,0x52,0xe6,0x1c,0x11,0x8a,0x0,0x44,0x85,0x8e,0xca,0x89,0x5a,0x8,0x21,0x7a,0x24,0xd0,0xee,0xcc,0xb4,0x59,0x8a,0x21,0x2b,0xe,0x87,0xae,0x91,0x13,0x1f,0x97,0x56,0x99,0xa2,0x7,0x74,0x23,0xbf,0xb5,0xeb,0x89,0x7c,0xa5,0x4b,0xf,0x3f,0x68,0xda,0x78,0x9,0x6a,0x4a,0x1f,0x51,0xe4,0x7f,0xc3,0xc8,0x90,0xc6,0x11,0xca,0x82,0x75,0x98,0x29,0x89,0x77,0x98,0x35,0x28,0x7e,0x60,0x73,0xc6,0xbd,0xda,0xab,0x49,0xd2,0x62,0x8b,0x1f,0x1f,0x57,0x1,0x83,0xf3,0xfd,0xb2,0x9c,0x10,0x2e,0x35,0x1d,0xdf,0x2a,0xb8,0xf4,0x7b,0xea,0x3e,0x59,0xe6,0x66,0xa7,0x56,0x2e,0xc8,0x27,0xa0,0xc5,0x22,0x7a,0x31,0x32,0x90,0x9a,0xce,0xf3,0xbb,0xcc,0xf5,0x8c,0x27,0xc,0x3,0xed,0x26,0xe2,0x1c,0xd9,0x74,0x59,0x12,0x1b,0x0,0xfd,0x60,0xdd,0x74,0x5c,0x75,0xc5,0x9c,0x8c,0xd4,0x50,0x8f,0xce,0xd7,0x3d,0x3,0x32,0xc,0x9e,0x79,0x57,0xfc,0x2d,0x78,0xcb,0xe5,0x64,0xf8,0x23,0x98,0xf8,0x90,0xba,0x21,0x9,0x7e,0x9a,0xaf,0x52,0xa0,0x8,0xd9,0x29,0xe1,0xf0,0x28,0xf8,0x87,0x53,0x35,0x7f,0x5d,0xf8,0xc3,0xe8,0xe,0x9,0xc3,0x44,0x27,0x47,0xc1,0xe6,0xb,0xa,0x70,0x85,0xa6,0xc5,0x71,0x3a,0x89,0xf7,0x8,0xda,0x60,0x54,0xc0,0x20,0xc1,0x93,0x48,0xb5,0x6e,0x46,0xe5,0xa2,0xfc,0x41,0xa4,0x5f,0x83,0x2,0x85,0x1,0x29,0xc8,0xc0,0xed,0xd9,0x40,0x3e,0x63,0x80,0xee,0x4c,0x41,0xa0,0x37,0xa2,0x71,0x45,0x67,0x11,0xd7,0x7c,0x1a,0x82,0x52,0xcb,0x4,0x86,0x8a,0x4a,0xa9,0xdc,0x37,0xc,0x22,0x1e,0x46,0xca,0xa6,0xff,0xc1,0xe9,0x18,0x7,0x8b,0xf9,0x6b,0xe0,0xb5,0x7,0x5c,0x7b,0x3c,0xaf,0x87,0xb1,0x92,0xb6,0xf0,0xcc,0xc9,0x83,0x85,0x77,0x31,0xbc,0xe,0xed,0xb6,0x9e,0x8f,0xe1,0x27,0xc6,0x5f,0xf1,0x45,0xdf,0xfd,0xa6,0xf7,0x46,0x5e,0xf2,0x2b,0x90,0xc3,0x90,0xd0,0xd0,0x92,0x5d,0x53,0xc0,0x2a,0x44,0x67,0x45,0xbe,0xb0,0x42,0x27,0xe3,0xbb,0x5a,0xd7,0x4b,0x6c,0xf6,0x73,0x72,0x23,0xf5,0xa,0x41,0x34,0x21,0x73,0x7,0xd3,0x10,0xbf,0xb0,0x1f,0x6a,0x38,0x4d,0x53,0xcc,0xc5,0x87,0x38,0x80,0xe6,0x6e,0x6d,0x6a,0x6b,0x78,0xce,0x11,0x8a,0xe8,0x63,0xe8,0xa4,0x25,0x96,0xfd,0x66,0x41,0x8b,0x2e,0x36,0x16,0xd5,0xae,0xd,0xab,0xca,0xb1,0xe7,0x87,0xf8,0xb,0xac,0x15,0x68,0xcb,0xd3,0x67,0xc0,0xb4,0x1c,0x56,0xc2,0xc3,0x1d,0xb,0x34,0x7e,0x3e,0x5a,0x3f,0xa7,0xf6,0x4c,0xb0,0xc6,0xd1,0x8d,0xd8,0x48,0x9d,0x71,0x72,0x3d,0x95,0x7f,0xd4,0x9b,0x54,0xf0,0xe5,0x4f,0x4b,0x6c,0x85,0xcc,0xb7,0xee,0x8f,0x4b,0xb1,0x6b,0xeb,0xcb,0xc3,0x4e,0x51,0xe0,0xc2,0x2e,0x17,0x95,0xa7,0x8e,0xfc,0xd5,0x9c,0xe2,0xbc,0xfb,0x7a,0x68,0xcc,0x15,0xea,0xce,0x1d,0xf2,0x88,0x57,0x59,0x69,0x5d,0x51,0xf,0x81,0x94,0x91,0x52,0x7e,0x89,0x8a,0x5b,0x5d,0x92,0x12,0x87,0xae,0xde,0x7c,0x7a,0x9a,0xd7,0xa7,0xb8,0x55,0x1,0xe3,0x57,0x91,0x80,0xb5,0x16,0x4e,0xcd,0xca,0x36,0xec,0x97,0xad,0x38,0x9d,0x12,0x3e,0x19,0xc4,0xf9,0x55,0x41,0xff,0xf1,0x43,0x2,0x2e,0x58,0x2c,0x80,0x7f,0x12,0x57,0x5c,0xd5,0xf3,0x0,0x50,0x12,0xf9,0x89,0xd1,0x4c,0x81,0xc3,0x50,0xef,0xc2,0x6d,0x14,0xda,0x84,0xa3,0xc5,0x9a,0x69,0x49,0xf4,0x4b,0x2c,0x9c,0x95,0xf9,0xf9,0x8d,0xe6,0x6c,0xca,0x7c,0x34,0xf1,0xaa,0x3b,0x9c,0xd2,0xfa,0x23,0x0,0x1c,0xbb,0x43,0xb0,0x60,0xd9,0xdb,0xfa,0xde,0x87,0xeb,0x97,0xbd,0x8e,0x4d,0xaf,0xb1,0xce,0x78,0xba,0x8e,0xf4,0x85,0x4d,0x31,0xa2,0xad,0x3,0x9b,0x9e,0x3e,0x3f,0x5c,0xc1,0x5b,0x9b,0x2f,0x27,0x9e,0xe1,0x43,0xa9,0xd5,0x33,0x58,0xbc,0xb1,0xec,0xa,0x50,0xc7,0x98,0x64,0xc0,0x5d,0x94,0x81,0x7a,0x46,0x66,0x84,0x74,0x12,0x1d,0xf7,0x6,0xd7,0x68,0xff,0x7b,0xaf,0x2,0x22,0x69,0xd,0x6,0x7c,0x29,0x9f,0x66,0xf2,0x56,0xae,0x8a,0xd9,0x98,0xbc,0x83,0x6b,0x13,0x82,0xab,0x72,0x75,0xf1,0xf1,0x11,0xdb,0x77,0x6,0xbc,0xb9,0xb1,0x6b,0xdf,0xef,0x77,0x68,0x4e,0xfc,0xf0,0xac,0x9d,0x89,0x5f,0xcf,0x2,0xf9,0x27,0xda,0xb1,0x83,0x44,0x90,0x61,0x12,0xbd,0xc8,0x9a,0x4f,0x8,0x67,0x9,0x6f,0x4b,0xe4,0x4c,0xcd,0xbe,0xfd,0x12,0x67,0x7b,0x7,0x9c,0xc1,0x1b,0xc,0xa6,0x34,0x23,0x20,0x62,0xbc,0xc5,0xf6,0xf6,0xca,0x92,0xfe,0xe2,0xbf,0x3,0x49,0xf6,0x94,0xa3,0x26,0xc4,0xa1,0xec,0x36,0xfa,0x4c,0xbc,0xf0,0x1b,0x8b,0x7c,0xd7,0x88,0x43,0x41,0xe4,0xb7,0xb,0xe7,0x92,0x76,0xf5,0xd0,0x65,0xa2,0x6e,0xdf,0xc0,0xed,0x44,0x17,0x8d,0x3c,0x5d,0x4f,0xdb,0x3c,0x74,0x8,0xbb,0x29,0x40,0x65,0xaf,0xea,0x5e,0x69,0xff,0xea,0x15,0xd5,0x46,0x1a,0xf6,0xd,0x44,0xba,0xcc,0x2d,0xe7,0x9d,0xfa,0x3a,0xe1,0x8a,0x76,0x8c,0xa5,0x25,0x2c,0xf8,0x20,0x67,0xf5,0x91,0x8f,0xc2,0x4f,0xac,0x4d,0x8e,0x7c,0x94,0xe8,0x27,0x4e,0xac,0x77,0x44,0x3f,0xb7,0xf0,0x0,0x19,0x43,0x73,0x9,0x59,0x7f,0x4d,0x6b,0x2d,0x2d,0x0,0xa1,0xfe,0xef,0x93,0x69,0x8c,0xbe,0x32,0xd1,0xf,0x4b,0xba,0x74,0x9f,0x1,0x1f,0x2c,0xc3,0x6,0xe9,0xb7,0xe2,0xe,0xf2,0x42,0xb1,0x5e,0x20,0x78,0x1b,0x59,0xf,0x32,0x8a,0x5e,0x23,0x30,0xb4,0x3d,0xee,0x46,0x4e,0xf4,0xc4,0xb5,0xac,0x65,0x63,0xbf,0xaf,0x86,0xde,0xdd,0xad,0x90,0x47,0x1c,0x64,0xa8,0x5b,0x87,0xbf,0x18,0xa9,0x86,0x10,0x4,0xd1,0x8,0x3,0xe3,0x3d,0x55,0x99,0xb4,0xff,0x8d,0xef,0xc0,0x59,0x5,0x39,0xb,0x82,0x90,0x51,0x67,0x5f,0xc7,0x93,0x51,0x69,0xd7,0x79,0x2b,0xbc,0xb6,0x72,0xf1,0xd6,0x21,0x39,0x87,0x5f,0x13,0xd6,0x3d,0xfb,0x91,0x18,0x60,0xbe,0xc,0x76,0x3d,0xb3,0x62,0xe0,0x3e,0x9d,0x39,0xaa,0xfe,0x4b,0xd6,0x13,0xfa,0x74,0x6a,0x6,0xb6,0xa3,0x66,0x66,0x70,0xdb,0x28,0xad,0x7c,0x6c,0xc3,0x9e,0x4e,0x2e,0xee,0xae,0xf6,0xad,0x7b,0x48,0xb0,0xab,0xf9,0xd7,0x7f,0xc7,0x55,0xab,0xed,0x93,0x14,0x75,0x3,0x3e,0xe2,0xf0,0xf3,0x3,0xdb,0x83,0x46,0x4d,0x8c,0x4d,0xd9,0x2,0x85,0x1c,0x97,0x53,0x1e,0x78,0x98,0x14,0xb1,0xdc,0x33,0x6,0x6c,0xc7,0x4e,0x64,0x40,0x41,0xf7,0xb1,0x91,0x6e,0xca,0x98,0xbb,0x8c,0x93,0xe9,0xa5,0x7a,0xa6,0x81,0x6c,0x95,0xc6,0x53,0xc3,0x42,0xf0,0x55,0xfc,0x91,0x59,0x61,0x4a,0xdc,0x25,0x88,0x4a,0xc5,0x43,0x25,0x52,0x3e,0xe4,0x3c,0x52,0x41,0xe2,0x3d,0xe0,0x2b,0x99,0xb8,0xdc,0xc4,0x44,0xb4,0x3e,0x12,0x3e,0x7e,0xdb,0x1e,0x39,0x51,0x5a,0xbd,0x6,0x68,0xaa,0x46,0x8d,0x74,0xa2,0xf9,0x2e,0xea,0x82,0xe1,0xd8,0xcd,0xb4,0x3,0x81,0xab,0xa4,0xb6,0xe1,0x69,0x6a,0xff,0xf,0x7a,0x61,0x16,0xde,0xef,0xa5,0x84,0xae,0x3d,0x38,0xd2,0xa0,0xe,0xc7,0x56,0x89,0x7e,0xc1,0x99,0x75,0xe8,0x77,0xfa,0xc4,0x7d,0x78,0x59,0xce,0xae,0x48,0x71,0x78,0xbb,0x81,0x9c,0x96,0xd8,0x24,0x15,0x92,0xf8,0xa4,0x46,0x7c,0x84,0x68,0xb9,0xd5,0x5b,0x8e,0x27,0x4e,0x21,0xbf,0x39,0x9e,0xa5,0x3a,0x9c,0xec,0x20,0x14,0x89,0x99,0x6d,0xd1,0xcd,0xc3,0x38,0xf7,0xfb,0x84,0x34,0x34,0x66,0x84,0x7,0x94,0xff,0x89,0x42,0xee,0x8b,0x26,0xb1,0x0,0x8b,0x12,0xbd,0x6f,0x3,0x66,0x75,0x7f,0xe,0x1b,0xd4,0xd5,0x49,0x56,0x77,0xc1,0x5c,0xee,0xbb,0xf3,0xf7,0xaf,0x5,0xc8,0x30,0x0,0xf0,0x49,0x33,0x9a,0xa8,0x83,0x7,0x67,0x8f,0xab,0x5,0x4a,0xb1,0x92,0x34,0x2b,0x97,0xb1,0x8f,0xa3,0x86,0x81,0x32,0x2e,0x9c,0x61,0x4f,0xcd,0x70,0x10,0x3d,0xdd,0xd2,0x3,0x32,0x8c,0x69,0x76,0x63,0xec,0xdf,0xbe,0x52,0x6d,0x85,0x4c,0x47,0x95,0xc5,0x3e,0x23,0x3c,0x7e,0xf3,0xfb,0xa3,0x92,0xac,0xf6,0x69,0xcd,0xcd,0x19,0x83,0xc,0xd3,0xfa,0xfa,0xd9,0x1f,0xb,0x57,0x4c,0x9f,0x56,0x21,0x75,0x90,0xae,0xdd,0x74,0x88,0x15,0xa0,0x60,0x84,0x25,0x8d,0x4a,0xb5,0x2f,0x2a,0xc8,0x90,0x77,0x1c,0x67,0x7,0x24,0x99,0xd9,0xc2,0x3b,0x8,0xcd,0x50,0xa1,0x7d,0x3f,0x99,0xc2,0x61,0xbb,0xc2,0xda,0xf6,0xdc,0x8b,0xd7,0x4c,0x2,0x21,0x4e,0xdc,0xfa,0x19,0xf0,0x9a,0x88,0x41,0x98,0x65,0xe,0x88,0xfa,0xf9,0xfa,0xb3,0x5b,0x64,0xcc,0x90,0x5a,0x7d,0xad,0xd0,0x9b,0x10,0xfe,0xe3,0x69,0x53,0xdc,0xf1,0x8b,0x98,0xcf,0xa6,0x5d,0x13,0x85,0x37,0x87,0x71,0x1c,0xf4,0xa4,0xe,0x85,0x3e,0xd4,0xcb,0xb4,0x1b,0x6,0x55,0xed,0xa0,0x74,0x75,0xf0,0xbe,0x68,0x22,0x5a,0x13,0x5e,0x9f,0xa7,0xca,0x8e,0x89,0x14,0xb2,0xb,0xad,0xe6,0xc4,0x6b,0x67,0x66,0x6c,0x1c,0xa9,0xa3,0x61,0xb3,0x1a,0xc7,0x8,0xcc,0x2c,0x21,0x3f,0xef,0x70,0x81,0xa2,0xd3,0x37,0x20,0xe8,0xc0,0xf4,0x8a,0xe0,0x70,0xa0,0xfe,0xaf,0xd,0x1d,0x6,0xd6,0x1c,0x8a,0xcc,0xdb,0xdf,0x95,0xa7,0xd0,0xb2,0xf8,0x77,0x54,0xfd,0x79,0x2f,0xf7,0xb0,0xdd,0x7f,0x2d,0xb,0x45,0xe,0x64,0xa8,0x4b,0x7e,0xed,0xcd,0xab,0x8c,0x4a,0x97,0xd1,0xee,0x4c,0xce,0x10,0xb9,0xe9,0x7d,0xb8,0xfd,0x3d,0x88,0x44,0xad,0x56,0x7d,0x23,0xfc,0xd2,0x5d,0x98,0xb4,0xf3,0x73,0xba,0x53,0x6f,0xae,0x17,0xd9,0xf8,0x83,0xa9,0x36,0xa4,0x2f,0x62,0x28,0x32,0x93,0x3,0x40,0x13,0x66,0x55,0x5b,0x75,0xc7,0xe,0xda,0x5c,0xa8,0x84,0x3c,0xf5,0xa1,0x22,0xdd,0xc,0x9d,0x80,0xa9,0xb,0xf9,0x25,0x67,0x60,0x8b,0xb4,0xd8,0x63,0x66,0x8,0xe6,0x58,0x68,0x38,0x5f,0xfa,0x41,0xc7,0x7c,0x5a,0xa1,0xf9,0x64,0x3,0x5f,0x63,0xf2,0xb8,0xc5,0xf3,0x2d,0x15,0xec,0x54,0x41,0x66,0x50,0x39,0x69,0xe5,0xc2,0x45,0xd1,0x51,0xf0,0x6a,0xbf,0x0,0xcd,0x72,0x42,0x9d,0xe1,0x9e,0x7,0x63,0xc4,0x1e,0x4,0x30,0xe7,0x92,0xb2,0xa8,0x95,0xc2,0x44,0x59,0x26,0x54,0x7,0x12,0x66,0xae,0x70,0x92,0xf,0x7f,0x9e,0xf,0x30,0xf5,0xab,0xf3,0x24,0xc4,0x62,0xe4,0xb3,0xd6,0xfe,0xf6,0x95,0x6,0x2,0xfb,0x13,0x6f,0x31,0x7,0x5c,0x41,0x49,0x59,0x9f,0xe4,0xc8,0x7a,0x4a,0xb9,0xa9,0x99,0xb5,0xb9,0xc,0x39,0x6c,0xea,0x56,0x85,0x8d,0x53,0x2f,0xb3,0xcc,0x6e,0x22,0xd0,0xd2,0x81,0x72,0x9a,0x63,0x28,0x54,0x77,0x92,0x42,0xeb,0x6d,0x77,0x7f,0x44,0x6c,0x54,0x9b,0xad,0xb8,0xa9,0xfe,0xa2,0x60,0x6d,0xe7,0x94,0xad,0xf6,0x4b,0x46,0x7b,0x4c,0x41,0x42,0x10,0x9d,0xe3,0x4c,0xfc,0x3,0xd4,0x9d,0x8e,0x50,0x24,0x50,0xea,0x1b,0x13,0x9c,0x2c,0x7f,0x87,0x34,0xcc,0x42,0x51,0xca,0xa2,0x88,0x5f,0xac,0x75,0xe4,0x7e,0x5b,0x1b,0x2c,0x49,0x77,0xed,0xba,0x24,0xf0,0x4c,0x18,0x7d,0x61,0xff,0x1f,0x45,0xbc,0xc0,0x1a,0x5c,0xe7,0x24,0x1b,0xa8,0x17,0xf4,0x67,0x91,0x66,0x32,0xc8,0x4d,0x9f,0xfa,0x9a,0x48,0xdc,0xe3,0xd3,0xe0,0x39,0x6,0x30,0xe4,0xe1,0xed,0x43,0x22,0xd7,0xe1,0xaf,0x90,0xc6,0x94,0x3f,0x7,0x16,0xa8,0xde,0x81,0x7a,0x7,0xb5,0xc5,0xc5,0x2b,0x3a,0x54,0x44,0x96,0xaf,0x54,0xf3,0x52,0xdb,0xe2,0x30,0x18,0xc0,0x93,0x12,0xdc,0xe3,0xe0,0xbe,0x3a,0x7d,0x51,0xd2,0x12,0x7,0x41,0x77,0xc7,0x68,0x6e,0xc8,0x5,0x4f,0x5a,0xdc,0x47,0xd4,0x3b,0x95,0xa2,0x5,0x75,0xa6,0x86,0xaa,0x34,0x68,0x27,0x9c,0xeb,0xf1,0x23,0xfd,0xf1,0x2d,0xa,0xce,0x53,0xd6,0xc,0x5a,0xa8,0x3f,0x21,0xcb,0xe3,0xd6,0x8b,0x0,0x51,0xf0,0x7c,0x16,0xbb,0xb6,0x34,0x98,0xec,0x14,0xdd,0xfe,0x32,0x5e,0x9,0x8a,0x3d,0x1b,0x47,0xd4,0xf,0x6c,0x49,0x63,0xb2,0x65,0xd,0x95,0xd1,0x84,0xed,0x44,0xab,0x9b,0xa0,0xc2,0x67,0x97,0x38,0x48,0xa1,0x54,0xcc,0x79,0x83,0x4c,0x6b,0xcb,0xac,0x68,0x9b,0xa3,0x7e,0x5e,0xb0,0xa0,0xf9,0xd5,0xca,0x75,0x35,0x61,0x31,0x2a,0x18,0xf5,0x1c,0x3d,0x36,0x42,0x36,0xc9,0x50,0xc9,0x89,0x81,0xd9,0x2c,0xd,0x70,0x82,0xf9,0xdf,0xd5,0xe8,0x8,0x3,0x71,0xb4,0x21,0xd7,0xd4,0xb0,0x26,0x86,0x2e,0x9e,0x1e,0x30,0xbf,0xe1,0x0,0x96,0x9,0x8c,0xf1,0x90,0x25,0x77,0x17,0xf0,0x60,0xce,0xa6,0x4e,0x8f,0x1d,0xc8,0x85,0xc5,0xbb,0xaf,0x58,0x87,0xe1,0x2c,0x9a,0x20,0x5b,0x99,0x4d,0x33,0xc2,0x60,0x9b,0x1c,0xc6,0xa5,0x6c,0x59,0xa9,0xfc,0x2d,0xb5,0xbb,0xea,0x2d,0x7b,0x26,0xaa,0x5,0xbb,0x5b,0xd,0xa8,0xd4,0xc3,0xdb,0xfe,0x14,0x46,0x4a,0x2c,0xec,0x58,0x44,0x29,0x6b,0xff,0x8d,0xc4,0x2e,0xa1,0x74,0x25,0xef,0x3,0xc5,0x1,0xbb,0x9d,0x66,0x3b,0xdb,0x11,0x42,0xfa,0x3f,0x90,0xb2,0x92,0x83,0xc,0x2f,0x26,0x71,0x5d,0xb9,0x7e,0x3c,0xf7,0xea,0x55,0xda,0x36,0xae,0x4d,0xa4,0xe9,0x1c,0x70,0x7c,0xa1,0x9d,0x10,0x3,0xcd,0x37,0xa7,0x9,0xcd,0x12,0xdf,0x7b,0x79,0x7c,0xe3,0xbb,0x1,0xd9,0x8,0x32,0x4a,0xcc,0xa1,0xc4,0x7b,0x91,0x61,0xd9,0xa8,0x49,0xf,0xb3,0x4,0x30,0x4e,0xdb,0x51,0x1,0xd8,0xe4,0xc0,0x3d,0x97,0x8d,0x1d,0x24,0xb,0xa7,0xbd,0x86,0x14,0xed,0xdf,0x9f,0x2e,0x70,0x10,0x1,0xfa,0xa4,0xb1,0xe4,0x86,0x5b,0x5,0xe3,0x29,0xfa,0x16,0xc4,0x62,0x4c,0x15,0xbb,0x99,0x2f,0xa,0xb3,0x28,0x18,0x33,0x97,0xb3,0x44,0x80,0x41,0x17,0x51,0xe9,0xd9,0xd0,0xf6,0xd0,0x82,0x33,0xeb,0x15,0xaf,0x4c,0x1d,0xab,0xc8,0xfa,0xb7,0xed,0x9b,0x46,0x8c,0xdb,0xd9,0xdc,0xc3,0x44,0x46,0x24,0xdd,0x8c,0xf,0xfb,0x36,0xf4,0xc1,0x21,0x1c,0xca,0x60,0x3c,0x17,0x3f,0x15,0x78,0xa8,0x12,0x88,0xc4,0x92,0xd8,0x6e,0x1,0x85,0xd6,0xc4,0x48,0xcf,0x65,0x18,0x24,0xf9,0x40,0xbd,0xf,0xc5,0xd0,0xc,0xbe,0x34,0xb2,0xe8,0xa8,0xa,0x57,0xe5,0xd6,0x97,0x8b,0x8,0x67,0x3b,0xa2,0xe6,0x1b,0x2e,0x6e,0x63,0x79,0xd2,0xa3,0xc8,0x67,0x8e,0x50,0xc7,0x9c,0x84,0x3c,0x54,0xff,0x40,0x2b,0xa2,0x75,0x1b,0x86,0xc7,0xfd,0x8,0x22,0x96,0xaf,0x78,0x38,0xe4,0xc9,0xb7,0xfb,0x12,0x53,0x4d,0xcd,0xda,0xf2,0x23,0xb7,0xe4,0xce,0xb0,0xea,0x9,0x9f,0x97,0x3b,0x12,0xc3,0xea,0x95,0x47,0x1e,0x92,0x5e,0x88,0xd2,0xf2,0xa1,0xa,0x61,0x2c,0xd5,0x52,0xf4,0x6b,0x8d,0x80,0x8b,0xb3,0x87,0x33,0xde,0x3b,0xb8,0x5a,0xb1,0x88,0xd5,0x15,0x9e,0x6d,0x3c,0x46,0x6e,0x59,0xd8,0xf6,0x58,0x28,0x90,0xa6,0x63,0xa8,0xdf,0x7b,0xc3,0xd,0x2b,0x23,0x79,0x9a,0xb,0x21,0x9b,0x14,0x35,0xe2,0xe4,0x39,0xab,0x14,0xd2,0x8,0x53,0xff,0xd1,0xb8,0x8,0xb4,0xad,0x87,0xd9,0x54,0xa2,0x52,0x47,0x4,0x56,0xef,0x6b,0x4c,0x57,0x9a,0xa5,0x71,0xe5,0x5f,0x33,0xa4,0x22,0x44,0x94,0x6d,0xf6,0x8d,0xf4,0xfa,0xee,0x93,0x80,0x49,0x77,0x26,0xed,0xf1,0xe1,0xb0,0xfa,0xa8,0x84,0xdc,0x80,0x35,0x83,0x55,0xca,0x18,0xd1,0x5a,0xc1,0xac,0x74,0x44,0x78,0x0,0x51,0xd6,0x6c,0xf7,0xdc,0x0,0x8c,0xdb,0x1a,0x29,0xea,0xf0,0xcd,0xd1,0x4a,0xf1,0xb1,0xd6,0x4e,0xf5,0x6,0xb6,0xba,0xff,0x17,0xb5,0xc3,0x4d,0x92,0xb1,0x52,0x83,0xb7,0x9d,0x55,0x82,0x1a,0x91,0xf7,0xb9,0x58,0x4a,0xdd,0x54,0xc4,0x42,0xf9,0xd1,0x11,0x69,0xdb,0xad,0xff,0x1b,0x42,0x71,0xf1,0x76,0x57,0xc1,0x46,0x78,0x78,0x19,0x88,0x37,0x54,0x53,0x73,0xdd,0x95,0xf7,0xd2,0x3f,0xd6,0x2,0xd8,0xcf,0x82,0x71,0xa7,0x42,0x54,0xbe,0x3d,0xf3,0x2e,0xe1,0x9d,0x1b,0x9a,0x39,0xa0,0x63,0x9a,0x52,0xdb,0xf5,0x22,0x60,0x9f,0x37,0xa2,0xc5,0x99,0xa8,0x63,0x3c,0xa9,0x9a,0x2e,0x37,0xad,0xbc,0x3d,0x18,0x9a,0x53,0xed,0xe0,0x7f,0xcf,0x8b,0x7b,0x46,0x74,0xd3,0xef,0x6e,0x49,0x20,0x81,0x61,0x12,0x7c,0x16,0xec,0xc6,0x9c,0x2,0x63,0xd3,0xa5,0x25,0xba,0x5,0x34,0xb,0x56,0x91,0x63,0x82,0x5,0xe7,0x53,0x13,0x4d,0xf6,0x1f,0x6d,0xd6,0xd4,0x13,0xe7,0x3b,0xc8,0x48,0xd8,0xc2,0x81,0xc9,0x80,0x88,0x73,0x6d,0x27,0x8b,0x34,0x7e,0xf5,0xf4,0x94,0xc0,0x39,0x70,0x9c,0xad,0x72,0x87,0xf3,0xb9,0x47,0x7,0x43,0xd6,0xde,0x37,0xac,0x5d,0x35,0x6a,0xdc,0x28,0x29,0x80,0xb4,0xe,0x1c,0x16,0x6d,0x16,0x8e,0xe4,0x19,0x33,0x1a,0xf4,0xda,0x78,0xc1,0x5d,0xea,0xb4,0x3c,0x4e,0x20,0x3,0x45,0xc,0x89,0x45,0x91,0x6,0xc9,0x56,0xad,0xfc,0x94,0x0,0x5a,0xd8,0xf7,0xd5,0xcd,0xfd,0x1f,0xeb,0x41,0xd8,0xce,0x72,0xf8,0xde,0x24,0xa8,0x9b,0x11,0x40,0xb2,0xf0,0x77,0x2c,0x6f,0x80,0x7e,0xbc,0xac,0x66,0xf6,0xc7,0x2c,0x89,0xfc,0x1a,0xb9,0xc4,0x47,0x7b,0x68,0xc1,0xb8,0x22,0x89,0xee,0x24,0x6e,0xc,0x88,0xd,0xa3,0x64,0x87,0xb6,0x43,0x68,0x5f,0xe2,0x8,0x3,0xf4,0x82,0xe5,0x9f,0xd1,0x20,0x9f,0xf1,0xd5,0xc1,0x40,0x7e,0x55,0xf0,0xcf,0xa8,0x12,0x4f,0x55,0x55,0x55,0xe5,0x7f,0x79,0x5c,0x9b,0x48,0x22,0x59,0xe2,0xfd,0xed,0x33,0x7c,0x37,0x96,0x40,0x30,0xf9,0x7,0x2b,0xaf,0x28,0xe3,0xe4,0xbf,0x95,0xc7,0xed,0xbc,0x2a,0xa9,0xa2,0xcc,0x80,0xfe,0x84,0x99,0xc,0x32,0xa0,0x8,0x53,0x94,0xe5,0x71,0x13,0x7f,0x62,0x81,0xca,0x1c,0x4d,0xdf,0xa1,0x2b,0xab,0xa4,0x8,0x6c,0x62,0x4d,0xb7,0xdb,0x37,0xdb,0xd6,0xb9,0x43,0x7a,0xe8,0x45,0x65,0x24,0x78,0x0,0x50,0x8f,0xb,0x16,0x8c,0xd2,0x18,0xe8,0x6,0xad,0xc8,0x25,0xfa,0x19,0xde,0x95,0xfe,0x77,0xce,0x2a,0x7c,0x57,0xd5,0x4f,0xa5,0x8c,0x0,0xa5,0xc1,0x9f,0x76,0xe1,0x0,0xa7,0x37,0xff,0x2d,0xe3,0xe4,0x6,0x3e,0xe3,0x8,0x44,0xf2,0xf1,0xbe,0x19,0xc0,0x75,0x2,0x1d,0xd3,0xd,0x90,0x85,0x55,0x50,0x26,0x14,0xc5,0xfa,0x25,0xf4,0x86,0xaf,0x46,0x20,0xed,0x7f,0x11,0x5d,0x6f,0x3,0x9f,0xfb,0xea,0xb,0x53,0xdb,0xf1,0x1a,0xf0,0x86,0xa,0xd1,0xf8,0x5c,0x5e,0x4c,0xc1,0x75,0xad,0xc3,0x7c,0x33,0x68,0x21,0x2,0xb2,0x25,0xa0,0x12,0x5d,0xcf,0x51,0x13,0x31,0x63,0x2d,0x21,0xee,0xbc,0x8c,0x3d,0x9d,0xf4,0xa9,0xd5,0x5d,0xc4,0xb4,0xe6,0xd8,0xd2,0xa8,0xbd,0x62,0xfb,0x45,0xe5,0xb5,0xdc,0x1b,0x62,0x2f,0x3a,0x1,0x21,0xc7,0x53,0x57,0x2c,0x1,0x92,0x12,0xe5,0xd5,0x9c,0xc8,0x4c,0xa7,0x3e,0xec,0x0,0x42,0xde,0xec,0x58,0x18,0xee,0xa3,0x11,0x62,0x86,0xc2,0xc9,0x2,0x7,0x25,0x2d,0xa8,0xc6,0xfa,0xea,0x15,0x7f,0x85,0xb4,0xfa,0x97,0xfc,0xc4,0xca,0x34,0xd4,0xa2,0xb,0x9c,0xd5,0x44,0xbe,0xe8,0x5a,0x88,0x44,0x8b,0x8d,0xb8,0x89,0x39,0x81,0x19,0x73,0xc3,0x8,0xf6,0xb4,0x41,0xd7,0xae,0xab,0xf7,0xf3,0xb4,0x90,0x32,0x83,0x75,0x97,0x46,0xf2,0xc3,0x45,0xfd,0x62,0x29,0xcd,0xde,0x29,0x29,0x81,0x8b,0x64,0xe4,0x1f,0x8d,0x6f,0x92,0x79,0x99,0xeb,0x63,0x47,0x1a,0x68,0x7,0x26,0xe3,0xdb,0x87,0x2f,0x93,0x50,0xda,0x62,0x12,0x22,0xed,0xf1,0x76,0x4e,0x2d,0x40,0x1e,0x8f,0x5b,0x67,0x6a,0xc0,0xf2,0x7d,0xfd,0xfb,0x4f,0x83,0x77,0x3f,0xf4,0xcd,0xb8,0xe,0x64,0x8,0xe3,0x2a,0x45,0x9b,0xdf,0x67,0x9d,0x75,0xe9,0x43,0x52,0x77,0xe0,0x4b,0xd4,0xd2,0x2c,0x48,0x54,0x1a,0x5a,0x27,0x2c,0xce,0xde,0x19,0x37,0x55,0xb4,0x11,0x65,0xca,0xf8,0xb9,0xfb,0xd9,0x9e,0x6c,0x1,0x69,0x1a,0xba,0x45,0xc,0x7,0x26,0x49,0xfe,0xb1,0xe9,0x5f,0x91,0x1f,0xb4,0x26,0x89,0xfe,0xbe,0x26,0x79,0xf0,0x25,0x49,0x75,0x17,0x5e,0x71,0xa6,0x62,0xb3,0x53,0x6,0x3d,0x5e,0xa5,0x49,0x48,0x26,0x3c,0xff,0x82,0xe2,0x8,0xe1,0x80,0x12,0xb6,0xf5,0x32,0xd3,0x64,0x0,0x65,0x57,0xc8,0x9c,0x4a,0xfd,0x63,0x5,0xad,0x36,0x45,0xf0,0xc4,0x92,0xa4,0xe,0x20,0xf3,0x2d,0x8f,0x90,0x63,0xdd,0x55,0x78,0xce,0x54,0x30,0x8b,0x6c,0x4,0x9,0xf7,0x12,0xd6,0xff,0x7a,0x20,0x5e,0x85,0xe0,0x62,0x45,0xf9,0x2d,0xc5,0xb0,0x0,0x5a,0xda,0x3f,0x13,0x37,0x8e,0x5b,0x46,0x52,0x41,0xc7,0x17,0x92,0x93,0xb3,0x1,0xf9,0x7c,0x9c,0xef,0x83,0x27,0xec,0xc9,0x32,0x65,0xc5,0xf,0x82,0x34,0x6d,0x49,0xa8,0x34,0xf2,0xe8,0xbc,0x54,0x13,0x8f,0x98,0x77,0xd7,0x5c,0xd2,0x3d,0x70,0xff,0xb8,0x75,0x20,0x19,0x4c,0x51,0x85,0x25,0x11,0x5c,0x30,0x8a,0x3,0x4b,0xa4,0xcc,0x50,0x50,0xe2,0x80,0x19,0x5f,0x19,0xa2,0x44,0x8d,0x8e,0xbf,0x22,0x24,0x62,0x68,0x3e,0x22,0xc6,0x4c,0x0,0xe5,0x5,0x3f,0xa5,0xd9,0x59,0x5f,0x6e,0xd7,0x72,0x64,0xd5,0xa3,0x3f,0xb9,0x67,0xf7,0x37,0x9e,0x41,0x1c,0x5a,0x56,0x20,0xf8,0x7c,0xd9,0xbe,0x94,0xd2,0xdf,0x7d,0x60,0x84,0xba,0xb0,0x3c,0x91,0xdd,0x75,0x8d,0xe4,0x2d,0x47,0xae,0x30,0xda,0xee,0xc6,0x3d,0x8,0x8d,0xca,0xe5,0xb5,0xd5,0xbd,0x96,0x22,0xa,0xf7,0xd1,0x5b,0x21,0xe2,0x2,0x7f,0x49,0x19,0x5,0x2e,0x45,0x30,0xa0,0xf0,0xcb,0x47,0x22,0x78,0xb8,0xf0,0x69,0x82,0xbc,0xd0,0x26,0xf7,0x32,0x34,0x69,0xd7,0x52,0x3,0x5c,0x8f,0xfd,0x84,0xff,0xc5,0x83,0x6f,0xcb,0x20,0xed,0x34,0x10,0xdf,0xaa,0xe0,0x88,0xc0,0x2a,0xa0,0x9d,0x46,0x32,0x78,0xf8,0x4,0x76,0x18,0x2d,0x6a,0x7b,0x6,0xc1,0xf8,0x1e,0xe6,0x86,0x8e,0xe3,0x64,0x8e,0x3d,0x63,0x92,0x99,0x84,0xbc,0xed,0xe1,0x2e,0x75,0x1c,0xed,0x41,0xa1,0xb0,0x34,0x45,0xba,0x9e,0xfe,0x6d,0xa2,0x33,0xaf,0x10,0x84,0x94,0xec,0xbd,0xc5,0x3,0x0,0x82,0x6d,0x48,0x6b,0xdc,0xe9,0x46,0x23,0xc6,0xea,0x56,0xa6,0x43,0x0,0x1c,0x53,0xd9,0xd3,0x7c,0x2,0xba,0xf5,0x3a,0x92,0x4e,0x7d,0xac,0xbe,0x72,0xec,0x68,0xaf,0xb3,0x7c,0x47,0xd5,0x62,0x8b,0x4b,0x4d,0x8a,0xe9,0x75,0x5,0x6c,0xb7,0xc9,0x9a,0x41,0xc2,0xcb,0x2e,0xc4,0xe0,0xa0,0xf8,0x44,0xfb,0x9e,0x62,0x73,0xdd,0x66,0xea,0xc5,0x49,0xef,0x1f,0xdf,0x58,0xa0,0xb3,0x79,0x6d,0x9a,0xba,0x8e,0x4c,0xb1,0x64,0x90,0xc,0x59,0x87,0x5b,0xe6,0x32,0x11,0x6f,0x9a,0x70,0xe9,0x98,0x20,0x89,0x7,0xac,0x8a,0x62,0x52,0xeb,0xb7,0x51,0xd8,0x5a,0xc1,0x6c,0xc1,0x7d,0xdd,0x62,0x8e,0xcd,0x5f,0x47,0xd1,0xa4,0x2e,0x5d,0x98,0x78,0x98,0x69,0x32,0x48,0xb2,0x13,0x97,0x5f,0x72,0xcf,0x3e,0x6,0x95,0x13,0x14,0xf3,0x82,0xf,0xa7,0xf9,0xd5,0x29,0x2d,0xef,0x44,0xef,0x29,0xe6,0x32,0xdd,0x7f,0xa2,0x46,0x7d,0xc4,0xa4,0x5b,0xc1,0x90,0xd2,0xbb,0xf8,0xdb,0x5a,0x4e,0x44,0x70,0x42,0xa7,0x8f,0x69,0x84,0x82,0x33,0x4f,0xbb,0x73,0xd,0xae,0x98,0x52,0x5f,0xba,0x48,0x40,0x23,0x1d,0x13,0x98,0xed,0xeb,0xf2,0x3f,0xd2,0x2d,0x62,0xa5,0x76,0x48,0xb,0x5f,0xdf,0xe1,0x5b,0xe7,0x65,0x11,0x98,0xed,0x8b,0x32,0x44,0x22,0xee,0xff,0x57,0x5f,0xeb,0x46,0xc8,0x1c,0xff,0x48,0x40,0x51,0x54,0x65,0xb9,0xc7,0xa5,0xf3,0x84,0xa4,0xd7,0x58,0x74,0x65,0xad,0x25,0xc5,0xa1,0x89,0x45,0x74,0x29,0x8d,0x31,0x5d,0x48,0x56,0x2f,0xa,0x4d,0x0,0x32,0x83,0x9f,0x69,0xc9,0x87,0x65,0x63,0xb3,0xe5,0xa8,0xf7,0xab,0xde,0x5e,0xd3,0x48,0x4a,0xe9,0x1e,0x1c,0xff,0xce,0xe2,0x3f,0x34,0x55,0xb1,0xa0,0x7f,0x3c,0xf6,0xb2,0x86,0x21,0x2b,0xff,0x92,0x18,0xab,0x79,0xea,0x9a,0x1f,0xda,0xd4,0x16,0xfc,0x14,0x29,0xca,0x95,0x7d,0xca,0x4b,0x1e,0xc,0x78,0x20,0x9e,0x88,0x24,0xb2,0xb5,0x6a,0xd5,0x43,0x6b,0x87,0x57,0x39,0x83,0xad,0x38,0x74,0x97,0x19,0x69,0x3,0x2d,0x78,0xcc,0x6f,0xe0,0xfc,0x95,0xda,0x53,0x5,0x9e,0xed,0x8b,0x75,0x4b,0x84,0xdf,0xf1,0xeb,0x7d,0x32,0xb9,0xe,0xb1,0x91,0x8d,0x45,0xc5,0xb0,0x37,0xe5,0x6b,0x50,0xd2,0x9,0x99,0xd5,0x27,0xfc,0x27,0xf4,0x68,0x29,0x8c,0xfe,0xfb,0xc6,0x46,0xaf,0x94,0x11,0xb7,0x93,0xc4,0x12,0xdb,0xe4,0xcd,0x3e,0x8e,0x7b,0xa,0x84,0xae,0x3,0xcd,0x2e,0x32,0x54,0xee,0x2f,0x71,0x5a,0xcc,0x39,0x5a,0x14,0xec,0x50,0x42,0x10,0x92,0x34,0x19,0x53,0xbe,0xf1,0x48,0x99,0x45,0x34,0xcc,0x65,0xdb,0x2e,0x55,0xa1,0xd1,0x8a,0xbb,0x58,0x80,0xda,0xdc,0xcc,0x82,0x3b,0xd6,0xfc,0x84,0xf9,0xf4,0x5,0x83,0xa1,0xa1,0x6f,0x80,0xdb,0x76,0xf,0xc6,0xa7,0xb0,0x67,0xe,0xd3,0xc0,0xeb,0xde,0xa,0x7b,0x8e,0x23,0xce,0x80,0x45,0x29,0x45,0xcf,0x8c,0x57,0x76,0x28,0xbb,0x5a,0x9c,0x7,0x34,0x0,0x15,0xfd,0x28,0xf3,0xee,0x7d,0x41,0x10,0x40,0xde,0xf4,0xc2,0xc9,0x18,0x6,0x47,0xee,0x45,0x33,0xbe,0x90,0x40,0xee,0x12,0xc6,0x26,0x80,0xa1,0xd5,0xc9,0xe7,0xec,0x5,0x0,0x27,0xaf,0x35,0x76,0x26,0xd8,0xc8,0x8b,0x8,0x87,0xf5,0x14,0x11,0xae,0x8a,0x98,0x59,0x2a,0xfb,0xd6,0xfb,0x1e,0x7b,0x18,0xcc,0x56,0xd6,0x3c,0xb9,0x37,0x7c,0x7b,0xa0,0x61,0xf7,0x6,0x3c,0x26,0x53,0x45,0x99,0xe7,0x3a,0x61,0xc8,0xf0,0xa4,0xde,0xfd,0xf,0x5f,0xe1,0x83,0x10,0x92,0x44,0xc,0x79,0xf5,0x33,0xd,0x8,0xdb,0xd,0x24,0xe3,0x8,0x7c,0xec,0xeb,0xd3,0xff,0x1b,0x72,0xbc,0x25,0x82,0xe3,0x86,0x43,0x6f,0x53,0xbe,0xc7,0x2c,0xff,0x90,0x7d,0xe2,0x18,0x36,0x2f,0x2f,0x11,0x1,0xcb,0x4d,0x92,0x8a,0xbf,0x12,0xd0,0xbb,0x25,0xf0,0xac,0x74,0x92,0xc8,0x5a,0x79,0xd9,0x8c,0x16,0x12,0x39,0x50,0xff,0x54,0x39,0xac,0x5e,0xf3,0x90,0xfa,0xb9,0xee,0x14,0x71,0x97,0xa8,0xb6,0xf3,0xc0,0x88,0xd6,0x29,0xc5,0x67,0x1a,0xcc,0x83,0x86,0x82,0x5b,0xf9,0x90,0xba,0x6,0xde,0xd0,0x1c,0xe2,0xec,0xe2,0x97,0x98,0x37,0xba,0x88,0x79,0x7a,0x51,0x47,0x2f,0x2e,0xdf,0xc1,0xc7,0xc8,0x12,0x94,0xc7,0x37,0x68,0x72,0xd4,0xf9,0xb4,0xf1,0xb6,0x99,0xba,0xa2,0xea,0xbd,0x9f,0xc0,0x75,0xfb,0xd8,0x65,0x76,0x61,0xdd,0x45,0x49,0x1a,0xf4,0x3c,0xc,0xe6,0x5a,0x96,0x57,0x82,0x49,0xe9,0xda,0x2,0xe6,0xcc,0xc,0x10,0xd4,0x76,0x43,0x3e,0x5b,0x4c,0x70,0xeb,0x59,0xcb,0x7e,0x33,0x97,0xd7,0x3,0xca,0x78,0xad,0xc7,0x97,0xe3,0x7b,0xf7,0xf4,0xf9,0x9b,0x75,0x7b,0x27,0xf2,0xd0,0xd4,0x98,0xa3,0x1d,0x1b,0xc4,0x43,0xa2,0x2a,0x52,0x56,0xb1,0x93,0xa0,0x23,0x95,0xba,0x8d,0x54,0x42,0xe1,0xd6,0x4f,0x63,0xb2,0x14,0xbb,0x96,0x6a,0xa1,0xd9,0x95,0xb,0xc6,0xfe,0xd3,0x91,0x45,0x5d,0x7,0x4c,0xe1,0xb6,0x81,0x80,0xc3,0xd9,0xe,0xb2,0x25,0x75,0xc3,0xfc,0x70,0x52,0xfd,0x2c,0x80,0x8c,0xc0,0x8a,0x97,0xc7,0x99,0xa,0x50,0xa1,0xc6,0x9b,0x19,0x42,0xda,0x3a,0xd0,0xca,0x64,0x2,0xe6,0xa6,0x51,0xb,0xaf,0x1d,0x27,0x27,0xe5,0xab,0x86,0x80,0xcc,0x4d,0x22,0x1c,0xaf,0x9d,0x3a,0x6f,0x14,0xaf,0x3d,0xbd,0x4a,0x7e,0xb8,0xc1,0x13,0x58,0xb6,0x4,0x25,0x61,0x2f,0xd2,0xa,0xe5,0x47,0x31,0x13,0xf1,0x52,0xea,0xe4,0x84,0xf1,0x46,0xa9,0x29,0xea,0x2a,0x63,0xf4,0x37,0xd0,0xa1,0x3e,0xcb,0x33,0x55,0xba,0xee,0x2f,0xbb,0x2a,0x80,0x30,0x1f,0xe,0x11,0x5d,0xa1,0xdc,0xa0,0x88,0x53,0x3c,0x28,0x68,0xd6,0x93,0x25,0x2d,0x5f,0xf6,0xc0,0xa6,0xd2,0xae,0xcf,0xb,0x3c,0xaa,0xa1,0x7,0x6a,0x5f,0x20,0x1,0x7f,0x2f,0x8a,0x3e,0xa5,0x7,0xef,0x52,0x14,0xbc,0xa8,0x1,0x13,0xba,0xc8,0xc4,0xd7,0x1e,0x7a,0xc9,0x4d,0xfd,0xbb,0xfc,0x38,0x14,0x8d,0x72,0xb4,0x2,0x1e,0xf0,0xfc,0x83,0xaf,0x8b,0x2b,0xd6,0x50,0x97,0xbc,0x1c,0x49,0xf2,0x21,0xa7,0xac,0xd5,0x4e,0x70,0x3,0x0,0x0,0xf6,0x26,0x6c,0x67,0x82,0x60,0x4a,0x33,0x36,0x3e,0xa3,0x3b,0x7b,0x83,0x1a,0xb8,0x82,0xa2,0x90,0xd2,0x2e,0x53,0x4b,0xa8,0xa5,0x21,0xbe,0x5e,0x9e,0xaf,0xdd,0xe6,0x3e,0xe0,0x0,0xb2,0x97,0x49,0x30,0xaa,0xad,0xff,0x22,0x19,0x1a,0xb3,0x8b,0x5c,0xf,0x44,0x50,0xa0,0x4,0xec,0x6c,0x41,0x82,0xf5,0x4a,0xfc,0x1c,0x8,0xb9,0x7d,0xfc,0x90,0x54,0xe8,0x7,0x9d,0xe8,0x5b,0x95,0x3d,0x62,0xc5,0x92,0xbf,0xfc,0xdf,0xa1,0xaf,0x24,0xfb,0xbb,0x2c,0xd3,0xdf,0xaf,0xc8,0x40,0xcf,0x82,0xb1,0x3e,0x53,0x99,0x83,0x4e,0x8e,0xf8,0xff,0xa0,0x1e,0x83,0xcc,0xe3,0x63,0x1d,0x82,0x1,0x7c,0x46,0x90,0xe3,0x4,0x74,0x10,0xb0,0x51,0xd5,0x8d,0x3,0x64,0x29,0x63,0xae,0x20,0x33,0x9b,0x2c,0xe2,0x69,0x22,0x87,0x13,0x83,0x8f,0x57,0x86,0xb9,0xed,0xe5,0x92,0x85,0xc4,0xb2,0xb3,0xa7,0xd5,0x6a,0x2f,0xc2,0x9b,0x4c,0x96,0x24,0x18,0xc6,0x8d,0x13,0xfa,0x75,0xa4,0x2f,0x5f,0xd5,0x97,0xb4,0xf5,0x91,0x75,0x96,0x2f,0x70,0x5a,0x9,0x8e,0xa9,0xe9,0xca,0x96,0xae,0xe2,0xbd,0x72,0xc3,0x96,0xa,0x7d,0x35,0x4f,0x77,0x51,0x54,0xcf,0xa2,0xb8,0x8b,0x83,0x9d,0x9,0xb2,0xbc,0xa2,0x55,0x1f,0x99,0xea,0x17,0xc5,0x1b,0x9d,0xfc,0x2c,0x8f,0x99,0xb9,0x4a,0x7,0x5e,0x2b,0x14,0xaa,0x82,0x10,0xe6,0x64,0x13,0x76,0x2a,0x98,0x67,0x8d,0xae,0x3,0x9a,0x36,0xd,0xf0,0x17,0x65,0xcd,0x78,0x0,0xde,0xc6,0x26,0x84,0x24,0x29,0xfd,0x3c,0x76,0x12,0x6c,0x73,0xcc,0x5b,0x64,0xae,0x61,0xdc,0x98,0x4a,0x14,0x78,0xf7,0x92,0xc4,0x98,0xc5,0x37,0x14,0x6,0x50,0x61,0xe5,0x24,0x36,0xe9,0x66,0x50,0xee,0x5b,0xb3,0x9,0xaf,0x49,0xfe,0x3a,0x98,0xb,0x49,0xad,0x44,0x9a,0xe3,0x42,0x28,0x3,0x87,0xf9,0x25,0x3,0xed,0xf8,0x4e,0x3b,0x94,0x66,0x26,0x74,0xd2,0x93,0xe5,0x97,0x55,0x31,0x33,0xc5,0x2d,0x7c,0x2d,0x8e,0x5f,0x2b,0x9b,0x4c,0x13,0x3b,0x29,0x10,0x22,0x3c,0x88,0x63,0x94,0xda,0xca,0x2a,0x52,0xa4,0x23,0x11,0x56,0xf0,0x51,0x2a,0x8c,0xe,0x3f,0xa2,0xcc,0xe2,0x94,0x4e,0x95,0x7a,0x1d,0xbd,0xb8,0x32,0xc9,0xdc,0x10,0x35,0xa4,0xc7,0x53,0xc2,0x1a,0x4,0x1f,0x38,0x4a,0x6b,0xed,0x60,0x61,0x9b,0xbe,0xb4,0x2a,0x2c,0xe0,0x97,0xad,0x6b,0xe3,0xe9,0xc7,0x69,0x6b,0xe8,0xf9,0x69,0xd5,0xa0,0x85,0xb7,0x9a,0x2a,0xfa,0x53,0xcb,0x89,0x98,0x78,0xeb,0x4a,0xad,0x9f,0xb9,0x23,0x9a,0x80,0x29,0xa5,0x70,0x55,0x73,0x67,0x2b,0xeb,0xac,0x97,0xb6,0x6c,0x80,0x16,0x49,0x2,0x57,0x1b,0x36,0x27,0xd8,0xe1,0x3,0x5a,0x2d,0xf7,0x14,0x92,0x21,0x4,0xbe,0x23,0x1a,0xf9,0x28,0x56,0x7c,0x9e,0xdf,0x38,0xe2,0x96,0x60,0xb1,0x90,0x1d,0xb9,0xed,0xc5,0x2,0xcc,0x45,0x6f,0xb3,0x53,0xf2,0x63,0x9a,0xdf,0x46,0x1c,0x1c,0x71,0xc7,0xc1,0x8a,0x56,0x2d,0x66,0xd,0x91,0xc5,0x58,0xa4,0x3,0xda,0x96,0x19,0xb1,0xa3,0x35,0xa,0x86,0x0,0xad,0xa4,0x3c,0x27,0x7,0xe1,0xf5,0x51,0x8a,0x1b,0x3,0xd6,0xf3,0x53,0xe3,0x65,0x43,0xf0,0x2a,0xf3,0xa0,0xbb,0x5f,0xe9,0x2f,0x4a,0x59,0x87,0xb5,0x6a,0x9c,0x1,0xed,0xc5,0x6c,0xea,0x46,0xd8,0x74,0x3e,0x34,0x75,0x1d,0x7b,0x27,0x5b,0xbf,0xc7,0x47,0x4a,0x2,0xc,0xe7,0xba,0x6,0xfd,0xe5,0x4e,0x54,0x7c,0xe6,0x65,0xcd,0x13,0x62,0x5b,0xba,0x12,0xa,0xfe,0x30,0x7b,0x2e,0x9,0x48,0x17,0xe7,0xf4,0xc6,0x6d,0x9,0x36,0xb,0x52,0x64,0x7a,0xc3,0x3e,0x61,0x20,0x45,0x4f,0xa9,0xe1,0x5b,0xc5,0xaf,0xf3,0xf3,0x16,0x46,0x2e,0x94,0x62,0x8e,0xaa,0x8f,0x5f,0x27,0xb3,0x27,0xcb,0xf,0xfc,0xde,0xe4,0x98,0x98,0xdf,0x7a,0x3e,0xde,0xdc,0xae,0x87,0x2e,0xd7,0x3,0x39,0x83,0x9b,0x69,0x37,0x44,0xaf,0x5a,0x70,0xdb,0xf5,0xe1,0x63,0xec,0xbb,0xff,0x9a,0xa2,0x51,0x1a,0x2f,0x6d,0x99,0x46,0x8a,0x19,0xc4,0x95,0xd2,0x5f,0x57,0x28,0xc5,0xb1,0xa9,0x4f,0xd2,0x8a,0xe9,0x32,0x2f,0xfe,0x62,0x5,0x19,0x1e,0x38,0xc,0xe6,0x64,0x1d,0xee,0x1e,0x30,0x64,0x14,0x90,0x82,0xc1,0x9a,0x12,0x2f,0x51,0xd5,0x82,0x38,0x81,0xce,0x72,0xbe,0x35,0x36,0xd8,0xb5,0x5b,0xf5,0x69,0xe9,0x22,0xf1,0x94,0xff,0x21,0x4f,0x8c,0x83,0xe2,0xda,0x95,0x3d,0x3b,0x10,0x27,0x20,0x8d,0x58,0x6a,0xd6,0xc7,0xb7,0x70,0xff,0x47,0x3c,0x5e,0xff,0xad,0x9,0x9f,0x2a,0x3c,0x9f,0xb1,0xb2,0x66,0xb7,0x5e,0x8c,0x46,0x5f,0xac,0xce,0x89,0xdf,0x69,0x91,0x3d,0x8e,0xfe,0x59,0x6f,0x7f,0xc8,0x67,0xe4,0xf9,0xc1,0xac,0x48,0x1f,0xb9,0x97,0x8b,0x4d,0x22,0x38,0xdd,0x31,0xe8,0x33,0xb8,0x85,0x42,0xa0,0x91,0x1a,0x1d,0xf,0x40,0x8d,0x37,0x25,0xa0,0xc2,0xba,0xbf,0xaf,0x60,0x5b,0xb2,0x81,0xe4,0xb5,0x94,0xd0,0x51,0xe3,0xfe,0x7,0x91,0x7b,0xb4,0xa9,0x91,0x78,0x31,0x65,0x34,0xb4,0x2e,0xe6,0xd3,0xaf,0xcd,0x77,0x20,0xc,0xa2,0x2d,0x89,0xb2,0x55,0x6,0x2,0x76,0x93,0xec,0x37,0x2,0xbd,0x79,0x67,0x38,0x11,0x20,0x6d,0x8c,0x95,0xc7,0xda,0x76,0x66,0xf4,0xd4,0xd9,0xc9,0x9f,0xac,0x93,0xb2,0x16,0xeb,0xd7,0x6d,0x79,0x7e,0x5e,0x85,0x66,0xaa,0x1b,0x79,0xeb,0x77,0xdf,0xec,0x6,0xef,0xc7,0xc5,0x92,0xaa,0xc3,0x8,0xb3,0x7e,0x64,0x8f,0xe5,0xe,0x82,0x86,0x26,0xc9,0x1f,0xe7,0xb2,0x1,0xb5,0xfe,0xbd,0x21,0xa0,0x75,0x6c,0x4,0x15,0xd4,0x42,0x28,0x7c,0x8,0x86,0x86,0xe7,0x61,0x75,0xc,0xc9,0xa5,0x1c,0x1e,0x9c,0x5d,0x3e,0x6d,0xc6,0xb2,0x92,0x91,0xa4,0x76,0x95,0x87,0x53,0x8e,0x7e,0x48,0xfb,0x9c,0x89,0x8f,0xaf,0x8b,0xcd,0xd9,0xb7,0x44,0x29,0xfc,0xcc,0xd0,0x72,0xd1,0x30,0xeb,0xd2,0x4a,0xee,0xb0,0x2,0x3c,0x1f,0xc3,0x60,0x80,0x35,0x9c,0xf5,0xec,0x13,0xba,0x16,0x97,0xf9,0xf5,0x86,0xd6,0x42,0x3e,0x48,0x7b,0x54,0xfd,0x1e,0x6c,0x55,0x3a,0x6a,0x29,0x6,0x14,0x73,0xcc,0xbb,0xbe,0xad,0x83,0xc5,0xc5,0x7e,0xca,0xe6,0x4e,0xa6,0x8d,0x29,0x8f,0xb4,0xff,0xa5,0x4d,0xb8,0x3f,0x2a,0xfc,0xad,0xe9,0xad,0x7a,0x48,0xb2,0xd9,0x94,0x27,0x27,0x9e,0x48,0x8c,0x36,0x65,0x26,0x66,0xf6,0xd3,0x85,0x99,0x2c,0xf6,0x8d,0xac,0x4f,0x48,0xd0,0xb9,0x2e,0x21,0x67,0xac,0xda,0x60,0xef,0xe0,0x0,0xca,0xc3,0x1b,0x1c,0x8b,0xdd,0x3b,0x29,0xe9,0x16,0x52,0x1e,0xb5,0x87,0x2f,0xcf,0x36,0xb0,0x1e,0xba,0x4a,0x29,0x84,0x6f,0xd,0xd1,0x64,0x56,0x6e,0x83,0xfc,0x2,0x63,0x16,0x37,0x8e,0x6a,0x4,0x48,0x4b,0xce,0xc,0x6b,0xe5,0x84,0x7b,0xc9,0xef,0x90,0x2a,0xcc,0xce,0x1f,0x8b,0xc,0x5e,0x4c,0x7b,0x4d,0xae,0x6d,0xfc,0x70,0xce,0x65,0x31,0x1a,0x29,0x0,0xe3,0xab,0x58,0x3f,0x44,0x98,0xfc,0x2c,0x21,0x32,0x2,0xae,0x35,0xa9,0x3a,0x17,0x1f,0x53,0xff,0x61,0x10,0x4d,0xb5,0xa1,0x1d,0xf5,0xd8,0x2,0xa6,0xb6,0x81,0x48,0x8e,0x52,0xb7,0x8c,0x9f,0x21,0xfa,0xdf,0x74,0xd5,0x13,0x6a,0xbd,0x53,0x5f,0x60,0x1d,0x24,0x28,0xd1,0x88,0xd5,0x32,0xd,0x20,0xd8,0xf4,0x8b,0xa,0x5c,0x25,0xc,0xf9,0x54,0x1,0xe,0x9e,0x6c,0x1e,0x63,0x63,0x3b,0x86,0x48,0x3b,0x93,0x7c,0xa0,0x97,0xe0,0xb5,0xa9,0x4f,0xfe,0x8a,0x51,0x37,0xfe,0xbb,0xd8,0x3c,0x28,0x7e,0xae,0x2a,0x54,0xb,0x74,0x9,0xd,0x1a,0x9b,0x38,0x33,0x55,0x44,0x4c,0xe0,0x72,0x51,0xe7,0x62,0x88,0x9e,0x8f,0x29,0xf3,0x6f,0x7,0x24,0xd,0xe5,0x6b,0xcc,0xb8,0xd1,0x91,0x77,0x3c,0x36,0xa4,0x9a,0x89,0xf5,0x5,0x87,0xa6,0xe,0xa0,0x46,0xc4,0x83,0x5e,0x81,0x29,0x88,0xde,0xed,0xfd,0x30,0xac,0x3c,0x79,0xc9,0x7a,0x41,0x6d,0x36,0xc1,0xe2,0xba,0x5c,0xcc,0x75,0x84,0x45,0xca,0x54,0x17,0x8d,0x8e,0x55,0x62,0x3e,0xf9,0x75,0x3a,0xf3,0xeb,0xb1,0x67,0x96,0x1d,0xd2,0x3,0xb5,0xb2,0x63,0x2a,0x25,0xca,0xeb,0x9b,0x17,0xf0,0x5a,0xd9,0xa1,0xad,0xb,0x32,0xde,0xcb,0xa3,0x56,0x9c,0xb1,0x24,0x6a,0xc1,0xc8,0x37,0xf2,0x5c,0x5a,0x50,0x73,0xa7,0x69,0x4e,0x1d,0xd6,0xdb,0xf5,0xd1,0xfd,0xad,0x48,0x1b,0x9e,0x8c,0x99,0x5,0xd,0xc,0x15,0x2c,0x79,0xd2,0xb7,0x63,0xcd,0x6d,0x24,0xb9,0x73,0x60,0xf5,0xac,0xc8,0x7d,0xe0,0x1e,0x88,0xc5,0xa8,0xa4,0x58,0xb5,0xf,0x84,0x4c,0x5e,0xd6,0xe5,0xde,0x40,0x8b,0x66,0x73,0x60,0x4e,0x1d,0x7b,0x99,0xd4,0x31,0xc1,0xae,0x3a,0x2d,0x2,0x38,0x75,0x88,0x47,0x24,0xff,0x72,0x3d,0x2c,0x94,0x1a,0xf0,0x38,0x4a,0xb,0x31,0xb4,0x50,0xf7,0x8b,0x3,0x11,0xae,0x88,0xe3,0x6c,0xb3,0x11,0xc1,0xdf,0xc7,0xaa,0x7a,0x1a,0x1a,0x9,0xfc,0x5,0x3b,0xdc,0xf1,0xb9,0x37,0xa4,0x2e,0x54,0x3f,0x97,0x21,0xb6,0x5b,0x52,0x9c,0x49,0x25,0x96,0x5b,0x88,0xef,0x5,0x46,0x50,0x42,0x40,0xdc,0x77,0x43,0xed,0xbe,0x2e,0xab,0xf8,0x39,0x3c,0x64,0x0,0xd0,0x9e,0xe1,0xa0,0x36,0x49,0xca,0x54,0xb7,0x6f,0x31,0x4,0x4c,0x6a,0x93,0x4,0x39,0xa9,0x1c,0xe4,0x25,0x6f,0x3a,0x29,0x8,0xa4,0x8f,0x41,0x34,0xde,0xd,0x86,0x4c,0x3b,0x16,0xef,0x2,0x8e,0x14,0x50,0x4c,0xa4,0xa1,0xb1,0xb5,0x1,0xcf,0xd0,0x4d,0x54,0xe0,0xce,0x50,0x33,0xab,0x1e,0x11,0x4f,0x12,0x48,0x35,0x70,0x83,0x71,0x8f,0x31,0x5b,0xe7,0x7e,0xd6,0x5a,0xe1,0x50,0x25,0xb,0xc3,0x41,0x56,0xa7,0x5d,0xcc,0x8f,0xa3,0x4d,0x4,0x84,0x44,0x25,0x57,0xa8,0x71,0xef,0x1c,0x2,0x55,0x7f,0xd8,0xa4,0x5f,0x42,0x42,0xa5,0xc5,0xb8,0xbd,0x74,0x8d,0x38,0xa4,0xa7,0xfe,0xa3,0xb8,0xe2,0x89,0x9b,0xe5,0x24,0x70,0x7,0x37,0x8e,0xf4,0xd,0x6,0xbb,0xc4,0x3a,0x2f,0xaf,0xeb,0x13,0xbe,0xc5,0xff,0x17,0x12,0x8c,0xf2,0x3,0x3c,0x22,0x46,0x2b,0xcf,0x99,0xee,0xe,0x1e,0x65,0x19,0x62,0x87,0xfc,0x30,0xad,0x25,0x1f,0x96,0xc6,0x60,0xe1,0x47,0xb0,0x62,0x64,0xcc,0x80,0x9b,0x4b,0x98,0xdc,0x6b,0x4f,0xf1,0x2f,0xa8,0x27,0xb2,0x3a,0xee,0xf1,0xaa,0xad,0x7c,0x4b,0x7d,0x2e,0x20,0x78,0xdf,0xce,0xc8,0x72,0x93,0xae,0x5e,0x0,0x8e,0x82,0x18,0xea,0x96,0xcb,0x6a,0xc7,0xfa,0x57,0x76,0xe9,0x5c,0xf4,0x80,0x17,0xda,0xd7,0xee,0xfe,0x11,0xf1,0x0,0x1d,0x62,0x90,0x3d,0x3,0x1a,0xb8,0x18,0xe8,0x19,0x15,0x61,0x57,0x31,0x1f,0xfc,0x98,0x4f,0x14,0x89,0x48,0x5e,0x30,0x7e,0x51,0xfe,0x1,0x7a,0xdc,0x80,0xda,0x80,0xc5,0xf1,0x2b,0xdc,0x9e,0xaa,0xfb,0x42,0x4f,0x8a,0xc1,0x50,0x3,0xf4,0x32,0xb3,0x5e,0x52,0x97,0x74,0x6c,0xcf,0xa5,0x15,0x3e,0x98,0xb9,0xbe,0x19,0x53,0x4c,0x96,0x78,0x72,0x5a,0xe8,0x21,0x86,0xe1,0xda,0xa1,0x3f,0x84,0xa6,0xdc,0xc5,0xf4,0xfd,0xa1,0xba,0x57,0x95,0x99,0x72,0x57,0x9c,0x1f,0xff,0x22,0xfe,0x68,0x6e,0xed,0xa0,0xb0,0xac,0xe2,0x62,0x1c,0xe5,0xa9,0x33,0xe,0x91,0x53,0xbf,0xf5,0x14,0x58,0x62,0xcf,0x5b,0x1,0xdc,0x71,0xc7,0xef,0x85,0x2d,0x13,0x37,0x9e,0x59,0xf0,0xc,0xcd,0x87,0x8c,0xe2,0x77,0xf6,0x65,0xf,0xb1,0xf7,0x11,0xa9,0x87,0x49,0x65,0x83,0xb3,0x31,0xc8,0x42,0x3f,0x54,0xcb,0x7e,0x5c,0x3a,0xaa,0xaa,0xa2,0xef,0xce,0x49,0x93,0xb2,0x77,0xcf,0x49,0x5a,0x71,0x89,0xcc,0x60,0xc3,0x93,0x2e,0x19,0x90,0xae,0x5f,0x8,0x6c,0x18,0x8d,0xae,0x47,0x87,0xd5,0x59,0x2b,0x4c,0xc,0xb7,0x5,0x4b,0xc7,0xa0,0x48,0x80,0x12,0x1a,0x4d,0xfe,0xbb,0x23,0x86,0x19,0x87,0x39,0x39,0x38,0x8d,0xbc,0x9d,0x6e,0xc0,0xa3,0x1a,0xb4,0xa1,0xcd,0xbe,0x2d,0x4b,0xab,0x65,0xd3,0x90,0x32,0x77,0x18,0xb0,0x5d,0x3a,0x72,0x55,0x42,0x8f,0x12,0x53,0xfe,0xe9,0xae,0xe1,0x26,0x33,0x30,0x3f,0x2f,0x7c,0x1a,0x3b,0x9c,0xde,0x48,0xc6,0xb5,0x3d,0xd3,0x30,0xf4,0x66,0x32,0x25,0x7f,0x80,0x95,0x2d,0xeb,0xaf,0x5,0x35,0x18,0xa7,0x73,0x8d,0x49,0x8f,0x2e,0x33,0x7c,0x50,0xc2,0xe,0x1a,0xdb,0x6e,0x13,0x76,0xcc,0x60,0xe9,0xe3,0xd7,0xf5,0x3a,0x7b,0x83,0x7e,0xe0,0x77,0x72,0xa9,0x5d,0x6d,0x3e,0x1,0x79,0x52,0xc9,0xec,0xa1,0xd,0xb0,0xf8,0xd7,0x66,0x2b,0xa9,0x6d,0x11,0x5e,0xc0,0x96,0x38,0x8e,0x88,0xdf,0xad,0xa5,0x79,0x13,0xd0,0x6c,0x2f,0x28,0xfc,0xfe,0xb8,0x75,0xc9,0xb9,0xc6,0xbf,0xf8,0xf9,0x73,0x67,0xc3,0x81,0xb6,0x15,0xfa,0x39,0x88,0xef,0x67,0xd8,0xbd,0xde,0x10,0x58,0xa9,0x26,0xc1,0x15,0x57,0x2c,0x37,0xde,0x5b,0xa0,0x33,0x1b,0xd2,0x8c,0x79,0x13,0x5a,0xa,0x61,0x39,0xd0,0x46,0xd1,0xc5,0x4,0x36,0x1d,0x15,0x21,0x47,0x88,0x2b,0xbc,0xdf,0x5c,0xbf,0x53,0xef,0x71,0xfe,0xf1,0xd0,0x87,0xdd,0x3e,0x8c,0xf1,0xec,0x74,0x29,0xc8,0x69,0xb1,0xac,0x42,0xa4,0xf,0x9d,0xef,0xde,0xec,0x8,0xd7,0xa,0x54,0x14,0x81,0xff,0x55,0x7f,0x9f,0xe2,0x6c,0x16,0xc2,0xd5,0x85,0x90,0x47,0xac,0x8f,0xe0,0xe3,0x3e,0x88,0xad,0xdf,0xa0,0x41,0x9,0xcf,0xb1,0x43,0x3d,0xd2,0x3f,0x37,0x7e,0x65,0x36,0x96,0xa4,0xb0,0x6d,0x7e,0x91,0x14,0x5d,0x32,0x47,0x98,0xea,0x75,0xda,0xfa,0xd7,0xa8,0x5a,0xe,0x42,0xcd,0xf8,0xd8,0xd7,0xc6,0x8f,0x29,0x1,0x5a,0xe9,0xd1,0x91,0xa5,0xb,0x9a,0x69,0x74,0xc2,0xcb,0xb8,0x2b,0x46,0xf9,0x45,0x30,0xb7,0x7b,0x1b,0x66,0x2a,0x9b,0xf0,0xa4,0x1a,0x2e,0x70,0x0,0x2b,0x86,0xf1,0x42,0x93,0x99,0x2a,0x47,0xff,0x35,0x1,0x6e,0xf8,0x4d,0xec,0x87,0x7d,0xb1,0x81,0x98,0xc,0xae,0xaa,0x85,0x9c,0x42,0x3c,0x42,0x96,0xc7,0x8d,0xde,0xf5,0xa8,0xe3,0xb0,0xa2,0x17,0xb4,0x98,0x87,0x64,0x20,0x5b,0x9c,0x90,0x7d,0x73,0x75,0x79,0x5d,0x9c,0x5f,0xae,0xa1,0xd0,0xb9,0x85,0x46,0xc8,0x6c,0x57,0x22,0xf6,0xa7,0xd6,0x8b,0xf7,0x70,0x62,0xf,0xd7,0xd4,0x90,0x4a,0x6c,0xa9,0x5a,0xad,0xf7,0xec,0x3e,0x95,0xf1,0x95,0xb0,0xce,0x6,0xe5,0x39,0xd3,0xa6,0x35,0xe5,0x35,0xcb,0x37,0x93,0x3e,0x48,0x66,0x22,0xd7,0x46,0x44,0x4e,0x7a,0xbb,0xe1,0x2a,0x42,0x87,0x6e,0x4d,0x1a,0xbe,0xaf,0xcd,0x7e,0x5,0xd9,0xd6,0xb6,0xc,0x1d,0x1b,0x46,0x71,0x8f,0xe9,0x9e,0xf,0xc4,0x97,0xae,0x7d,0x5d,0x5e,0xd1,0x3f,0x2,0x86,0xfc,0x5e,0xfa,0x98,0xfa,0xae,0xd,0x98,0x65,0xf5,0x3b,0x2c,0x4f,0x48,0x1d,0x33,0x6,0xd5,0xd6,0xa5,0x2a,0x20,0xfd,0x93,0x90,0x2c,0xdb,0x4f,0x8,0x89,0x8a,0xee,0xc3,0x1d,0x47,0xb6,0xfa,0x50,0x4b,0xb2,0xfa,0x85,0x7e,0x7d,0xd4,0xae,0x5c,0x17,0x6,0x6b,0x15,0x1c,0x8f,0xa,0xff,0xab,0x37,0x43,0xbf,0x97,0x9d,0x5e,0x67,0xc4,0xcf,0x59,0xb2,0xfc,0x7f,0x76,0x4a,0x5b,0x45,0x3e,0xe8,0x2,0xb4,0x55,0xcd,0xb5,0xfb,0xf3,0x73,0x31,0x3a,0x60,0xd6,0xbf,0xa2,0xa6,0xda,0x9c,0xb2,0x8f,0x79,0x59,0x57,0x52,0x75,0x39,0xfb,0xc9,0x3d,0x1b,0x75,0x24,0xe5,0xdd,0x0,0x94,0x9d,0x32,0xa5,0x64,0x1b,0xa5,0x8,0x4d,0x8d,0x65,0x3b,0x4a,0xf6,0xaf,0xef,0x8e,0x1,0x12,0xc,0x67,0xb,0x63,0x21,0x41,0x79,0x98,0xa4,0x3b,0xbb,0xa6,0xdc,0x53,0x54,0x72,0x27,0x69,0xcd,0xd5,0x56,0x88,0xa9,0x40,0xb9,0xf7,0xba,0x2b,0x14,0xec,0x35,0xce,0x77,0x44,0xff,0xbf,0x99,0xf7,0x77,0x4d,0x16,0x21,0x18,0xe4,0x3b,0x70,0x4,0xf4,0x1d,0xbf,0x46,0xa5,0xea,0x62,0x3b,0x59,0xac,0x7e,0xb2,0x1a,0x28,0xb2,0x9d,0x8b,0xd4,0x14,0x62,0xc1,0xfa,0xf3,0xd8,0x8,0xfb,0xf2,0x2,0x1b,0x44,0xb3,0xae,0xad,0x84,0x63,0x84,0x17,0x78,0xf,0x9,0x42,0xba,0x67,0x44,0x31,0xc7,0x6c,0x2e,0x65,0xe5,0xd,0xcc,0x96,0xc9,0xaa,0xaa,0xdf,0x58,0x3d,0x9d,0x29,0x1b,0xf4,0x6c,0xfa,0xf1,0xa0,0xc9,0x32,0xa3,0x1c,0xcb,0x55,0x45,0x3c,0x5e,0x4a,0xb5,0x63,0x29,0x3a,0x5,0x16,0x22,0x9a,0x3c,0x9e,0x5d,0x42,0xf4,0x6c,0xe8,0x91,0x37,0xfc,0xe5,0xf7,0x27,0x72,0x34,0xe1,0x61,0x60,0x93,0xd4,0xc2,0xe7,0xe2,0x70,0x26,0x52,0x7e,0x34,0x46,0x65,0xe3,0xb4,0x87,0x58,0x39,0x37,0xce,0x7e,0xc2,0x7e,0x5e,0xdd,0xbf,0xca,0x37,0xdb,0xce,0x62,0x6a,0x86,0x2f,0x34,0xd,0x89,0xda,0x80,0x64,0x6c,0x89,0xb6,0xc,0x56,0xd4,0x82,0x7d,0x8a,0xa0,0xdc,0x1d,0xb8,0x64,0x53,0x80,0x61,0x90,0xf8,0x49,0x7b,0xa,0x61,0x42,0x55,0x8e,0x47,0x6a,0xb1,0x9a,0x38,0x38,0x99,0xe7,0x5a,0x51,0x4b,0x43,0x24,0x9e,0xaf,0x2c,0xfc,0xc9,0x8f,0xb3,0xfe,0xc7,0x96,0xec,0xf5,0xa7,0xed,0xdc,0x8e,0x93,0x87,0xf3,0x9d,0x85,0x3,0xae,0xef,0x2d,0x41,0x19,0x8c,0x5,0xe5,0x1e,0xe5,0xab,0xb9,0xa5,0xcb,0x61,0x96,0xeb,0x34,0x19,0xb0,0x57,0xef,0x19,0xdf,0x36,0x5d,0xdd,0x3c,0xa,0xd2,0x3a,0x1c,0x7b,0x68,0x70,0x2f,0x63,0x83,0xcd,0x17,0xa8,0x43,0x6c,0x66,0xd2,0xcb,0x72,0x51,0x12,0xf9,0x3,0x1e,0x96,0x8b,0x96,0x5e,0xa5,0x10,0xf0,0xa9,0xcf,0xc,0xe3,0xd3,0xcc,0x7c,0x8b,0x79,0x74,0x97,0x4b,0x5b,0x37,0xa5,0x82,0xf3,0x8f,0x53,0x5b,0x75,0xa6,0x5e,0x75,0x2c,0x30,0x9b,0xdf,0xb7,0xf8,0x13,0x3a,0x5e,0xa1,0x6e,0xa5,0xa1,0x8a,0x3,0x18,0x43,0x49,0x96,0xd,0x3,0x4f,0xf0,0x9b,0xc5,0x78,0xeb,0xfe,0x70,0x84,0x54,0x6,0xbb,0x48,0x1a,0x52,0x55,0x4a,0xc9,0xe,0xb3,0xf9,0xf5,0xa5,0x46,0x84,0xaa,0x72,0xa,0xdf,0x79,0xf9,0x44,0x56,0xac,0x48,0x27,0xb2,0x0,0x52,0x60,0x86,0x2d,0xca,0x9,0xca,0xa1,0x66,0xac,0x4e,0xa2,0x52,0xc6,0xa7,0x15,0x26,0xf1,0x1d,0xcf,0x47,0x76,0x8f,0xd3,0xb,0xf9,0xf8,0x52,0xf,0x17,0xb8,0xd0,0xd,0x7a,0x63,0x5e,0xd0,0xcf,0xe1,0xf0,0x2b,0x4a,0x19,0xa2,0x1b,0x61,0x1f,0x91,0xe0,0xb5,0xa9,0x91,0x40,0xa3,0xc1,0x5a,0x2a,0xa4,0x87,0xf3,0x11,0x91,0x2b,0x21,0xe3,0x7b,0x41,0xcc,0x34,0xb0,0x43,0xd5,0x47,0x27,0xce,0x53,0x74,0x92,0x3e,0xb5,0x6e,0x92,0x84,0xac,0x33,0xbb,0xe4,0xfb,0xf4,0x34,0x16,0x45,0x86,0xbf,0xa3,0xc,0x65,0x88,0xa0,0x8c,0x0,0xf7,0xec,0x48,0xe6,0xf4,0xc4,0x68,0x91,0x2a,0xa,0xf9,0x54,0xdc,0x5c,0xb2,0x9b,0x15,0x2,0x57,0x2c,0x87,0x32,0x4f,0xac,0x1e,0x5d,0xd,0x32,0xb5,0x6,0xd2,0xfa,0x26,0x95,0xc8,0x85,0xd6,0x13,0x25,0x15,0x8a,0x6c,0x3c,0x5f,0x12,0xd,0xfe,0xaa,0xe1,0x2d,0x59,0x9e,0x76,0xa2,0xda,0x9b,0x5b,0x33,0xba,0xf8,0x7f,0xe6,0x22,0x1f,0xb6,0xbf,0x78,0xf6,0xfa,0xda,0xae,0x91,0xe2,0xcf,0x5e,0x76,0x24,0x2c,0x98,0xcb,0x41,0x8f,0xd5,0x3d,0x9a,0x36,0xfc,0x15,0x13,0xf3,0x10,0xdb,0xa0,0x55,0xf8,0xc1,0x58,0xeb,0xe7,0x14,0xec,0xc4,0x7e,0x61,0x70,0x44,0xcd,0x16,0x11,0xd4,0xc6,0xdd,0x42,0x4d,0x43,0x10,0x91,0x13,0xb7,0x50,0xd7,0x9b,0xf3,0x8b,0x91,0x88,0x8c,0x5,0x76,0x76,0xa0,0xcd,0x23,0xa5,0xd5,0x1d,0x16,0x2d,0x1e,0x84,0x59,0x16,0xf8,0x68,0x63,0xfa,0x49,0x6f,0x1e,0xc6,0xe,0x55,0x51,0x5b,0xf9,0x73,0x24,0x4b,0xa9,0x0,0xc0,0xc1,0x15,0x1,0x86,0x7a,0xc8,0x18,0xe0,0x5d,0xd0,0xcc,0xe4,0xdd,0xb0,0x31,0xb2,0xff,0x4f,0x16,0x3a,0xea,0x31,0x5e,0x32,0x1d,0xe0,0xcd,0x5e,0x6d,0x90,0x0,0xe6,0x87,0x4,0xa6,0xbe,0xca,0xef,0x51,0xca,0x68,0x13,0xb1,0x5d,0xb0,0xd2,0xd6,0x86,0xb8,0x11,0x49,0xf4,0xf9,0xb3,0x10,0x81,0x4d,0x47,0xdb,0x33,0x60,0x27,0x8d,0xd8,0xbc,0x12,0x41,0x77,0x33,0x3c,0x6a,0xa4,0x20,0xc7,0xa7,0xaa,0xde,0xd3,0xf5,0xcb,0x44,0xdf,0x50,0xd0,0x33,0xed,0xa7,0xf,0x63,0xc,0xe0,0xd1,0xb8,0xe,0x94,0x78,0x9c,0x62,0xb,0xd3,0xda,0x57,0x7e,0x7f,0xa4,0x17,0xc4,0x3c,0xc0,0x9d,0x1d,0xfe,0xb7,0xfc,0x15,0x3c,0x73,0xd,0x37,0x99,0xe5,0x77,0x36,0xdf,0xae,0xb4,0xe5,0xfa,0xce,0x7e,0x72,0x2c,0xe6,0xf5,0x46,0x16,0x68,0x40,0x53,0xfc,0x37,0xf,0xac,0x6a,0x69,0x45,0xf3,0xfa,0x4f,0x15,0x2d,0x5d,0x52,0x74,0x8b,0x4b,0x13,0xc3,0x6a,0x63,0x6,0x6b,0xb2,0xf,0xe9,0x50,0x31,0x30,0x44,0x7c,0x18,0x35,0x76,0x59,0x6c,0x3d,0x4c,0x6c,0xab,0xad,0x20,0xfc,0x46,0xf2,0xca,0xe8,0x36,0xe7,0x52,0x24,0x25,0x5a,0x3a,0x7,0xb7,0xb7,0x3,0xc6,0x7b,0x73,0xb6,0x9d,0x7b,0xac,0xed,0x4,0xce,0x7c,0x9d,0x92,0x53,0xac,0xf6,0x89,0xe6,0xd1,0xa8,0x1d,0x8e,0x54,0x41,0x7d,0xf0,0xa5,0xe6,0x8b,0xf1,0x7e,0x48,0x87,0xe9,0x25,0x0,0x6,0x69,0xca,0x7e,0xaf,0x2c,0x80,0xf,0x62,0x25,0xd8,0xcf,0xd7,0x6b,0x79,0x4c,0x6b,0x52,0x40,0x78,0x99,0xa1,0xee,0x4b,0x16,0xe0,0xe1,0x59,0xf1,0x89,0x56,0xf0,0x30,0xef,0x3a,0xc5,0x94,0x51,0x4c,0x5b,0xa5,0xbf,0x82,0xd6,0xed,0x7b,0x80,0xd9,0xd1,0x42,0xd7,0xa6,0xf6,0xcc,0x10,0xc9,0xb6,0x73,0x43,0xdf,0x6d,0x20,0x42,0x29,0xf7,0x14,0xe6,0xa0,0x3,0x84,0x87,0xa0,0x38,0x30,0xf4,0x7a,0xb8,0xbe,0xbb,0x12,0x96,0xa7,0xc7,0xdf,0xc2,0x24,0xb1,0x64,0x58,0x11,0x7c,0x74,0xd5,0xc0,0x3e,0x14,0xf5,0x39,0x6a,0xb7,0x45,0xe6,0x10,0x56,0x8a,0xb2,0xe2,0x67,0xfe,0x83,0xeb,0x2c,0x33,0x4a,0x8b,0x7e,0x2c,0xc6,0xa0,0x38,0x26,0xf8,0x67,0x99,0xcb,0x94,0xbe,0xb2,0xd8,0x74,0x9f,0x21,0x17,0x63,0xc4,0xa3,0x6f,0x53,0x85,0x92,0xd0,0xd0,0xad,0x1b,0x8,0xd7,0x86,0x29,0x9f,0xc6,0xe2,0x54,0xfa,0x78,0xfa,0xdc,0x4,0x21,0x48,0xc2,0xc,0x4c,0x73,0x51,0xae,0x79,0x2c,0x28,0x2c,0xd9,0x26,0x65,0xa5,0xe8,0x19,0x3c,0xa0,0xff,0xbd,0x25,0x5,0xfe,0xc,0xc2,0x72,0xe1,0x3d,0xb5,0x40,0x9a,0x5b,0xa,0xbd,0xdd,0x34,0x7b,0x42,0x58,0x5a,0xd4,0x78,0xa0,0x76,0x8c,0xa4,0xd5,0x22,0x7e,0xe6,0x16,0x2a,0x12,0x3,0x2,0x31,0x22,0x87,0x3b,0x9e,0x47,0x7a,0xbe,0x8b,0xca,0x53,0x7c,0xb2,0xaf,0x18,0x69,0xad,0x8a,0xc9,0xb3,0x43,0xfb,0x83,0x2a,0x21,0xd9,0x98,0x93,0x5d,0x2e,0x5e,0x29,0xb7,0xf3,0xf8,0xb6,0xf1,0x1b,0x3b,0xba,0x26,0x4b,0x6c,0xf5,0xc5,0x63,0x3a,0x2c,0xb1,0x84,0xb,0xc4,0x8,0x62,0x48,0x6d,0x8e,0x38,0x64,0x81,0xe4,0xec,0x4c,0xf8,0xe5,0xb0,0xb,0x54,0x2f,0x9e,0x84,0x9b,0x7b,0x9,0x20,0x4d,0x6e,0xb8,0x4b,0x32,0xdd,0x30,0x20,0x8e,0x4e,0xb6,0x1b,0x40,0x7,0x8c,0x23,0xf1,0x49,0x62,0x79,0x3,0xaf,0x99,0x62,0x4,0xb4,0xdb,0xdb,0x85,0x66,0x42,0x33,0x6a,0xe1,0xe5,0x91,0x94,0x7d,0x69,0x62,0x39,0x1e,0xc7,0x6f,0xe7,0x2d,0xe5,0x8d,0x7f,0x8b,0x74,0x6b,0x8b,0xff,0x77,0xb,0xa5,0xfa,0xab,0xb0,0xad,0x3b,0x1,0xdc,0xaf,0x9b,0x5b,0xac,0x23,0x2d,0x68,0x70,0x39,0x22,0xf5,0x1f,0xc3,0xe,0xbd,0xc2,0xc,0x23,0xdd,0xe7,0xcd,0x41,0x32,0xf,0x3a,0xf1,0xd0,0x43,0x87,0x4c,0xec,0x59,0xe,0x93,0xff,0xcd,0xa9,0x31,0xd7,0x4b,0xb2,0xab,0x79,0x6d,0x34,0x99,0xc3,0xac,0x34,0x86,0x24,0xf6,0xb1,0x4b,0x5,0xfb,0x42,0xa,0x1b,0xc0,0x4e,0xf2,0xf4,0x97,0x39,0xf2,0xe1,0xca,0x31,0xc8,0x1e,0x9a,0x78,0xa7,0xdd,0xc5,0x2f,0x84,0x9d,0x67,0xf3,0xe6,0xfc,0x9d,0xbe,0xb1,0xf6,0xaf,0x88,0xd3,0x22,0x63,0x85,0xb8,0xf3,0x7f,0x72,0xe1,0x2d,0xe0,0xb4,0xc3,0xd0,0x39,0xfd,0x3d,0xab,0xf7,0xd7,0x3f,0x84,0x82,0xcf,0x8e,0xbd,0xe3,0x7a,0xea,0x60,0xf,0x6f,0x80,0x4f,0x2c,0x8a,0x54,0x7d,0xa3,0x9,0x9e,0x2,0xe6,0x45,0x23,0x5a,0x2f,0x8e,0x89,0x9f,0x61,0x29,0xdb,0x4a,0xdb,0x87,0xc2,0xea,0x32,0x54,0xfe,0xb7,0xe7,0x86,0x7,0xb6,0xee,0xb1,0xa2,0x43,0x9b,0x59,0xb5,0xc1,0xb4,0x2e,0x7b,0x50,0x1a,0x70,0x84,0xb,0x70,0xd9,0x7e,0x20,0x7a,0xb7,0xa3,0xc8,0x2d,0x1f,0x2c,0xdf,0x1f,0xb5,0x1e,0xa6,0x8b,0xfb,0xe9,0x9e,0x81,0x91,0xe6,0x3d,0x87,0x4,0x4f,0xbf,0xd5,0xc7,0x46,0x48,0xb4,0xaf,0xfa,0x9d,0x3e,0x77,0xd2,0x10,0x18,0xf4,0x77,0xfb,0x14,0xe1,0x9,0x8a,0x8f,0xb,0x79,0x43,0x8a,0x12,0x77,0x15,0x2d,0x2e,0x4,0xe4,0x26,0x5f,0xd3,0x97,0xd6,0x4f,0x57,0xf9,0x9b,0x60,0xcc,0x9e,0xa0,0xba,0x5e,0xc3,0x7b,0xe9,0xc3,0xde,0x2f,0x9a,0x61,0xcc,0xcb,0x60,0x35,0x23,0xf4,0x29,0xe4,0xed,0x23,0x65,0xc5,0x33,0xf9,0xa7,0x8e,0x68,0x1d,0x23,0x59,0xe4,0x78,0xa5,0xc5,0x3a,0xc3,0xd0,0x80,0x8c,0x31,0xdc,0x88,0x34,0x23,0xac,0x46,0xfc,0xc5,0x2d,0x66,0x56,0x3c,0xf9,0xaa,0x8d,0x5,0x19,0x7a,0x89,0xc1,0x15,0xa1,0x22,0x67,0x32,0xc1,0xfa,0x29,0x2,0xea,0xf1,0xef,0x43,0x23,0x8b,0x5b,0x16,0xb5,0xa4,0x1c,0x96,0xf9,0x1d,0x11,0x7a,0xc3,0x7b,0x7d,0x1,0x7e,0xa4,0x66,0x88,0x43,0x70,0x28,0xbe,0xe6,0xb9,0x8b,0x97,0xba,0xa9,0x62,0x95,0xc9,0x9f,0xc9,0x6e,0x29,0x5e,0x10,0xbd,0x3e,0x8e,0xb5,0xa6,0x21,0x92,0x52,0x88,0xfb,0x1e,0x10,0x94,0xf6,0xc9,0x24,0xa2,0x84,0xc6,0x42,0xf6,0x19,0x2a,0x16,0x6d,0x25,0xd4,0xa1,0x19,0xa4,0x3a,0xd8,0xfc,0xf8,0xf3,0x98,0x4,0xa4,0xc7,0xdc,0x0,0xbc,0x32,0x6f,0x81,0x82,0x1c,0xf3,0x50,0x3e,0x93,0x86,0x4e,0x81,0xf1,0x63,0x32,0xbb,0xc0,0xf9,0x28,0x6,0xdd,0xc2,0x5e,0xa2,0x65,0xc6,0xe2,0x9c,0x70,0x99,0x81,0xff,0x2a,0xcd,0xe2,0xc5,0x5e,0x4,0xca,0x5f,0x3,0xf3,0x29,0x92,0x22,0x46,0xe3,0x1d,0xfc,0xe6,0xf,0x87,0x1b,0x19,0xee,0x18,0x6c,0xf7,0x5e,0x16,0x17,0xd1,0xc7,0x32,0x38,0xb0,0x53,0xb3,0x61,0x10,0x43,0xd4,0x38,0xf0,0x52,0x72,0x2,0x7c,0x1,0xd4,0xe,0x2d,0x39,0xbe,0x6e,0xfb,0xbd,0x85,0x3c,0xf0,0x44,0xc2,0x8c,0x12,0xfd,0x59,0xc7,0xe5,0x90,0x7b,0x94,0x68,0xc2,0x9a,0x59,0x9,0x6a,0x23,0xcf,0x56,0x9d,0x49,0x47,0x4e,0xe5,0x9e,0xbe,0xb,0x3c,0x68,0xd1,0xc8,0xc4,0xa2,0x1f,0x99,0xb1,0x41,0x22,0x7a,0xcc,0xe2,0xa9,0x1f,0xc7,0x66,0x93,0xcb,0x51,0xd4,0x1a,0xb0,0x18,0xd9,0x85,0x4b,0x2f,0x2c,0x12,0x84,0x6c,0x35,0x5c,0xcc,0xd8,0x85,0x74,0x24,0xa4,0x64,0x5d,0xdb,0x55,0x46,0xec,0x15,0xcf,0xcc,0xee,0x33,0x1b,0xa5,0x91,0xd2,0xa7,0x72,0x4,0xdc,0x25,0xf7,0x4e,0xa6,0xef,0x5a,0xab,0xfc,0xda,0x7e,0x1c,0xfa,0xdd,0x1e,0x40,0x2f,0xe7,0x20,0xf4,0x67,0x39,0xc6,0xb1,0x4a,0xb1,0xca,0xa8,0x6e,0x41,0x58,0x43,0x81,0x4,0xf1,0xbd,0x3f,0x9d,0x11,0x7a,0xe4,0xa4,0x5d,0xd7,0xcc,0x83,0x64,0x40,0x96,0x3,0xc0,0x28,0xf5,0xa4,0x1,0xce,0x4a,0x5f,0x2b,0x25,0x9f,0x9,0x42,0xca,0x20,0x36,0x45,0xf7,0xa6,0xc,0xf9,0xd6,0x7d,0xf5,0x60,0x8f,0x1f,0x59,0xb2,0xab,0x71,0x8f,0x4d,0x6c,0x18,0x15,0xd3,0xea,0x4e,0xf0,0x4f,0x34,0xcb,0x58,0xd1,0xf6,0x98,0xba,0xeb,0x74,0x1e,0xac,0xec,0x50,0xfb,0xba,0xa2,0x14,0xfd,0x4f,0xbb,0x30,0x4e,0x33,0x56,0xe0,0xdc,0x25,0x69,0x8e,0x88,0xcc,0xd4,0x46,0xec,0x93,0xb,0x27,0x29,0x4e,0xea,0xb4,0x97,0xd5,0x16,0xd6,0xfb,0x6d,0xca,0xf5,0x41,0xe6,0xf2,0x62,0x3c,0x60,0x68,0xf5,0x29,0xd4,0xd8,0x70,0x22,0x74,0xff,0x11,0xba,0xf7,0x68,0x53,0x5d,0xd1,0xb,0x21,0xf4,0x55,0x52,0xc1,0x14,0xa2,0xee,0x0,0xfb,0x2,0x68,0x72,0x2c,0xf7,0xe2,0x89,0x36,0xfe,0xc4,0x3e,0x41,0x8,0xc3,0x28,0xb8,0x84,0xc3,0x1e,0xc,0x11,0x90,0x69,0x11,0xb6,0x89,0x74,0x0,0xbb,0xc4,0xb7,0x1f,0xdb,0x34,0xb6,0x28,0x1a,0xb2,0xb4,0x17,0x4f,0xa3,0xfc,0xbe,0xef,0x35,0xb7,0xa6,0xe4,0xc9,0x7,0xd4,0x88,0x57,0x9c,0xe8,0x2f,0x5c,0x14,0x6b,0x81,0xdc,0xb8,0xad,0x83,0x59,0xad,0x37,0x39,0xbc,0x67,0xe8,0x11,0x16,0xc3,0xee,0xf6,0x8b,0x83,0x1c,0x65,0x18,0x8d,0x8a,0x6a,0x41,0xbf,0xe2,0xe8,0xa8,0x63,0x3d,0x19,0x2b,0xe8,0x8c,0xc3,0xd8,0x9c,0x45,0x1f,0x10,0x4b,0xe0,0xef,0x3e,0x51,0x6e,0xbd,0x46,0x13,0x90,0xa4,0x16,0x1c,0x87,0xe6,0x63,0xca,0xdd,0xd8,0x74,0x8b,0x89,0x69,0x74,0x36,0xe7,0x38,0x83,0xa0,0xb6,0x49,0xac,0xa1,0xca,0xaa,0x80,0xd8,0x6d,0xea,0xf3,0xa2,0x57,0x9d,0x5,0xea,0x72,0xa6,0xfe,0x55,0xfa,0x30,0xad,0x69,0x4e,0x4d,0xba,0x51,0x37,0xe,0xd2,0xbe,0x5a,0xa0,0xfd,0x8e,0xe4,0x7b,0x11,0x6c,0xae,0x85,0xe4,0xbe,0x82,0x8,0x58,0x6a,0xbe,0x93,0x1f,0xe0,0x0,0xe0,0xbd,0xfd,0x8f,0xe5,0x1e,0x76,0xee,0xf6,0x1,0xd,0x5f,0x22,0x24,0x8a,0x62,0xaf,0xa,0xb,0xc3,0xf3,0x15,0xb8,0x22,0xc3,0xec,0x4e,0x6d,0xfb,0xd3,0x75,0x21,0xdf,0x97,0x6e,0xe3,0x4,0x38,0x80,0x3f,0x2c,0x8c,0xab,0xfd,0xda,0x2e,0x78,0x52,0x23,0xb2,0xbc,0x8a,0x7c,0x77,0xe4,0xca,0x1,0xfe,0x28,0xe6,0xb6,0xb7,0x4f,0xe8,0xc,0xd8,0xa5,0xe1,0x30,0xd2,0x86,0xf2,0xed,0xed,0x52,0x6f,0x8e,0x6d,0x30,0x75,0x2e,0x29,0x58,0xd2,0x53,0x22,0xdc,0x48,0x8b,0xb3,0xb2,0x8e,0xc9,0x2c,0x3b,0x32,0x4b,0xa,0xf0,0xc5,0x27,0xe,0xbb,0x41,0xfa,0x42,0x26,0x99,0x4d,0x71,0x21,0x1,0x13,0xf9,0x19,0x38,0x31,0x63,0xa4,0x18,0x7e,0x5c,0xef,0x7a,0x80,0x75,0x35,0x8a,0x79,0x9a,0x3c,0xea,0xe6,0x9f,0xaf,0x58,0xf2,0x9d,0x4e,0x78,0xeb,0xc1,0x33,0x7e,0x36,0x11,0xe1,0x2e,0x6e,0x19,0x1e,0xcc,0xef,0x1f,0xa9,0x41,0xd8,0xc3,0xa6,0xaf,0x47,0xd,0x63,0x33,0xba,0x9a,0xbc,0x29,0x5a,0x4,0x77,0xf1,0x74,0x22,0xb8,0x79,0x1b,0xc0,0xf0,0x5,0x3,0xa9,0x27,0x2b,0x95,0xa4,0x6d,0x87,0x96,0x2,0x30,0x5b,0xec,0xef,0xef,0xa0,0x5b,0x5e,0xb6,0x58,0xc3,0xc3,0x6d,0xab,0x1c,0xc7,0x38,0x33,0x7f,0x11,0xc9,0x43,0x3b,0x7f,0xd7,0x91,0x1b,0x90,0xff,0xbc,0xc7,0xc4,0x1f,0xb8,0x15,0x18,0xfe,0x14,0x11,0xa2,0x31,0x8b,0xb0,0x5b,0xc0,0x17,0x6d,0xc9,0x5d,0x61,0xb2,0x41,0x76,0x63,0x17,0xdc,0x46,0xfa,0xfd,0xe8,0x34,0x82,0x74,0x36,0x20,0xf7,0xb9,0x47,0x13,0x99,0x6c,0xba,0xd4,0x94,0x4e,0xe0,0x7b,0x87,0x6b,0x4a,0xfd,0xc,0xdc,0x4f,0x31,0x9,0xd8,0x29,0x75,0xcd,0x2b,0x5,0xa5,0x45,0x92,0xb5,0x3a,0x43,0x37,0xff,0x4f,0x93,0xb7,0x79,0xb6,0x45,0xd4,0xcc,0x9b,0x95,0xba,0x61,0x70,0x95,0x7c,0x81,0x9,0xbd,0x8,0x4e,0x94,0x7a,0xb,0xf2,0x8,0xf6,0x53,0xc2,0x68,0x7e,0x92,0x82,0xd9,0xab,0x3a,0xb7,0xdb,0xfc,0x95,0x80,0x3,0x9f,0x7d,0x6b,0x9c,0x61,0x70,0x5e,0xd6,0x46,0x77,0x7a,0xde,0xc1,0x85,0xbc,0x81,0x4f,0x2a,0x13,0xe4,0x24,0x62,0x14,0x48,0x4b,0x8,0x23,0x7f,0xce,0x92,0xce,0x1d,0x8e,0xfd,0x2,0xe3,0xfc,0xbc,0x80,0xbd,0x81,0x42,0x14,0xbd,0x8e,0xf6,0xca,0x51,0x77,0xf2,0x90,0x5b,0x9f,0xc7,0x6c,0x53,0x38,0x7,0x94,0xaa,0x11,0xb8,0xd7,0x50,0xfd,0x3d,0xaa,0x54,0x58,0xee,0x16,0x2c,0xbb,0x4b,0xa7,0xbe,0x6e,0xa4,0x27,0xca,0x3e,0x8,0xe3,0x60,0x9b,0x44,0x29,0x9a,0x5b,0x6b,0xfd,0xb8,0x31,0x89,0xf6,0x84,0x70,0x51,0x38,0x5b,0x3d,0x75,0xb6,0x3c,0x66,0x3,0xda,0x14,0xf7,0x61,0x36,0x6,0x28,0x30,0x2,0x34,0xea,0x86,0x21,0x2d,0x3c,0xe1,0xa2,0x8a,0xfe,0x4d,0x4,0x3,0xbc,0x72,0x98,0xdf,0x2d,0xaa,0x1f,0x8,0xf0,0x2e,0x30,0xf,0x99,0xd6,0xb9,0x61,0x57,0xdc,0x35,0xee,0xfd,0x77,0x7c,0xe0,0xc1,0xcb,0x7e,0xf7,0x26,0xc8,0x16,0x23,0x54,0xea,0x97,0xca,0xe6,0x5,0x28,0xf2,0x19,0xee,0x33,0xef,0xa0,0xed,0xe2,0x7d,0xaa,0x18,0xd7,0x22,0xb2,0xe3,0xc2,0x44,0x73,0x40,0xa3,0xd,0x27,0x3b,0x5e,0xd6,0xff,0xd8,0xcf,0xf8,0xeb,0xb9,0x66,0x4,0xee,0xe,0xaa,0xc9,0xed,0x5,0xf2,0x31,0xc6,0xdf,0x9,0xc7,0x16,0x32,0x9a,0xff,0x93,0xa9,0xc7,0xaf,0xc5,0xa0,0xd6,0x57,0x67,0x98,0x6a,0xc8,0x9a,0x5b,0x15,0x1c,0x41,0x5d,0x3d,0xcc,0x8a,0x71,0xfb,0x91,0xbb,0xf9,0x51,0x5c,0x1a,0x87,0x57,0xf9,0x7b,0xfc,0x94,0xe5,0xcc,0x5e,0x2d,0xf4,0x5a,0xfe,0x7a,0x85,0xd6,0x81,0x76,0xfb,0x25,0x6e,0xae,0x10,0x29,0x91,0x1d,0xa0,0xc5,0xae,0x74,0x73,0x15,0x32,0xf9,0xd8,0xa2,0x27,0xf8,0xe0,0x9a,0xde,0xa0,0xe2,0x79,0x8b,0x51,0x9d,0xd8,0x45,0x0,0x34,0x12,0x82,0x3c,0x8b,0xc0,0x1,0xac,0xed,0x75,0x3f,0x6,0xf2,0x40,0xad,0x8b,0xc1,0x2f,0xc7,0x22,0xd1,0x99,0x4b,0x35,0x1e,0xbd,0xac,0xc1,0x79,0xd0,0x8f,0xe0,0x59,0xe4,0xdd,0x28,0xac,0x80,0xf9,0x41,0xa5,0x3a,0x61,0x32,0xd2,0xb6,0x9c,0x57,0xab,0x9c,0x19,0xfd,0x7c,0x7f,0x93,0x6c,0xb1,0x6a,0x3b,0x7d,0xd6,0xd6,0x72,0x55,0x1d,0xc0,0xe3,0xfc,0xe4,0x99,0x9e,0x2c,0x7c,0x7d,0x39,0x39,0xdc,0x7e,0x7d,0xf5,0x2d,0x98,0xd,0xbb,0x6b,0x86,0x5e,0x88,0x35,0x8,0x3f,0x62,0xe,0x9f,0x8a,0xd2,0x16,0xdc,0x8c,0x6c,0xd6,0xf0,0xc2,0xa,0x5d,0xd1,0x25,0xc,0x90,0x74,0xd6,0x9e,0x55,0xd6,0x22,0x5b,0x63,0x76,0xff,0xd8,0x6a,0x21,0x38,0x26,0x17,0x86,0x6e,0x82,0x7a,0x67,0xcb,0x85,0x92,0x6c,0x2,0x4d,0x67,0xd5,0xc3,0x82,0xb,0x37,0x1e,0x4,0x80,0x8f,0x13,0xb6,0x62,0x47,0x1b,0x6,0xd,0x50,0x7e,0x1b,0x82,0x3a,0x32,0xdf,0xb8,0x1f,0xef,0xe0,0x29,0x99,0x86,0x2c,0x10,0xac,0x75,0xa9,0x9e,0x47,0x7e,0xca,0x88,0xf8,0x30,0x67,0xce,0xb5,0x74,0xfd,0x76,0xcc,0xac,0x6c,0xd3,0x56,0x9d,0x4a,0xd5,0x82,0x3c,0x2f,0xa0,0x6,0x54,0x76,0x84,0x18,0xb4,0x7b,0xfb,0xa0,0xbd,0xbb,0x8d,0x5,0xfc,0xc9,0xcb,0x2a,0x46,0xa3,0xb8,0xb,0x62,0x68,0x1d,0xde,0x48,0x54,0x9b,0xc1,0xf7,0xc9,0x99,0x5c,0xa5,0xe2,0xba,0x54,0xb4,0x53,0xa,0x6e,0xf9,0xe6,0x2,0xb2,0x60,0x1a,0x7d,0x89,0x5d,0xc3,0xe7,0xa2,0xd8,0x10,0xc0,0x53,0x79,0x66,0x3e,0x4f,0xd4,0x64,0xf3,0x51,0x55,0x6f,0x67,0x78,0x99,0x2,0x1a,0x6f,0x6a,0x26,0x8e,0xd4,0xb,0x58,0xa6,0xda,0x89,0x77,0x7a,0x6a,0xc6,0xb4,0x92,0x8d,0x27,0xff,0x28,0x75,0x51,0xc,0x1e,0x73,0x78,0x50,0x2e,0xf7,0x98,0xaf,0x3a,0xc5,0x63,0x82,0x9a,0x45,0x61,0x6c,0x82,0x17,0x9b,0xfa,0x1d,0xac,0xff,0x81,0x84,0xc4,0x71,0xb7,0xce,0x3b,0x24,0xe7,0x1b,0xf1,0x7c,0x88,0x85,0xcd,0xff,0x2,0xd9,0xc,0x90,0x4d,0xc3,0xc3,0xa,0x7b,0x2c,0x10,0xcb,0xa0,0x71,0x89,0x1,0x8,0x74,0x23,0xca,0x10,0x4f,0x1c,0x82,0xac,0x39,0x31,0x5a,0xb2,0x26,0xb5,0xbb,0xf,0x7c,0x5d,0xb2,0x43,0x62,0x3a,0xbc,0xdc,0x53,0xda,0xf4,0xd,0xcd,0x52,0x88,0xe2,0x8,0x11,0x4f,0xb2,0x49,0x31,0x68,0x71,0x15,0x57,0x81,0x92,0xc8,0xcb,0x16,0xe5,0x71,0xa7,0x2c,0xbb,0x7a,0x6,0x8a,0xdb,0xe1,0xe9,0x23,0xea,0x2,0x30,0x7f,0x8d,0xdd,0xe3,0xb0,0xaf,0xbd,0xd0,0xb6,0x62,0x7a,0x98,0xdc,0xf9,0x46,0xf,0xae,0xa,0xf4,0x75,0xc3,0x2d,0xbc,0x7a,0x89,0xbe,0x53,0x6d,0xf9,0x5,0xb4,0x14,0x21,0xa2,0xa7,0x8e,0xd8,0x36,0x67,0xb9,0x3f,0xd8,0x39,0x8f,0xf3,0xcb,0xb8,0x28,0x30,0x89,0x8b,0xf0,0xcd,0x18,0x52,0x5b,0x4b,0x14,0xff,0xb8,0xc4,0x28,0x68,0xb4,0x28,0x33,0xa5,0xb8,0x92,0x9f,0x8d,0x47,0xaf,0x55,0xd9,0x5c,0xc8,0x91,0x80,0x12,0xc8,0xcb,0x31,0x91,0x6a,0xf9,0x81,0xcc,0x90,0xf0,0x9e,0xe6,0xd8,0xce,0x72,0x7c,0x55,0x84,0x5f,0x46,0x21,0x31,0xd6,0x5c,0xbd,0xe2,0x9d,0x0,0x40,0x30,0xcd,0x7a,0x2b,0x49,0x96,0x2,0xc,0x44,0x8a,0x70,0xd2,0xed,0x45,0x16,0x25,0x65,0x52,0x13,0x55,0x98,0x61,0x14,0x75,0x2e,0xf,0xde,0x58,0x6b,0xcb,0xb0,0x4,0x10,0x48,0x93,0x86,0x2c,0x3b,0x58,0x71,0xf0,0xbe,0x5f,0x0,0x45,0x90,0x4e,0xf6,0xda,0x73,0xbd,0x42,0x54,0xbd,0xe9,0x5f,0x32,0xb3,0x1d,0x58,0xe0,0x62,0xe3,0x8f,0x26,0x8e,0xdc,0xb,0x6d,0xd,0x8,0xab,0x6f,0x4b,0xb5,0x71,0x3b,0x56,0x49,0x27,0x7c,0x3d,0xee,0x51,0xe,0x1f,0xd0,0x1d,0x53,0xbf,0xca,0x95,0xd8,0xe0,0xc0,0xf6,0xe8,0xfb,0x9b,0x51,0xbb,0x19,0xb4,0x8,0x8c,0xae,0xf9,0x7f,0xbe,0xfe,0x51,0x3f,0xe4,0x9d,0x55,0xc2,0x9c,0x28,0x4b,0xb6,0xee,0x35,0x45,0xa6,0xda,0x5a,0x6f,0xab,0x44,0x92,0x27,0x3f,0x77,0x79,0x93,0x38,0x64,0x47,0xf1,0x90,0xe0,0xb6,0xf4,0xa6,0xf2,0xb4,0x27,0xf9,0x97,0xd8,0xd1,0x5f,0x18,0x4e,0x66,0x64,0x4f,0xf4,0x43,0x93,0xb1,0x48,0xa1,0xb8,0xb1,0x19,0x9d,0x24,0xcb,0xdb,0xc2,0xe,0xd5,0x62,0xe2,0x1f,0xc0,0x5,0x56,0xaf,0x13,0xf0,0x2d,0xc7,0x12,0x99,0xba,0x58,0xb3,0xed,0xfa,0x58,0xc2,0x8b,0x96,0x92,0x8f,0x2b,0x2d,0x78,0xee,0x5b,0xd2,0x57,0x97,0xc0,0x4c,0xc5,0xa3,0x8c,0x45,0x32,0x69,0x87,0xae,0x35,0xd6,0xb1,0xcd,0x86,0xd,0xaf,0x5c,0x94,0xa5,0x64,0x12,0x1a,0xd6,0x0,0x22,0xb2,0x8b,0x21,0xbd,0xe9,0xa5,0xea,0x4e,0xe3,0xa6,0x5,0x7c,0xd0,0x4b,0x2b,0x45,0xfd,0xf,0x38,0xd7,0x62,0xea,0xc7,0x86,0xc5,0xc2,0x2d,0x9e,0x31,0x8e,0x5b,0xe0,0xb7,0x2b,0x45,0x51,0x7f,0x4e,0x5f,0xae,0x4b,0xde,0x1b,0x5e,0xc4,0xf8,0x5,0xcd,0x11,0xb7,0x2c,0x36,0x59,0xc0,0xf,0x15,0x6b,0x97,0xc8,0xc7,0xc5,0xa5,0x98,0x5e,0xa9,0x82,0xb3,0x29,0x23,0xdc,0xd6,0x7d,0x82,0xb,0xf9,0x88,0x4c,0xc4,0x3b,0x78,0x64,0xde,0x3a,0x85,0x57,0x23,0x44,0x8b,0x45,0x2f,0xe,0x55,0xcd,0x3c,0x38,0x87,0x2b,0x46,0x8c,0xb8,0x53,0x95,0xaa,0x27,0x71,0x68,0xe7,0x6a,0xe2,0xb9,0xaf,0x76,0x63,0xa2,0xb8,0x19,0x72,0x69,0xf3,0x61,0x48,0xa2,0x8c,0x95,0x6d,0x60,0x75,0x76,0xc1,0x3b,0xcb,0xdd,0x81,0x5a,0xec,0xd7,0x3e,0xb6,0x2e,0x3e,0xf4,0xf7,0xe6,0xcb,0x1a,0x7f,0xd8,0x51,0x8c,0x37,0x6b,0xd9,0x16,0xc6,0xdc,0x32,0x11,0x77,0xf4,0xc5,0xd5,0xd4,0x7,0xe9,0x58,0x92,0x5e,0x6,0x1e,0x8f,0xf7,0xde,0x2c,0x6e,0x25,0xd7,0x27,0xb3,0x53,0x93,0x65,0xeb,0x6c,0xf,0xa,0xd3,0x67,0xe1,0x68,0xef,0xc7,0x8c,0xb4,0xa8,0x29,0xae,0x33,0x6d,0x96,0x5e,0xa0,0x27,0x90,0xc8,0x50,0x2b,0xf3,0x70,0x83,0x80,0x51,0xba,0xbf,0x5b,0x1,0x6,0x8a,0x62,0x8,0xa9,0x89,0x77,0x2b,0x71,0x3e,0xe9,0x14,0x49,0xd0,0xec,0x55,0xfe,0x2d,0x35,0x9b,0xc3,0x98,0x55,0x5a,0xf5,0x55,0xf1,0xaa,0x7,0x6,0x6c,0xb5,0xbc,0x54,0x7e,0xd4,0x32,0x3d,0xfa,0x43,0x74,0x7d,0xe2,0xb2,0xd8,0x26,0x98,0xa9,0x24,0x33,0x87,0xfb,0xf7,0x87,0xd8,0xa1,0x7,0xa,0xde,0x5e,0x9e,0x41,0xe1,0x28,0xf2,0x52,0x5,0x81,0x26,0xf3,0xc7,0x1b,0xa9,0x82,0x38,0x14,0xe8,0x90,0xcb,0x96,0xf9,0x19,0x2a,0xc2,0xc6,0x12,0x65,0x7b,0xd6,0xa7,0x55,0xd3,0xcb,0xf6,0x87,0x3f,0x87,0xe3,0xc6,0xd3,0x4,0xfe,0x34,0xfb,0xce,0x6,0x7b,0x7c,0x3,0xc,0x6f,0xd3,0xb3,0x37,0x16,0xf1,0x7f,0x21,0xb0,0x29,0xf8,0x4e,0x5b,0xf8,0x38,0x3f,0x7a,0xca,0x74,0x9a,0x3,0xc1,0xa7,0x6e,0xeb,0x80,0xe9,0x84,0xe7,0xa2,0xf5,0x4b,0xdb,0x8a,0x4b,0x4,0xef,0xc5,0x25,0xe6,0x70,0x6a,0xa3,0x60,0x20,0xbf,0x8b,0xb1,0x3b,0x8d,0x27,0xa9,0xdc,0xe4,0x7c,0xf6,0x42,0x99,0x8f,0x51,0xdf,0xa3,0xf8,0x8c,0xe7,0xb2,0x44,0xfd,0x3,0xfb,0x23,0xae,0x51,0xa2,0x9b,0xb4,0x29,0xbf,0xfb,0x99,0x75,0xe9,0x57,0xa6,0x20,0xc0,0x6d,0xb4,0x5c,0xff,0x53,0x6a,0x9e,0xa7,0xe7,0xb1,0xaf,0xec,0x51,0xe2,0x48,0x46,0xef,0xe1,0x60,0xf7,0xa8,0xc6,0xbd,0xe7,0x12,0xa,0xa4,0xbd,0x4d,0xb7,0xc0,0xca,0xda,0x47,0xf7,0xb7,0x26,0xed,0x20,0x22,0x55,0xc,0x2f,0x21,0xa1,0xc6,0x6f,0x7f,0x5b,0xad,0xde,0x3b,0xcb,0x7d,0x42,0xf,0xc8,0x28,0xb4,0x23,0x4d,0xe8,0x54,0xd1,0x97,0x8e,0xa8,0xfd,0xa6,0x89,0x6c,0x26,0x80,0x67,0xaa,0xcd,0xb0,0x6,0xae,0x26,0x52,0x29,0xe1,0xa1,0xe8,0xdd,0xf6,0xdd,0xd,0x51,0x2d,0x32,0x4d,0xfd,0xb0,0x66,0xdf,0xc,0xbe,0xe0,0x5,0xd4,0x9a,0x71,0x2a,0x54,0x22,0x87,0x56,0xa3,0xe,0x65,0x13,0x5a,0x41,0xc6,0x37,0xce,0xfd,0xa3,0x31,0x6e,0x29,0xb3,0x85,0x86,0xa5,0x3a,0xd2,0x81,0x35,0x7,0x15,0xe0,0x91,0x53,0x68,0x4f,0x39,0xa6,0x61,0xd9,0xd9,0x44,0xa3,0xe7,0x1a,0xb,0x3b,0xe0,0x9d,0x27,0xd3,0x14,0x32,0xcb,0x72,0x8c,0xb6,0x6c,0xa5,0x20,0x11,0x6,0xf6,0x30,0xe5,0xba,0xb8,0x77,0x69,0x1e,0xba,0x2a,0x17,0x8,0xff,0xb,0x3,0x9,0x74,0x9f,0xd3,0x68,0x5f,0x3b,0xc4,0x50,0xa,0x49,0xf7,0x9e,0xd6,0x5b,0x2e,0x32,0x4b,0xd4,0x52,0xe,0xd1,0x41,0x5,0xe9,0xee,0x22,0x28,0x2b,0x0,0x99,0xde,0xdc,0x82,0x48,0x54,0x7d,0x7c,0xa2,0x22,0x26,0xc9,0x15,0xa0,0xae,0xff,0x94,0x9d,0x46,0xe0,0x8a,0x2c,0x6c,0xbb,0xc2,0x36,0xc9,0x2d,0x30,0xd6,0x38,0xb8,0x10,0x50,0x3f,0x5d,0x4c,0xd8,0x15,0xd9,0x59,0xd2,0x53,0x8d,0xc6,0x7d,0x55,0x76,0xe8,0xe,0x52,0x97,0x8,0x76,0xc8,0xe2,0x43,0x7b,0x22,0xa7,0xd1,0xe9,0x1a,0xd8,0x9a,0xe3,0xe0,0xd9,0x17,0x9e,0x74,0xd0,0x72,0x91,0x9,0xc3,0x69,0x7,0x89,0x8a,0xe2,0x7,0xe2,0x45,0x3a,0xb2,0xda,0x85,0x95,0xd4,0x64,0xda,0xb7,0xc2,0xa2,0x71,0xdc,0xee,0x8a,0x95,0x8,0x1,0x15,0xe7,0x4e,0x9a,0xcc,0x33,0x29,0x63,0x9f,0x8c,0x45,0x26,0x56,0x54,0x7c,0x1f,0x27,0x67,0x23,0x8c,0x1c,0x71,0x2d,0x8,0xb2,0xa2,0x31,0x33,0xdc,0x62,0x53,0x48,0xf4,0x6a,0x60,0xa1,0xe3,0x3e,0xb,0x43,0x28,0x3d,0x43,0xb0,0x15,0xa3,0xf0,0x58,0x5,0x43,0xeb,0xad,0x20,0x4f,0xdc,0xfa,0xa4,0x34,0x94,0xaa,0x23,0xd2,0xf4,0x34,0x23,0x22,0x2f,0x36,0x5c,0xe,0x22,0x49,0x3,0x21,0xb,0x69,0x38,0xb,0xfa,0x57,0xce,0xe6,0xba,0x68,0x72,0x6,0xfe,0xf0,0xdb,0xec,0x28,0xab,0x46,0x48,0x7e,0xbd,0x76,0x24,0xb3,0x8e,0xb2,0x7e,0xf7,0x60,0xd0,0x9d,0x8c,0xfc,0xef,0xb0,0x18,0xf1,0x5a,0xad,0x40,0xe4,0xb9,0xce,0x67,0x40,0xbf,0xc,0xe9,0x89,0x95,0xca,0xe3,0x0,0x48,0x96,0x63,0xd1,0xaa,0xe9,0x64,0x9b,0x74,0x48,0xdd,0x75,0xf4,0x50,0x55,0xa5,0x14,0xc4,0x1d,0x32,0x1b,0xf8,0x89,0xf8,0x14,0xdf,0x18,0xe0,0xce,0x11,0xd,0x80,0xf0,0xc4,0x75,0xd6,0x73,0xf4,0x78,0xa3,0x11,0x13,0xe0,0x3b,0x10,0xb2,0x30,0x3a,0x55,0x54,0x25,0xaa,0x15,0x48,0x9b,0x6e,0xe4,0x2c,0x49,0xb8,0xa5,0xb4,0xbc,0xae,0xe3,0x2a,0x9e,0xb8,0xf1,0x6,0xbf,0x8c,0x9b,0xdd,0x6,0xcd,0xe9,0x53,0x6e,0x9a,0xdf,0x6c,0x1f,0xcd,0x4d,0x37,0x2b,0xe6,0x85,0x19,0x33,0xd0,0xce,0x80,0x69,0xe7,0x1c,0x72,0xa4,0xd6,0x81,0x8,0x87,0xbd,0xc3,0x4a,0x58,0xff,0xeb,0x31,0x22,0xf0,0x92,0xc8,0x2c,0x16,0x2e,0xe,0xee,0xe7,0xdc,0x77,0x41,0x9e,0xb5,0x4a,0xa2,0xc,0x1c,0x54,0x22,0x1e,0x6,0x56,0x39,0xba,0xdb,0x3,0xc,0x8c,0xf6,0x66,0x42,0x36,0x83,0xeb,0x76,0x7b,0x9e,0x38,0x8c,0x25,0xa8,0x65,0x63,0xbe,0x67,0x11,0x21,0xf4,0x78,0x7f,0x65,0x2a,0x49,0x1f,0x60,0xd9,0xfa,0x9,0xdc,0x20,0x7e,0x58,0x55,0x6d,0xae,0x74,0xd4,0xaa,0x97,0xd5,0xf,0x89,0x6a,0x63,0xf8,0x97,0x22,0x5f,0xc1,0x5f,0x1f,0x1d,0x82,0xe5,0xd3,0xf7,0x16,0xf5,0x4e,0x74,0xb0,0xac,0x9f,0xf3,0xdc,0xcc,0x98,0x9e,0x8d,0x54,0x5e,0xa1,0x7e,0xd1,0x22,0x78,0xe2,0x6,0xea,0x81,0x8d,0x8e,0x67,0x54,0x80,0xbc,0xa,0x60,0x88,0x5,0x87,0xbd,0x3e,0xbc,0xcc,0x8d,0xec,0x5a,0x72,0x29,0xc0,0x22,0xe9,0xf0,0x4d,0x1c,0x4d,0x9a,0x5e,0xe8,0xfc,0x6,0xfc,0xec,0xcb,0x8c,0xc6,0xfa,0x81,0x39,0xea,0x8,0x1a,0xe1,0xde,0x6b,0xc8,0x95,0xcb,0x20,0xc0,0x3d,0x95,0xf,0x4b,0x31,0x67,0xdf,0xf3,0xe4,0x1b,0x21,0xac,0x33,0xb0,0x51,0xfa,0xfe,0xbc,0xe7,0xa5,0x37,0x7c,0x6,0x33,0xb7,0x1,0x68,0x8c,0x1e,0x7d,0x6c,0x23,0x7e,0x43,0xe,0x17,0xc,0xf8,0xda,0x5e,0x58,0x8a,0x6b,0xbe,0x95,0x5e,0x85,0x47,0xec,0x98,0x4e,0xe5,0x33,0xaa,0xd3,0xb8,0xaa,0x2c,0x59,0x19,0x7b,0x56,0xa,0x3d,0x90,0xe6,0xe2,0x21,0x3b,0x97,0x7f,0xae,0x5a,0x8b,0x32,0x9d,0xb0,0x17,0x1d,0x10,0x7a,0xca,0x80,0x9a,0x7,0x75,0x33,0x52,0xb0,0x30,0x36,0xf8,0x50,0xec,0x5a,0x81,0xc6,0x76,0x6a,0x8e,0xc1,0xb1,0x20,0x43,0x0,0xde,0x7e,0xd3,0x46,0xc5,0xd3,0xc1,0x3b,0x91,0xdf,0x60,0xc,0x33,0xda,0xa2,0x87,0xe6,0x5,0x9c,0xf0,0x32,0x13,0x33,0x1,0x6,0x82,0x95,0x83,0xdc,0xb8,0x29,0x1c,0x6a,0x25,0x44,0x43,0xf8,0x13,0x19,0x4a,0x3c,0x2c,0xb,0x74,0xe6,0xf1,0xf,0x92,0x5f,0x2b,0x8f,0x9a,0xdd,0x99,0x7c,0x7,0xdb,0x32,0x88,0x6d,0x92,0xe3,0xcc,0xe0,0x8,0x9,0x64,0x4e,0x2f,0x45,0xc6,0xb7,0x4,0x58,0xcd,0xea,0x88,0xb7,0xb3,0x80,0x2c,0x4c,0x9c,0xf,0x59,0xae,0xd1,0xda,0xc3,0xf0,0xef,0x75,0x9c,0x63,0x72,0x76,0x31,0xa0,0xbc,0x32,0x90,0x36,0x61,0xef,0xb8,0xc6,0x4,0xd6,0x4e,0xdd,0x5e,0xa9,0xba,0xde,0xa,0x26,0xdf,0xd8,0x7e,0xd0,0x5e,0xad,0xd5,0xc8,0x83,0xf2,0x78,0x99,0xcb,0xfb,0x7e,0x8f,0xc6,0x7b,0xa1,0x33,0xd,0x1f,0x1a,0x55,0x96,0xf8,0xeb,0x6e,0x60,0xa8,0xae,0xd8,0xf,0x19,0xa3,0x54,0x33,0xdc,0x3,0xa4,0x76,0x9b,0x8,0x42,0x8e,0x58,0xf,0x53,0x19,0xf1,0x96,0xa0,0x6c,0x99,0xa6,0x77,0x1b,0x5f,0x70,0x67,0xd,0xbb,0x23,0xcb,0x2e,0x44,0x96,0xed,0x94,0xa6,0xde,0x52,0x9b,0xd2,0x55,0xf8,0xe0,0xc9,0x86,0xb,0x56,0x8,0xf6,0x94,0x90,0x8f,0x44,0xa8,0x6,0xb9,0xcd,0xd0,0x40,0x1a,0xb1,0x45,0xfa,0xb0,0x19,0x7d,0x8a,0x9b,0x44,0x5f,0x2,0x47,0xb2,0x23,0x6,0x4c,0xcc,0x12,0x9b,0xbf,0xaa,0x57,0x75,0x29,0x8d,0x71,0x2e,0xc2,0xab,0x9f,0xe7,0x76,0xbd,0x9b,0xc3,0x39,0xc5,0xda,0x55,0x18,0x5e,0x4e,0x89,0xd8,0x58,0x25,0xef,0xeb,0xa9,0x2,0x28,0x47,0x44,0x87,0xd,0xca,0x61,0x2e,0x88,0xfc,0xa0,0xb7,0x76,0x32,0x60,0xfc,0x2a,0xc0,0x33,0x84,0x5,0xdb,0x13,0x57,0x2e,0xca,0x54,0xe6,0xeb,0x16,0x58,0x36,0xbf,0x9a,0x63,0x67,0x20,0x36,0xdf,0xe7,0x70,0xcc,0x3f,0x32,0x6d,0x56,0x57,0x7e,0xe9,0xfe,0x69,0xca,0xbd,0xc4,0x95,0x9a,0x84,0x5e,0xf8,0x31,0x46,0x1a,0xb,0xc,0x64,0xf,0x34,0xf8,0x75,0xa0,0xaf,0x72,0x3,0x25,0xa2,0x7e,0x98,0x92,0x34,0x81,0xc6,0x1,0x3f,0x16,0x78,0xff,0x65,0x50,0x4c,0xf8,0xd,0x73,0x81,0x9f,0x33,0xa3,0xb2,0x68,0x96,0x47,0x30,0xe1,0x5a,0x3d,0xc3,0xd7,0x9d,0xec,0xaa,0xa,0x3,0x10,0x2b,0xd3,0x47,0xb1,0x1a,0xa2,0x6d,0x6b,0x8e,0x8d,0xed,0x3d,0x9d,0x14,0x97,0xe9,0x76,0x3,0x2e,0x1c,0x55,0x41,0x1e,0x5a,0xb8,0xdd,0xc3,0xad,0xdb,0xb5,0xe6,0x4f,0x9d,0x7c,0x81,0x96,0x22,0x8e,0x9d,0x97,0x9c,0xf6,0x9,0x20,0x40,0x48,0xe0,0x36,0x99,0xcf,0x21,0x8,0x2d,0x0,0x70,0x4a,0xfc,0x18,0x85,0x66,0x4e,0x3e,0xeb,0xfc,0xe2,0x40,0x4f,0x20,0x58,0xfb,0x7a,0x5d,0x1a,0xd4,0xc4,0x13,0x6a,0xf9,0x87,0xcc,0x87,0xba,0xd8,0x8f,0xf6,0x90,0x66,0xea,0x91,0xb,0x8e,0x2f,0xa9,0x82,0xe3,0x30,0x6e,0x5f,0xab,0xa2,0xfd,0xcc,0xdb,0xb4,0xf,0x70,0x6,0xdf,0x9b,0xf9,0x23,0x15,0x4d,0xfe,0x4a,0x97,0xa5,0x78,0x2b,0x2,0xfe,0xdc,0x7d,0x3a,0xcf,0xf0,0xef,0x1,0xa,0x2c,0xa6,0x88,0xff,0xf0,0x9c,0x8f,0x5d,0x6,0xbf,0xef,0xeb,0xdd,0x5b,0xd6,0x10,0x21,0x56,0x96,0x27,0x74,0xb3,0x70,0x6d,0x8f,0xe4,0x40,0x8a,0x26,0xa7,0x2f,0x57,0xdf,0x41,0x67,0xc7,0x24,0x58,0x7d,0x4e,0x27,0xb9,0xc5,0xda,0xda,0xe5,0xef,0x90,0xf6,0xd,0x9,0x78,0xa9,0x68,0x75,0x1e,0x29,0xdf,0x6c,0x8f,0xd8,0x36,0x14,0x59,0x77,0xfc,0x91,0xfa,0xed,0xbe,0x1e,0x63,0xc6,0x7f,0x60,0xb6,0x85,0x9a,0xd9,0xae,0xe3,0x5e,0x56,0x81,0x51,0xa7,0xb8,0xd7,0x3f,0xb8,0x8f,0xb,0x71,0xca,0xd6,0xc4,0xb5,0x56,0xcd,0x51,0x5a,0x34,0x3f,0x73,0x21,0x30,0xe9,0x7,0xcd,0xaa,0xc6,0x92,0xb9,0x1,0x78,0x9,0x42,0x9e,0xf5,0x4b,0xc8,0x3,0x1,0xdf,0x3e,0x44,0x28,0xdb,0x42,0x90,0xc4,0x7,0x24,0x20,0x1e,0xb3,0x61,0x96,0x53,0x27,0x8f,0xac,0xe0,0xb9,0x13,0x9c,0x59,0xf9,0xd5,0x66,0x98,0xca,0xa7,0x4e,0x73,0xff,0x8b,0x31,0x1b,0x9b,0x53,0xf2,0x41,0x85,0x40,0x90,0x42,0xda,0x57,0x2c,0x6e,0xd4,0x35,0x67,0x90,0xd8,0x48,0x34,0x5,0x85,0xd8,0xee,0x2b,0xf0,0x5c,0xe2,0x63,0xf8,0x7a,0x87,0x43,0x8,0x46,0x8a,0xee,0x6f,0x92,0x2c,0xda,0x7d,0x7e,0x3d,0xdb,0xa7,0x79,0x74,0xb4,0xbb,0x72,0x6d,0xba,0x66,0x8f,0xa8,0x11,0x4e,0xab,0xa,0xbc,0xc3,0x6c,0x9,0xf,0x62,0xff,0x3d,0x44,0x46,0x34,0xc6,0x3b,0xbe,0xc,0x23,0xf0,0xd5,0xe3,0x26,0xfd,0xbe,0xc,0x72,0x87,0x2f,0xdb,0xa2,0x14,0x49,0x2b,0x54,0xea,0x79,0x2c,0xbb,0xec,0x96,0xaa,0xbb,0x5d,0x35,0xeb,0xd5,0x3a,0xd7,0x3c,0x99,0x55,0x8e,0xb5,0x0,0xc6,0xb8,0x45,0xec,0x10,0x76,0xa9,0x37,0x2a,0x3d,0x5e,0xdd,0x22,0x6b,0xb6,0xc8,0x4,0xd8,0x41,0x61,0x47,0xd5,0x17,0x8c,0xfe,0xfe,0xd4,0xd7,0x8c,0xd4,0x74,0xac,0x21,0x18,0x34,0xe,0x9a,0x80,0x79,0x6b,0xc6,0x87,0x6a,0x64,0x48,0xc4,0x33,0xce,0x8d,0x91,0x6a,0x77,0xac,0xc3,0x83,0xb,0x9c,0xc4,0xc7,0x39,0x2e,0xd1,0x61,0x7b,0x5c,0x1c,0xe,0x1b,0xfb,0x8,0x6f,0x8d,0x99,0x40,0x5a,0x2f,0x82,0x5b,0xd4,0xab,0x7b,0xc3,0x2e,0x67,0xd5,0x46,0xa8,0x24,0x7d,0x85,0x6e,0x97,0xcf,0xe,0xdc,0x6,0x60,0x71,0x9e,0x3f,0xe5,0xa,0x50,0x41,0x48,0xe0,0xbf,0x6b,0x7e,0x22,0x2b,0x24,0xc2,0x3f,0xb7,0x15,0x84,0x2b,0xa0,0x3b,0xbe,0xa6,0xda,0x58,0xc8,0x2f,0x70,0xaf,0xe6,0x1c,0xde,0x15,0x6,0x66,0x20,0x35,0xd6,0xba,0x28,0x82,0xf1,0xe6,0x42,0x0,0xbd,0x70,0x17,0x46,0xf8,0xc1,0xbc,0xfa,0xce,0xa7,0x5c,0x8e,0x8e,0x2b,0x82,0x11,0x5c,0x5d,0xf4,0xcf,0x3b,0xeb,0x53,0xb5,0x9a,0x70,0x88,0xbe,0xc0,0x1e,0x6f,0x8c,0x28,0x72,0x79,0x45,0x64,0xc7,0x20,0x2b,0x4e,0x2b,0xd5,0x3,0x64,0xdb,0xa3,0x7a,0xf1,0xc7,0xa9,0xc8,0x18,0xfc,0x49,0x4d,0x29,0xd6,0x23,0x98,0xab,0xa2,0xc2,0x5e,0xcf,0xb9,0x5d,0x77,0xfc,0x29,0x38,0x43,0x56,0xfc,0x24,0x96,0x53,0x74,0x51,0x2f,0xad,0x99,0x76,0x45,0x6e,0x76,0x5d,0x16,0x99,0xe4,0xd1,0xab,0xdb,0x8b,0xe0,0xe6,0x70,0x19,0x5a,0xf1,0x8a,0x39,0x13,0xa5,0xdf,0x9d,0x4,0xba,0x74,0x64,0x5,0x8e,0x86,0x78,0xf1,0x5f,0x3c,0x9b,0x89,0x22,0x9a,0x96,0x23,0x2e,0xb6,0xbe,0x74,0x7a,0x5f,0x5d,0x58,0x63,0xea,0x5a,0x45,0x12,0xbc,0xb2,0x81,0x6e,0x13,0x8f,0x1a,0x63,0x33,0x3e,0x7e,0x45,0xd2,0x7d,0xdc,0xb8,0x36,0xbe,0x90,0xe0,0x18,0x78,0x51,0x9f,0x3b,0xf,0xcb,0xb9,0x91,0x98,0xab,0x39,0x9b,0xd6,0x9e,0x92,0xbf,0xaa,0xd,0xeb,0x24,0x42,0x74,0xaa,0xb,0x1c,0xda,0xf6,0xf,0x8,0x59,0x16,0x1f,0xc9,0xb6,0x40,0x2f,0xa4,0x83,0xd2,0x6f,0x6b,0xed,0x90,0x78,0xfd,0xdb,0xf1,0x7a,0xad,0xdb,0xf2,0x9f,0x74,0xe8,0x1d,0xe9,0x89,0xa0,0x53,0xbb,0x7a,0x78,0x15,0x53,0x89,0x2,0x5f,0xe8,0xec,0x11,0x38,0x4a,0x5,0x75,0xc8,0x35,0xa0,0xe7,0xb,0x4a,0xe1,0x1f,0x45,0x20,0x8d,0x7d,0xb0,0x72,0xd0,0xfc,0x13,0x47,0xe8,0x74,0x7e,0x8f,0xd,0x74,0xfb,0xe9,0x20,0xd9,0xec,0x72,0x9e,0xaa,0xed,0x3d,0x20,0x71,0x62,0x82,0x5e,0xfa,0x7f,0xf3,0x23,0x1e,0x97,0x47,0x61,0x6c,0x27,0xc8,0xb6,0x95,0x42,0xab,0xc0,0x90,0x13,0x6a,0x55,0x2a,0x92,0x4d,0x36,0x9c,0x90,0x8e,0x47,0xc9,0x3f,0xe7,0xf4,0x41,0x22,0x84,0xb2,0xd9,0x68,0xe9,0xd4,0xbd,0xb1,0x76,0x9,0x3c,0xb9,0x61,0x6a,0xe1,0x89,0x45,0x86,0x15,0x4a,0xf1,0x41,0x85,0xa5,0x8f,0xe8,0x85,0x22,0x30,0x7c,0xe2,0xdc,0x89,0xa4,0xbe,0xb4,0xfa,0xef,0xaf,0x68,0xf1,0x7b,0x48,0x97,0x77,0xd3,0xb4,0xee,0x33,0x6c,0x6b,0x6f,0xe7,0xbe,0x89,0xa0,0xe7,0x7e,0x4e,0x9e,0xed,0xa7,0x26,0xd5,0x93,0xf4,0xed,0x8b,0x84,0xe2,0x7b,0x54,0xdc,0xa2,0x9f,0x58,0x94,0x9b,0xc1,0x41,0x8,0x8f,0xd9,0x7d,0xbc,0x1b,0x2,0x1d,0xd6,0xca,0x84,0xe1,0x5b,0x92,0xf2,0xf2,0x9a,0x90,0x10,0x4a,0x61,0xf2,0xa6,0xa5,0xca,0xae,0xa,0x93,0x16,0x48,0x14,0x28,0x53,0x64,0x2c,0x17,0xa7,0x6,0xb5,0x40,0x2a,0x54,0xe7,0x71,0x7f,0xfb,0xec,0x48,0xac,0xaa,0x82,0xcc,0x68,0x6b,0xe8,0x41,0xd9,0x57,0x9d,0xa1,0x49,0xc1,0xa9,0x42,0x38,0xdd,0xf9,0x24,0xe4,0xb3,0x83,0x95,0x99,0x0,0xb3,0xa,0x1c,0xa8,0xc6,0x5b,0x8c,0xb1,0x6e,0xb,0xd5,0x53,0xff,0x8a,0xb8,0x48,0xa,0x67,0x3,0x30,0x15,0x63,0x91,0xcb,0x5b,0x60,0x50,0xba,0x56,0x60,0x15,0xb9,0xef,0xf6,0x5e,0x6e,0x45,0x9e,0xbb,0xd,0xac,0x6c,0xda,0x71,0x3d,0xa2,0x18,0x3b,0xcd,0x97,0x7b,0x1b,0x15,0xbc,0x68,0x69,0x24,0x4,0x9c,0x23,0x95,0xe4,0xdf,0x6a,0x16,0x1a,0x35,0xfc,0x48,0x65,0x91,0x4b,0xa9,0x93,0x84,0x77,0x6d,0xf,0x43,0x64,0x4f,0x3f,0x11,0xef,0x6e,0x32,0x8,0x98,0x18,0xc9,0x41,0x80,0x85,0x17,0x5c,0xb5,0xf4,0x84,0x45,0x1,0x77,0xfa,0xac,0xb8,0xda,0xd6,0x75,0xb,0x2f,0xab,0xe9,0x95,0xd4,0xc4,0xb9,0xea,0xd8,0xfd,0x8a,0xa1,0xae,0x29,0xe9,0x0,0xaf,0x3a,0x3a,0x47,0x2b,0x44,0xb6,0xad,0xc,0x5c,0x20,0x80,0xd1,0xc8,0xe1,0xa9,0x5a,0xfa,0x2f,0x5a,0x67,0x81,0x54,0x39,0x5b,0xa,0xa1,0xac,0xde,0xee,0x71,0xf7,0x4c,0x18,0x8a,0xf2,0xe1,0xbd,0xd3,0x88,0xd5,0xb7,0x58,0x58,0x8,0xa4,0x80,0xd8,0xee,0xb1,0x6c,0x92,0x2,0x3c,0x5c,0xf6,0xc,0x61,0xe5,0x25,0x40,0xab,0x21,0xa,0x34,0xad,0x98,0x1a,0x19,0xa9,0xe2,0xdb,0xc4,0xae,0x44,0xc0,0x69,0xea,0x29,0xcf,0xe5,0x39,0x49,0x54,0x82,0x7c,0xb4,0x58,0xdf,0xcd,0x70,0xb7,0x6f,0x3f,0xd,0x9e,0xe0,0xfc,0xf2,0xbd,0xce,0x5,0xd0,0xbc,0x4f,0x75,0x3b,0xe0,0x5a,0xd9,0xac,0x68,0xa1,0x65,0xc2,0x67,0x6d,0xc6,0x7e,0x52,0x79,0x41,0x9a,0x8b,0x88,0xf3,0xec,0x21,0x1d,0xff,0x79,0x8d,0x27,0xcd,0xcf,0xf5,0x59,0x6b,0xd0,0x9b,0xc6,0x6,0xc8,0x9c,0xdb,0x59,0xe4,0x61,0xfb,0x94,0x7f,0x2b,0x9e,0x86,0x8c,0x89,0x23,0x82,0x22,0xaa,0x55,0x51,0x5d,0x5e,0x64,0x24,0x22,0x22,0xf2,0x98,0xaa,0xdc,0xde,0x1c,0xbc,0x3c,0xf8,0xbf,0x13,0x46,0xf7,0x36,0x39,0xe1,0x61,0x64,0x93,0x36,0xb3,0x79,0x9b,0xbb,0x9a,0xc3,0xbe,0x6b,0x68,0x92,0xd7,0x91,0xa8,0x87,0x2b,0x7b,0x49,0x95,0xb,0x74,0xf,0xb0,0xd6,0xfb,0x81,0x50,0x7b,0xcf,0x55,0xbf,0x3f,0xb1,0x2c,0x7b,0xbf,0x1e,0x40,0x6,0x53,0x6a,0xed,0x84,0xdf,0xda,0x3d,0x7d,0x8a,0xc5,0xb6,0x11,0xa8,0x9d,0xde,0x50,0x26,0x61,0xf9,0x5d,0x86,0xd4,0x10,0x66,0x89,0xfb,0x55,0x31,0xb9,0x81,0xdd,0x53,0x3e,0x19,0x18,0xd9,0x5f,0x1c,0xbd,0xf5,0x83,0x66,0x91,0x20,0x9b,0x61,0xf0,0xde,0x4e,0x3d,0x43,0x84,0xb5,0x3,0xfc,0xc,0x1b,0xb9,0x52,0x33,0xb1,0x1f,0x8,0xfb,0xe6,0xab,0x8e,0xec,0xe7,0xbf,0x74,0xe5,0xbf,0x2e,0x33,0x44,0xe1,0x27,0x1e,0x88,0x8,0xb1,0x33,0x7b,0x9a,0x14,0x87,0x57,0xfb,0x21,0x55,0xed,0x3b,0x0,0xf2,0xdb,0x22,0xa7,0x3,0x62,0x69,0xf3,0x50,0x28,0x37,0xbe,0x54,0xd5,0x44,0x34,0xf,0xfb,0x3c,0x7c,0xba,0x32,0x1,0x63,0x40,0xb6,0x97,0x3f,0x47,0xb7,0xb1,0x79,0xb8,0x70,0x9d,0xf6,0x2a,0x8,0x1f,0xf3,0x2e,0xfa,0x54,0xf3,0xf4,0xf,0x4c,0xa0,0x77,0x9,0x82,0x8e,0x5c,0xab,0xd7,0xb8,0x62,0xba,0xe9,0x1d,0xd4,0x37,0xaa,0x2f,0xbd,0x2e,0x70,0x95,0x3b,0x43,0xb7,0xb0,0x74,0x38,0x6c,0x86,0xae,0x4c,0xbf,0x13,0x72,0x7a,0x93,0x3d,0x3,0xce,0xf4,0x29,0xdf,0x2d,0x17,0x64,0x49,0xbf,0x2f,0x64,0xfa,0xe8,0xa6,0xc1,0xfd,0xa7,0x7a,0xb1,0x56,0xe9,0x36,0x13,0xcf,0x3,0xd1,0x3b,0xcb,0x7a,0x91,0xbd,0x21,0x10,0x8d,0x77,0xb8,0x22,0xb0,0xd8,0x55,0xcb,0x3e,0xe9,0x52,0x38,0xe2,0x49,0x75,0x44,0xeb,0x2c,0xba,0xbf,0xfa,0xde,0x7d,0x60,0x79,0x3c,0x3b,0xbd,0x10,0x47,0xe3,0xf3,0x15,0x91,0x0,0x39,0xc8,0x34,0xe0,0xd0,0x41,0xab,0xea,0x3b,0xbc,0xd5,0xb5,0xd9,0xa5,0x31,0x97,0xc1,0xe8,0x7f,0x24,0xc9,0x6c,0xff,0xc9,0x3a,0xeb,0x3c,0xe5,0x5d,0x94,0x92,0xa3,0x94,0xb4,0xad,0x5e,0x2,0xa9,0xee,0xed,0x46,0xc3,0xc2,0xe1,0xfa,0xde,0xf0,0x1d,0x62,0x85,0x2f,0xd7,0x63,0x13,0x9,0x4f,0x9f,0x11,0xa1,0xca,0x69,0x90,0x7a,0xe7,0xe,0x9a,0x45,0x72,0xba,0x98,0xcb,0xe0,0xab,0x7d,0xc0,0x59,0xeb,0x73,0x21,0xaa,0x1,0x8b,0x25,0x56,0xdf,0x65,0x5d,0x43,0x6,0x7b,0x6,0x48,0x9a,0xa9,0x4b,0xfe,0x53,0xb5,0xc0,0xd1,0x48,0xcc,0xb9,0x4,0x97,0x54,0x8c,0x80,0xbe,0xb4,0xae,0xc4,0x61,0xed,0x4c,0x52,0xe2,0xc6,0xa,0x60,0x75,0x91,0x67,0xd4,0xf7,0x55,0x29,0xe5,0x7e,0xe0,0xbd,0xff,0xbe,0xe0,0x48,0x9a,0x36,0xd4,0xa8,0x56,0x90,0x68,0x48,0x5b,0x11,0x37,0xd6,0xbf,0xc4,0x2a,0xf6,0x65,0xf9,0x42,0xc1,0x6c,0x1d,0xb5,0x98,0xc4,0xee,0x8d,0xe7,0xa9,0x7e,0xf,0x48,0xa2,0x89,0x1b,0x71,0x32,0xc9,0x83,0xa8,0x97,0xe1,0xe6,0x9c,0x8f,0x97,0xe6,0xd6,0xeb,0x24,0x50,0xd5,0x2f,0x6,0x1e,0xcf,0xbc,0xb7,0xa2,0xed,0xd8,0xf8,0x4c,0xb1,0x36,0x17,0xac,0xba,0xb6,0xdf,0xeb,0x3d,0xf2,0x36,0x60,0xde,0x48,0xf0,0x86,0x38,0xe1,0xd7,0x10,0xb1,0x36,0xb7,0x30,0xc2,0xa1,0x1d,0xa2,0x40,0xf3,0xfa,0x48,0x33,0xd8,0x7a,0xfd,0x26,0xee,0x3e,0x37,0x68,0xd7,0x6c,0xa8,0xc4,0xdd,0x28,0xbe,0x48,0xc6,0xf,0xd8,0x11,0xfd,0x51,0xff,0xcd,0x46,0xee,0x75,0x69,0xeb,0xa5,0x87,0x7a,0xea,0xd9,0x31,0xe,0x2f,0xc1,0xdc,0xb3,0x5a,0x18,0xcb,0x3e,0x9,0x9e,0xb6,0xca,0xa2,0xbd,0x9c,0x48,0xe5,0x55,0x76,0x9c,0x5d,0xa3,0x6d,0xef,0x7f,0xbd,0x49,0x18,0x83,0xf8,0xee,0x5e,0xe8,0x7d,0xac,0x52,0xad,0x74,0x6a,0xcb,0xa8,0x90,0xc8,0xaf,0xaf,0xc5,0xc8,0xc1,0x7b,0xb5,0x6b,0xf4,0xc1,0x50,0x7a,0xa9,0xd0,0x36,0x37,0x70,0x7b,0xa2,0x19,0x42,0xb4,0x60,0x19,0xc2,0x9,0x73,0xdc,0xbf,0x1d,0xcb,0x11,0x84,0xe4,0x15,0x90,0xf5,0x2a,0xf1,0x5d,0xbc,0xfe,0xfe,0x64,0xaa,0xe5,0x66,0x44,0xc2,0xb,0x4,0x1d,0xb3,0xe9,0x19,0xd2,0xa7,0xa9,0xbc,0xd7,0xc8,0xda,0x8d,0x84,0xe9,0x98,0xc5,0xb3,0xb6,0x2,0xf8,0x84,0x1,0xcb,0x8a,0x96,0xc0,0xa9,0x69,0x56,0x51,0x6e,0x38,0xcc,0x39,0xc8,0xf7,0x57,0x84,0x4d,0xbd,0x9d,0x1d,0x8,0xef,0xc4,0x19,0xa2,0x12,0xde,0x1b,0xde,0x1a,0xd2,0x50,0xea,0x1d,0x33,0x59,0x22,0xc5,0xda,0x78,0xc7,0x8f,0xb8,0x38,0x5d,0x59,0x23,0xaa,0xe,0x61,0x21,0x54,0x12,0x4c,0xfa,0x11,0xfc,0x63,0x82,0xd0,0xda,0x84,0x68,0x3a,0xee,0xde,0x9a,0xd,0xa3,0x52,0x39,0x95,0x8a,0x45,0x44,0x6f,0x7,0x24,0xd0,0x85,0x4d,0x4c,0x3c,0x94,0x1c,0xd2,0x8b,0x37,0x54,0x2b,0x5b,0xf1,0x49,0xe0,0x8c,0x1a,0x2e,0x81,0x4d,0x5f,0x9b,0xed,0xb9,0xc0,0xdd,0xbd,0xa6,0xb,0x16,0xee,0xc5,0x98,0xb,0xab,0xd0,0x3f,0xbc,0x15,0xf,0xaa,0x86,0x43,0xc9,0x42,0xe3,0x74,0x79,0x48,0xc6,0x5e,0x3b,0xbd,0x2f,0x4b,0xef,0xc0,0x58,0x4a,0xad,0x6a,0x5f,0x3c,0x55,0x84,0x86,0xa,0x3c,0x8d,0xe9,0x49,0xb6,0x1a,0x51,0xc1,0xa2,0x32,0x2f,0x91,0xdd,0xfd,0x8b,0xbd,0xd8,0x6d,0x93,0x55,0x98,0xdb,0x8b,0x62,0x18,0xef,0x37,0xc3,0xa5,0x68,0x8,0x2a,0x34,0xd0,0xb0,0x8a,0x46,0xe9,0x5b,0x7b,0xdc,0xc8,0x30,0x53,0x66,0xe5,0xff,0xf3,0x2e,0xe6,0xf1,0x1c,0xe8,0xfb,0x29,0x9f,0x23,0xb2,0x24,0xe2,0x17,0x6b,0x81,0x57,0xb,0x85,0xff,0xde,0x13,0xe8,0x35,0x1a,0xe2,0xad,0x49,0x61,0x72,0xac,0xa9,0xf1,0xa1,0x9c,0x62,0x79,0xf6,0x46,0x7c,0x9f,0x65,0x6e,0xe2,0xe7,0x81,0x39,0x24,0x4e,0xf6,0x91,0xb7,0x71,0xf5,0x64,0x95,0xf9,0xa1,0xcc,0x9e,0x58,0xaa,0x23,0x30,0x63,0x3e,0xd4,0x73,0x3d,0x8a,0x30,0x9a,0x22,0xcb,0x3a,0xe8,0x65,0xe9,0xfe,0xe8,0xc9,0x4c,0x2c,0x7e,0xc4,0xd0,0x69,0x12,0x68,0x73,0x54,0xe5,0x9e,0x7b,0x60,0x18,0x52,0xec,0x2f,0xb,0xa6,0x2c,0x34,0x55,0x49,0xfd,0xcc,0x2b,0x80,0x2d,0x2d,0x3a,0x87,0xee,0x2a,0x15,0x8a,0x5b,0x76,0xd,0xde,0x71,0x74,0x72,0x47,0x77,0xa2,0x45,0x59,0x46,0xe0,0xa1,0x77,0x7e,0xcb,0x8e,0x32,0x85,0x8e,0x50,0x3d,0x94,0x91,0x72,0x95,0x57,0xd8,0x34,0x34,0x63,0xe9,0xa3,0xb5,0x9d,0x8f,0x3f,0x6c,0x3c,0x51,0xd4,0xc3,0x17,0x8,0x16,0x43,0xa6,0xe4,0x61,0x3f,0xad,0xe5,0xa5,0x5b,0xd,0x5c,0xd4,0x68,0xb1,0x6b,0xb3,0xd0,0x65,0xf7,0xfb,0xe5,0xd1,0xa,0xa4,0x6f,0x28,0x50,0x1b,0x62,0xfc,0xe,0x1b,0x34,0x9f,0x1d,0xab,0xb4,0x7,0x8f,0xa,0xb0,0xc5,0xcf,0x5e,0x37,0x80,0xdc,0xe4,0x6c,0xc1,0xfc,0x57,0x33,0x7a,0x69,0x11,0xce,0x9,0x67,0x4a,0x4e,0xd2,0xf1,0xc2,0x56,0xfe,0x54,0x44,0x15,0x3b,0x2b,0xfb,0xcd,0x35,0x81,0x47,0x52,0x7c,0x2c,0xa0,0xda,0xc3,0xeb,0xde,0xc6,0x76,0x1a,0x8f,0x4f,0xf8,0x8d,0x73,0xcb,0x4c,0x80,0x4a,0x39,0xa6,0x5,0x9f,0xe0,0xd6,0xb8,0xe6,0x27,0xea,0x38,0x61,0xe,0x81,0xf7,0x4c,0x6,0xe5,0xa1,0xf2,0x4e,0xea,0xc3,0x20,0xb0,0xb,0x46,0x4d,0xf8,0xb0,0xff,0x9,0xb9,0xd,0xdb,0x7a,0x52,0x1d,0xa1,0xda,0x4e,0x65,0x97,0xa6,0x25,0x41,0xe7,0x9d,0x13,0x7c,0xfc,0x10,0x2f,0x8a,0x5c,0x2f,0x79,0xd1,0xb8,0xe7,0x5c,0xef,0xda,0x3a,0x73,0xe4,0x93,0xb5,0xc9,0x76,0x75,0x72,0x94,0x5c,0xc1,0x37,0xe7,0x7e,0x7f,0xdc,0xf6,0x2d,0x49,0xe1,0x6c,0x1c,0x43,0xea,0xe1,0xe4,0xa,0x96,0x80,0x7e,0xbc,0x7e,0x42,0xff,0x2f,0x5d,0xda,0x12,0x9,0x86,0xdc,0x48,0x6,0x84,0x69,0xfc,0x14,0x6f,0x15,0xce,0xb4,0x85,0x24,0xfd,0x76,0xa0,0x9e,0x4c,0xca,0xaf,0x40,0xe1,0xc2,0xee,0xf4,0xdd,0xe6,0x84,0xf2,0xea,0xb4,0x48,0xa6,0xc2,0x38,0x75,0x74,0xd4,0x89,0xe3,0x8c,0x38,0x4,0xc7,0xfc,0xa4,0xa3,0x24,0xe8,0xf7,0xc9,0x13,0xb7,0x6b,0xf0,0x97,0xaf,0x73,0xc7,0x99,0x9,0x3e,0x25,0x8a,0x57,0xf5,0x2b,0x11,0x22,0x33,0xcb,0xd1,0x81,0x88,0x5c,0x6a,0xd9,0xbb,0x71,0x5b,0xd2,0xcc,0x6,0x23,0x40,0x59,0x4d,0x69,0xc5,0x62,0xcb,0xcb,0xbd,0x99,0xf4,0x7e,0x96,0x39,0xa5,0x43,0x8d,0x95,0xd7,0x9d,0x1e,0xcf,0xd0,0xa1,0x9d,0xf9,0x76,0xcd,0x5b,0x99,0x65,0x81,0x3e,0x7f,0xcd,0xb8,0x36,0x55,0x75,0xe2,0x83,0x6a,0x94,0x28,0xae,0xe4,0x38,0x69,0x9,0x51,0x6c,0x2a,0x2c,0x6,0xcc,0xdf,0x38,0x58,0xec,0x6d,0x92,0x52,0x88,0xc8,0x46,0x65,0x26,0x4f,0x1e,0xa5,0xd4,0xcb,0xe2,0x63,0x69,0x29,0x44,0x62,0xd7,0x97,0x8d,0x97,0x6e,0x4e,0xbe,0x7,0x93,0x1,0x51,0x7b,0x52,0x7a,0x73,0x50,0xf2,0x9f,0x68,0x47,0xc6,0x6c,0xc9,0xa9,0x5e,0x68,0x95,0xba,0x6a,0xc2,0xdb,0x85,0x52,0xf4,0xa1,0xb9,0x87,0x6f,0x1b,0xb8,0xd6,0x51,0x47,0x1d,0xde,0x7,0xcc,0x55,0xd8,0x68,0x74,0xff,0x8d,0xc6,0x6f,0x37,0xb1,0x3d,0x80,0x5e,0xa,0x98,0x5,0x32,0x59,0xc1,0x42,0xfc,0x45,0x13,0xe9,0xa9,0x35,0x25,0x2d,0x84,0x36,0xe8,0x42,0x79,0x15,0x3,0x2f,0x64,0x6b,0x37,0xdb,0x9c,0x92,0xe1,0x47,0xc8,0x6f,0xd6,0x91,0x4a,0x6d,0x18,0x45,0x62,0x17,0xef,0xce,0xe4,0x6f,0xeb,0x8c,0xb9,0x37,0x4f,0x2e,0x11,0xa4,0xf8,0xac,0x39,0x70,0xb2,0xce,0x61,0x9e,0x6a,0x11,0xfd,0xda,0x83,0x41,0xb6,0x8a,0xb8,0x9a,0x63,0xbc,0xab,0x3f,0x3e,0xeb,0x3a,0xc4,0xc2,0xbd,0xd4,0x4e,0xd9,0x28,0x9,0x19,0x33,0x1,0xa1,0x89,0x5,0x7d,0xd6,0xf4,0x60,0x8d,0xce,0xf,0xd,0xb2,0xbb,0x6c,0x27,0x6c,0xf4,0x69,0x9e,0xd0,0x89,0xc6,0x11,0x22,0x0,0x14,0x73,0x4d,0xde,0xfb,0x6e,0x8d,0xce,0x66,0x88,0x9e,0xc9,0xef,0x3,0x4,0xd9,0xe7,0x36,0x76,0xd8,0x53,0x1f,0x56,0xcc,0x7,0x83,0xb7,0x32,0x97,0x55,0x65,0x9d,0x6,0xbd,0x56,0x95,0xd3,0x50,0xc2,0xa5,0xdb,0xc6,0xd8,0x3e,0x61,0x75,0xc6,0x68,0x21,0x21,0x61,0x59,0x3e,0xda,0xe1,0x79,0xb7,0xbf,0x63,0x62,0xe1,0xd0,0x98,0xd,0x8f,0x13,0x5c,0x88,0x7e,0xae,0x97,0x7d,0x66,0x3a,0xd2,0xd5,0x27,0x28,0x51,0x1e,0xde,0xae,0x85,0x89,0xdb,0xb2,0x42,0x32,0xe7,0x67,0x19,0xd1,0xc4,0xf1,0x35,0xfa,0xae,0x7a,0x5b,0x6d,0xa6,0xba,0xec,0xa4,0xf5,0x5f,0x13,0x9c,0x7c,0xa4,0xc0,0xd,0x77,0xf1,0x25,0xe9,0xee,0x95,0x16,0xa2,0x1e,0x15,0xfc,0x2,0x31,0xd2,0x4a,0xfc,0xe6,0xea,0x4e,0xc3,0xbb,0x4e,0x4,0xa8,0x96,0xf2,0xfd,0x67,0x55,0xf5,0x1a,0xcd,0x2e,0xed,0x8f,0x6a,0xeb,0x84,0xe4,0xe2,0xca,0x93,0xc2,0xac,0x75,0xe1,0x8,0xaf,0xfd,0xe7,0x72,0x1f,0x25,0xbd,0x8d,0x74,0x68,0x19,0xc9,0x44,0x13,0x5c,0x13,0x65,0xf7,0xb9,0x25,0x1b,0xda,0x35,0x2a,0x2a,0x8f,0xd2,0x81,0xc6,0xfd,0xd4,0x20,0xb2,0xd5,0x1e,0x8b,0x89,0x24,0x47,0x2e,0xf7,0x29,0x6d,0x99,0xc8,0x5,0x31,0x9b,0xd5,0x81,0x60,0xf9,0x97,0x16,0x36,0x4d,0xd0,0x6,0x7d,0xda,0xdf,0x8c,0x64,0x3b,0xaf,0x38,0x94,0x3,0x48,0xd1,0xd1,0xab,0x67,0x8d,0xb5,0xf,0xbc,0xbd,0x6e,0x1,0x2f,0x61,0x75,0x46,0x65,0x8,0x35,0x5a,0x1e,0xc3,0x9,0x32,0x89,0xad,0xba,0x3,0x5e,0x2a,0xdc,0xc2,0x8f,0x24,0xd1,0x76,0xa0,0x29,0x58,0x26,0x20,0x48,0x92,0x1,0x65,0x31,0x5f,0x4a,0xfe,0x1,0x54,0x7f,0x99,0x26,0x3e,0x97,0x9d,0xc5,0xeb,0x8a,0xf3,0x4d,0x21,0x6c,0x77,0xa9,0x3f,0xbd,0xfc,0x88,0x27,0xc7,0x25,0xd2,0xb9,0x2c,0x96,0x9d,0xe2,0xc4,0xbc,0xf0,0xef,0x33,0x1a,0x11,0xfc,0xd9,0x35,0xdb,0xde,0x5e,0xaf,0x28,0xe6,0x46,0xf2,0x4a,0x7a,0x6e,0x53,0xf2,0xca,0x59,0x77,0x3c,0xda,0x18,0x11,0xa2,0x96,0x88,0x54,0x6b,0x8,0x6c,0x7f,0x76,0x39,0x32,0x81,0xdf,0xa5,0x4a,0x8d,0x86,0x5d,0xfc,0x5a,0x6a,0x4f,0x40,0xf6,0x35,0x11,0xa8,0xc6,0xad,0x76,0xb3,0xf7,0xeb,0x98,0xaf,0xae,0x7,0x2f,0xff,0xcc,0x17,0x6f,0x84,0xcb,0x34,0x6e,0xc5,0x75,0x7b,0x2f,0x94,0xd8,0xfb,0xfb,0xcd,0x42,0x51,0x5e,0x87,0xf4,0x93,0xc,0xf0,0xa,0xc6,0x6e,0xf8,0x6a,0xb9,0x88,0x8f,0x75,0x46,0x72,0x4d,0x7e,0x92,0x99,0xa4,0x90,0xb,0x2a,0x7d,0xa9,0xb6,0xd,0xf4,0xc8,0xc3,0x34,0x10,0x91,0x16,0xc3,0x6a,0x42,0x4c,0xb0,0x5f,0xaa,0x5a,0x2c,0x60,0x45,0xfa,0x8d,0xd3,0xff,0x3f,0xfa,0x2b,0xc4,0xde,0x69,0xf0,0x89,0x7f,0xe4,0x77,0xe4,0x97,0xec,0xb4,0x60,0x43,0xe4,0x12,0xa6,0x49,0x65,0x6d,0x45,0x77,0x9f,0x7a,0xd4,0xb3,0xe4,0xef,0xc5,0xa2,0x98,0xc6,0xb6,0x58,0x23,0x84,0xbd,0x97,0x21,0xa6,0xa4,0x89,0xaf,0xe,0x50,0x9e,0x73,0x34,0xae,0x35,0x78,0xed,0x34,0x85,0x83,0xc3,0xc2,0xc2,0x7b,0x58,0x42,0x4d,0x28,0xd2,0x18,0x9a,0xf3,0xc6,0x62,0xcf,0x5e,0x7c,0x6c,0x9,0x6f,0x51,0xa8,0x20,0x73,0xea,0x3b,0x57,0xb3,0x81,0x69,0x82,0xec,0xa0,0xf8,0xc2,0x3c,0xed,0xbe,0xa8,0xb7,0x39,0x11,0xd,0x41,0x4,0x55,0x93,0xb9,0xd3,0xa6,0xe3,0xff,0x3,0xef,0x69,0x1a,0xf5,0xdc,0xea,0x75,0xb2,0xd6,0x53,0xd3,0x3f,0x84,0x51,0xb9,0x7f,0xa7,0x1d,0xbd,0x7a,0x8f,0x69,0xed,0x75,0xb8,0xbd,0x6c,0xba,0x59,0x53,0x13,0x3c,0x5d,0xf2,0x93,0x50,0x74,0x36,0x1,0xf3,0xc3,0x21,0xa5,0x8a,0x81,0xd6,0x17,0x86,0x91,0x70,0x62,0x51,0x6a,0xfc,0x7,0x9e,0x4d,0xc0,0xef,0xdf,0x58,0x3,0xe3,0xfa,0xdb,0x2f,0xd5,0x28,0xc7,0xd7,0x51,0xb5,0xad,0xf9,0x9,0xba,0x4c,0x67,0xcf,0xbd,0x18,0xdb,0xed,0x25,0xd6,0xfe,0x6a,0x18,0xd1,0xa5,0x4d,0x48,0xd2,0x17,0x98,0xf0,0x49,0xdd,0x5e,0xee,0x1,0xa8,0x66,0x93,0x11,0x68,0x6c,0x66,0x5f,0xc,0x9f,0xb4,0x5,0xc,0xb0,0x52,0x7c,0x32,0xd6,0x5b,0xf7,0x98,0xf8,0xca,0x6f,0x6b,0x94,0x48,0x5d,0xd4,0xe4,0xa0,0x91,0x25,0x45,0x13,0xc0,0x34,0xc8,0xd7,0x59,0x71,0x72,0x5a,0xa7,0xf9,0x7c,0x3,0x5,0x88,0x90,0xb3,0xff,0xd6,0x22,0x66,0xf3,0xcf,0xe9,0xeb,0x17,0xa7,0x6b,0x92,0x5f,0x81,0xba,0x3c,0x52,0xc7,0xca,0x2d,0xf6,0xd,0x19,0x9e,0x54,0xb7,0x9,0x2b,0xe1,0xf7,0x9c,0x6e,0x24,0x2e,0x3e,0x3c,0x55,0xfc,0x5a,0x49,0xd7,0x59,0xbb,0xae,0xcd,0xff,0xe0,0x39,0x3f,0xa6,0x6c,0x3d,0x61,0x6d,0x34,0xfc,0x15,0x39,0xa9,0x69,0x43,0x1f,0xa6,0x2,0xb5,0xc1,0x26,0x7b,0x21,0x3c,0x3e,0x5a,0x44,0xe7,0x7c,0x53,0x52,0xb2,0x50,0xd5,0x99,0x35,0x16,0x3b,0x9b,0x33,0xdb,0x95,0xd0,0x70,0x95,0xd1,0xad,0xb2,0x7f,0x2e,0x11,0x9f,0x3a,0xb7,0xc3,0x50,0x7e,0xf3,0xb8,0xe9,0x22,0xc1,0xd5,0x81,0xe5,0xf4,0x1f,0x1c,0x8b,0x69,0x3d,0x15,0xa7,0x7,0xfd,0xad,0x7a,0x9e,0x26,0xa7,0x5a,0xbb,0xd8,0x10,0x39,0x22,0x3f,0x95,0x81,0xc1,0x46,0x37,0x58,0xc7,0x8d,0xb2,0xcf,0x93,0xcf,0x43,0x19,0x5d,0xaf,0x73,0xc0,0xad,0x35,0x72,0x54,0x77,0xc6,0x98,0xcd,0x41,0xf,0xee,0xe,0x1c,0x1e,0x2c,0x54,0x93,0xe4,0xa8,0xb1,0xd,0xa5,0x7c,0xbb,0xe4,0xf9,0xec,0x77,0xda,0xec,0x85,0xa6,0x44,0x8d,0xab,0xf3,0x77,0x52,0x8c,0xb,0xd0,0x57,0x51,0xfd,0x16,0x89,0xa9,0x7d,0xe7,0xe,0xbd,0x6d,0x9c,0x84,0xc4,0x1f,0x9e,0xfc,0x1a,0x5,0x72,0xd0,0x5e,0x8b,0x22,0xd1,0xc3,0xcd,0xcf,0x9a,0x62,0xcf,0x69,0xc9,0x8,0x79,0x88,0xc6,0x25,0x96,0x3e,0x1c,0x9c,0xd9,0xad,0x76,0xb,0xce,0x29,0xb7,0xd0,0x54,0xaf,0x9,0xa0,0xf8,0xb9,0x72,0xa5,0xbd,0x74,0xa8,0xe3,0x6,0x5e,0x9c,0x62,0xde,0x4b,0x9d,0x92,0x7,0x41,0x88,0x6d,0x95,0x1a,0x1d,0x69,0xe7,0x5d,0x46,0x1,0x67,0x30,0x24,0xc5,0xb3,0xb8,0x35,0xc5,0xfd,0x19,0x51,0x85,0x79,0x62,0xcc,0xa1,0x26,0xee,0xa7,0xb4,0xe3,0x5a,0xc,0xd7,0x2,0x97,0x49,0x67,0x7b,0x9a,0x57,0x21,0xec,0xc7,0x3a,0x62,0x8f,0x3b,0x91,0x28,0x73,0x4f,0x8,0x4c,0x2a,0x0,0x9b,0xe2,0x3f,0xce,0x46,0x1b,0x75,0x44,0xc,0x33,0xe3,0xa4,0x44,0xe3,0x2c,0xbc,0x74,0xea,0xbd,0xfd,0x1b,0x56,0xea,0x4e,0xc7,0xfc,0xf3,0x11,0xc,0x38,0x5,0xe3,0xc,0xb7,0xb7,0xce,0xf2,0x1c,0x81,0x51,0x19,0xe8,0xa6,0xe6,0xf4,0xef,0x1c,0x7a,0x9d,0xdb,0x8d,0x5b,0xae,0x3f,0x99,0xb4,0xfe,0x2a,0x68,0xdf,0xc0,0x3,0xa2,0x60,0x6,0x1f,0x3,0x8d,0x8f,0x8b,0x2f,0x58,0x11,0x28,0xbd,0x90,0x33,0xa8,0x53,0xe4,0x5a,0x9a,0xd,0xc8,0x9a,0x43,0x26,0x94,0x88,0x90,0xb9,0x3a,0x4d,0xed,0x66,0xad,0x93,0x59,0x1c,0x77,0x92,0xb0,0xb3,0x7,0x78,0x70,0x39,0xcf,0x97,0x41,0xf,0xec,0x26,0x45,0xa0,0x27,0x9e,0x3b,0x68,0x44,0xd0,0xe8,0xe2,0xfc,0xcd,0x30,0x8f,0xac,0x84,0x1c,0x13,0x57,0x3f,0xdf,0x2f,0x63,0x2d,0xeb,0x7,0x93,0x9d,0xf1,0x98,0x36,0x77,0x8b,0xde,0x15,0x2a,0xd6,0x26,0x27,0x49,0x9d,0xdc,0xc0,0xd,0x33,0xd7,0x45,0xa3,0x83,0x34,0x85,0xb4,0x38,0x5c,0xbe,0x16,0x3d,0x32,0x49,0xf3,0xff,0xda,0xa4,0x18,0xa6,0x8c,0xaa,0xa,0xc9,0x49,0x98,0x4a,0xc8,0xe5,0x6f,0x87,0x1f,0x58,0xb0,0xa9,0x97,0x38,0x7f,0xd7,0xa3,0x2d,0x37,0x3f,0x3a,0x55,0xc1,0x2e,0x6b,0xdf,0xfa,0x5c,0x82,0x83,0xbb,0x11,0xd0,0x83,0xd2,0xde,0x40,0x15,0x63,0x92,0x84,0x55,0xa8,0xd8,0xce,0x97,0xe4,0x13,0x27,0x2f,0xfb,0x2b,0xd0,0x94,0x12,0x70,0x32,0x68,0x21,0x55,0x1,0xc3,0x1f,0xe3,0x1f,0x18,0xc1,0x2e,0xc,0x76,0x36,0x2d,0xef,0xab,0x26,0x63,0x3d,0x4a,0xc8,0x5c,0xbc,0xeb,0xae,0xc2,0xde,0xa3,0x3c,0x6f,0x39,0x16,0x70,0xad,0x52,0x1f,0x1b,0xb4,0x86,0xd0,0x37,0x4,0xb7,0x7d,0x85,0x50,0x40,0xb8,0x9d,0xcb,0x62,0xaa,0xf,0x2,0x2d,0x8c,0xfb,0x3f,0x8c,0xe6,0xd1,0x43,0xc,0x28,0xe6,0x67,0x6,0x4,0x44,0x5a,0xa1,0xc0,0x55,0x33,0x85,0x68,0xfe,0xd6,0x30,0x49,0xf1,0x3,0x9a,0x28,0xb7,0x96,0x64,0x35,0x8e,0x1f,0x69,0xf5,0x46,0x90,0x57,0xf2,0x1c,0x82,0xc8,0xac,0xc4,0xae,0xe5,0xfe,0xbd,0xcc,0xdb,0x46,0xb,0x8b,0x43,0xe,0x6f,0x86,0x7,0x2e,0xd4,0xdb,0xa6,0xc8,0x66,0xbb,0x61,0xb7,0xdd,0x6c,0x99,0x9b,0x7e,0xda,0x29,0xfe,0x2d,0x8c,0xbe,0x6a,0x3e,0xa7,0x6d,0xe4,0x94,0xa4,0x71,0xf6,0xe1,0x8b,0x45,0x7d,0xe4,0xa5,0x28,0x98,0x5b,0x3f,0x24,0xe8,0xe4,0x4b,0x6e,0x30,0xb3,0xbf,0x12,0x33,0xc,0x10,0x8e,0xa7,0x74,0xd6,0x71,0xc3,0x1e,0xa1,0x7a,0x77,0xf7,0xed,0xdd,0xea,0xe5,0x99,0xdc,0x49,0x7f,0xf2,0xbd,0xe9,0x5d,0x78,0x4e,0x3c,0x21,0xc8,0xd5,0x5c,0xda,0x43,0x44,0xb0,0x9d,0x79,0x16,0x5f,0xed,0xc6,0xf2,0xf3,0x17,0x1,0x32,0x1a,0x71,0xd6,0x5e,0xca,0x7b,0x97,0xac,0x3,0xd1,0xbd,0x69,0xa5,0xbf,0x99,0xa3,0xaa,0x74,0x90,0xf,0x8,0xac,0x36,0x8a,0x96,0x27,0x40,0x83,0x63,0xf1,0xc8,0x4e,0xa3,0xf4,0x57,0xff,0x72,0x99,0x83,0xe3,0xfc,0x91,0xf0,0xf7,0xe8,0xb3,0x61,0x2b,0xcd,0x7d,0xe1,0x25,0x7,0x35,0xbc,0x98,0x78,0x4d,0x21,0x2a,0xf3,0x81,0x52,0xa8,0xa1,0x5a,0x57,0x3,0x60,0x5,0x99,0x4,0x71,0x78,0xf,0x99,0xf0,0x4c,0x8a,0xbe,0x5,0x9d,0x3c,0xb1,0x81,0x12,0x6d,0x93,0x9a,0x5,0x33,0x95,0x22,0xc2,0x44,0x1b,0xa6,0x2,0x55,0xf9,0x1e,0x4a,0xc2,0xc9,0xec,0xa5,0x7e,0xd,0x37,0x74,0x4,0x9d,0xd6,0x48,0xf2,0x3f,0x2b,0x16,0xcb,0xd3,0x3c,0x73,0x80,0xb4,0x97,0x13,0xd1,0x4d,0x82,0xac,0x6a,0x29,0xe0,0xfe,0x3f,0x64,0x7b,0xfa,0xb3,0x96,0x48,0xf,0x84,0x24,0xf4,0x82,0x17,0x6d,0x51,0x20,0x21,0x8c,0xec,0xba,0x7c,0x61,0x19,0x97,0x71,0x51,0x48,0x85,0x35,0xee,0x27,0xbd,0x19,0xc6,0x54,0x7f,0xf,0xde,0x87,0x99,0xb7,0xbc,0xb1,0xdc,0x8,0x28,0x53,0x2c,0xd1,0x66,0x52,0xab,0x9f,0x65,0xe9,0x72,0x3e,0x71,0xca,0x1d,0xe7,0x0,0x63,0x66,0x55,0xd5,0x52,0x63,0xf6,0xf9,0xde,0x8a,0x23,0xd5,0xbd,0xcb,0xed,0xaa,0xdd,0x8f,0x54,0xcb,0xcb,0x96,0x7a,0x60,0x2e,0x7b,0xeb,0xf8,0xc9,0xe1,0x82,0xc0,0x72,0x18,0xa7,0x1d,0x88,0xfc,0x51,0x74,0x70,0x45,0xed,0xf3,0xe4,0x50,0xa1,0xbb,0x2a,0xd,0x13,0x96,0x7d,0xb1,0x6d,0x14,0x64,0xa7,0x65,0x37,0x9,0x57,0x78,0x3,0xb9,0x8e,0xf4,0x6b,0xf9,0xc4,0xf4,0x55,0xcf,0x9b,0x22,0x38,0x25,0x97,0x38,0xdb,0x17,0x72,0x18,0xe,0x78,0x82,0xfe,0xbe,0xae,0xf1,0xb2,0x12,0x4,0xb9,0x54,0x2d,0xfb,0x2b,0x5e,0x96,0xae,0xfe,0x85,0x41,0x94,0x76,0xe8,0xb2,0xb8,0x36,0x6c,0x6f,0xc0,0x87,0x43,0xb9,0x98,0x98,0x28,0x54,0x55,0x11,0x75,0x24,0xdb,0xb5,0x38,0x46,0x63,0xdc,0x1d,0x26,0xae,0x81,0x8d,0x2c,0xb4,0x7e,0xc0,0xc0,0x54,0x27,0x7d,0x8b,0xd7,0x9,0x11,0x46,0xa3,0xe6,0xeb,0xdc,0xa8,0x2,0x7b,0xf3,0x9a,0x88,0x6e,0x73,0x8c,0x68,0xc4,0x38,0xf8,0x97,0x58,0x36,0x2f,0x59,0x13,0x65,0x7c,0xa3,0xe8,0x9d,0x67,0x8c,0x3c,0x24,0x4d,0x1d,0x7f,0xf2,0xbe,0xd1,0x34,0xf8,0x77,0xe9,0xdf,0x7b,0x8b,0x56,0x38,0xe3,0x81,0x46,0x1e,0xf2,0xd7,0x9e,0x2b,0xf8,0x17,0x64,0x9b,0x73,0xcb,0x35,0x25,0xe5,0x98,0xaa,0xbd,0xb,0xc1,0xcd,0xf,0xf4,0xd2,0x41,0x3c,0x18,0x7,0x3d,0x7,0xdc,0x75,0x36,0xde,0x49,0xf8,0x72,0x1d,0xb2,0x32,0x15,0x9a,0xa9,0x5c,0x80,0x61,0x99,0xf7,0xcc,0xa,0x41,0x49,0x93,0xc9,0xf7,0xa6,0x2d,0x67,0x97,0x31,0x3b,0x1b,0x61,0x98,0x17,0xb9,0x87,0x80,0xc4,0xff,0xd,0xe7,0x5,0xc,0x68,0xb0,0x42,0x1a,0x4c,0x68,0xca,0x8a,0x42,0xf3,0x65,0xb8,0xdc,0x9d,0x3a,0xec,0xf1,0xcf,0x80,0x34,0x43,0xdf,0xa3,0xda,0x44,0xff,0x85,0xc3,0x0,0x82,0x27,0x52,0x89,0xf0,0xfb,0x94,0x85,0x5b,0x14,0x2,0xbd,0x8,0x21,0xf7,0xe9,0xe4,0xc0,0x8b,0xa5,0x62,0x5a,0xbb,0x94,0x5a,0x9d,0x98,0xa7,0x61,0x83,0x29,0x4b,0x4e,0x9a,0xa,0xb2,0xb3,0x53,0x15,0xbc,0x62,0xfd,0x97,0xc2,0x66,0x53,0xb,0xf8,0x64,0x93,0x97,0x8d,0x6,0xf6,0xc2,0x37,0x20,0x4c,0x44,0xa1,0xbb,0x89,0xb0,0xca,0x5e,0x21,0x5d,0xaf,0xa0,0x93,0x6,0xb3,0xda,0x27,0x78,0xf5,0x8f,0x20,0xf9,0xb6,0x65,0x3b,0xe,0x52,0x52,0x4,0xa2,0x42,0x34,0xdc,0x5e,0xb,0xd6,0x2e,0x1,0xae,0x8,0x5,0x92,0xdf,0xdb,0x10,0xd2,0xe2,0xf7,0xee,0x75,0x7f,0xee,0x76,0x78,0xd8,0x1f,0xe,0xce,0x83,0xa5,0xc5,0x89,0x19,0x8d,0xc3,0x59,0x77,0xa0,0xf8,0x52,0xc,0x2e,0x9d,0x9f,0x8c,0x2e,0x27,0xe6,0xf0,0xba,0x42,0xd1,0x77,0xfe,0x83,0x14,0x37,0x15,0xe1,0xf2,0x79,0xc1,0xc3,0x6e,0x69,0x56,0x64,0x2,0xeb,0xae,0x8e,0xd9,0x5e,0x7,0x3,0x79,0x4e,0xd0,0x4,0x5b,0x95,0xa3,0xb2,0x72,0xd1,0x6c,0xaa,0x52,0xb5,0x55,0xf9,0x3e,0xac,0xe8,0x5,0x8b,0x84,0xac,0x33,0x6f,0x5c,0xa,0xcc,0x62,0x57,0x97,0x9d,0x75,0x86,0xa1,0xea,0x8a,0x89,0x8d,0x2d,0xf3,0xa8,0xa0,0x36,0x77,0x8f,0x1d,0xe2,0xf8,0x12,0x44,0xc6,0x77,0x9c,0xcd,0x7c,0xf8,0x7a,0x7c,0x19,0x3a,0x5a,0xdf,0x37,0x1,0xb,0xd9,0x47,0x11,0x8b,0x21,0xad,0x93,0xda,0xc5,0x99,0x74,0x45,0xf0,0x60,0x2c,0xb8,0x47,0x47,0xee,0x8b,0xb7,0xa0,0x8c,0xbe,0xe8,0xb0,0x82,0x91,0x9a,0x9a,0x16,0x85,0xf0,0x15,0x5b,0x22,0xe,0x18,0xf2,0xd4,0x5e,0x25,0xd7,0xaa,0x55,0xb4,0xcc,0x33,0x9b,0xe8,0xc6,0xe4,0x34,0x5b,0xcc,0x41,0xea,0x7,0xf9,0xf8,0x17,0x10,0xf4,0xbd,0xd0,0xae,0x81,0xde,0x39,0x75,0xe5,0x82,0xf1,0xe6,0x2c,0x65,0x12,0x76,0xa3,0xca,0xb7,0x29,0xd8,0xd6,0x32,0x97,0xbb,0xc0,0x15,0xc6,0xd8,0x83,0x9,0x9e,0xf9,0x2c,0xca,0xfd,0x16,0x70,0xec,0x3d,0x13,0x89,0x4f,0x6c,0x76,0x51,0xac,0xd0,0x1b,0x29,0x4,0x55,0xed,0x69,0xfb,0xce,0x33,0xe0,0x38,0x3,0x64,0x69,0x40,0x83,0x54,0xf5,0xeb,0x17,0x4,0xff,0x4b,0x4e,0x9f,0x6b,0x14,0xa3,0x3d,0xbf,0x73,0xac,0xc5,0x29,0x3,0x58,0x88,0xca,0xee,0xbe,0x9d,0xeb,0xb8,0xf8,0xa1,0xf6,0xe1,0x39,0x9e,0xae,0x44,0x6c,0xaf,0x8f,0x39,0x2,0xc,0xd3,0x51,0xfc,0xad,0xb9,0x55,0xe4,0xec,0xcb,0xa9,0x5f,0x58,0x74,0xbb,0x64,0xb2,0x85,0x33,0x69,0x4c,0xe7,0xd1,0x6a,0x5c,0xbf,0xe8,0xe8,0xbd,0x49,0xc4,0x29,0x6a,0xe4,0x2a,0x56,0x87,0xbc,0xcb,0xa2,0x2,0xd,0x18,0xdd,0xfe,0xf5,0x78,0xc4,0x8c,0xaa,0x74,0xdc,0xb0,0x46,0xe,0xe8,0x94,0xf7,0x57,0x89,0xa7,0xd,0x67,0x56,0xef,0xf6,0x3,0x3f,0x96,0xe5,0xf8,0xa1,0xd1,0x87,0x9c,0xaa,0x6d,0x79,0xf5,0xfd,0x81,0x50,0x47,0xf,0x11,0xfb,0xb0,0xb6,0xb3,0x5a,0xab,0x40,0x32,0x9b,0x6c,0x43,0xa5,0xb5,0x22,0x62,0x84,0x80,0x26,0xf6,0x75,0x8a,0x72,0x14,0x9c,0x9d,0x69,0xfb,0x8,0xe8,0x83,0x20,0xae,0x9e,0x2c,0xf,0xa0,0xdb,0x72,0x1a,0xec,0x41,0x3e,0x84,0x3e,0xd2,0xb2,0xd4,0xdf,0xb3,0x5c,0x30,0xdb,0xc1,0x26,0xa1,0xa9,0x8b,0x9b,0xd6,0xe,0x39,0x37,0x71,0x76,0xd4,0x9a,0x57,0x74,0x23,0x79,0x10,0x27,0x17,0xda,0xd2,0x1a,0x3e,0x35,0x2c,0x5a,0x9f,0xae,0x91,0x69,0xf1,0x85,0x38,0x47,0xea,0x28,0x7a,0x8b,0xb1,0xba,0xec,0x25,0xf4,0x4,0x17,0x6c,0xc8,0x5d,0xef,0x95,0x8f,0x63,0xaf,0x25,0x4c,0xe3,0xa8,0xc0,0x3c,0xb7,0x8b,0xd9,0xd1,0x34,0x96,0xe5,0x9d,0x56,0xf8,0x22,0x37,0xbb,0xb3,0x39,0x14,0x54,0x2d,0xba,0xf0,0x14,0xf0,0x2f,0xe4,0xcf,0xb5,0xf5,0xa,0xff,0x9b,0xfd,0xa1,0x50,0xc,0x7a,0xe1,0x41,0xb,0x5d,0xa5,0xef,0xbd,0xe5,0x47,0x70,0x64,0xaf,0x96,0x54,0x87,0xe2,0xe1,0x29,0x68,0x35,0xbe,0x37,0x90,0xed,0x1,0x99,0x54,0x15,0x1c,0xbf,0x46,0xd5,0x72,0xb8,0xf5,0x14,0xba,0xe4,0x18,0x80,0x8b,0x6,0x64,0x64,0xf5,0xac,0x40,0x66,0xea,0xbf,0xd2,0xaf,0x12,0xcf,0x6a,0x3,0x53,0xe5,0x5e,0xc0,0x73,0x52,0x49,0xf2,0xc,0x20,0x87,0xee,0x5a,0xc,0xc7,0x2f,0x10,0xf5,0x44,0xe0,0x77,0x80,0x1a,0x12,0xb1,0x33,0xbb,0xa2,0x8b,0x8e,0x1b,0x12,0x5c,0xc1,0x1d,0xea,0xcd,0x2a,0xe,0x74,0x23,0x29,0x49,0xa2,0x31,0x44,0x86,0xc5,0x6f,0x56,0x5c,0xe6,0x89,0x3d,0x28,0x89,0x7f,0xf4,0xcf,0xe2,0xa9,0xbb,0x2b,0x7f,0x17,0xb6,0x6d,0x5e,0x3a,0x65,0x33,0x6a,0xa3,0x7a,0xdc,0xb1,0x5a,0x73,0xc4,0x22,0x8d,0xb2,0x72,0xd0,0x1a,0x5c,0x64,0xb1,0xc2,0x84,0xef,0x3c,0x28,0x7f,0x10,0xf6,0x7d,0xe0,0xb9,0x92,0xf0,0x7b,0x90,0x6b,0xf,0x9d,0xb6,0x80,0xa4,0xeb,0x43,0x80,0xdd,0x1,0x48,0x1e,0x36,0xa2,0x13,0xca,0x8d,0x36,0xf,0x9b,0xa3,0x94,0xa8,0x6e,0x5e,0x94,0x95,0x0,0xa,0x25,0xea,0x3b,0x95,0x95,0xf1,0xce,0x32,0xd3,0xbb,0xde,0xff,0xb2,0xfb,0xba,0xf3,0x7,0x7,0xe0,0x5b,0x64,0xef,0xbf,0x98,0xcd,0xc4,0x97,0x9e,0x10,0x2f,0xc6,0xd3,0xc9,0x7f,0x74,0x34,0x5c,0x1d,0xd2,0xa,0x72,0x13,0x4b,0xa7,0x78,0xd3,0x59,0xd6,0xb2,0xbe,0xdd,0x2,0x4d,0x95,0xe2,0x8d,0xbe,0x55,0x2c,0x91,0x7a,0x62,0xb8,0x80,0xd8,0x97,0x30,0x40,0x84,0x2f,0x20,0xa2,0xfb,0x55,0xc1,0xf3,0x96,0x43,0x35,0x79,0xd5,0x7d,0x16,0x89,0x4a,0xa4,0xe5,0xb8,0x62,0x2a,0xde,0x1a,0x4e,0xc0,0xd5,0x49,0x1e,0xef,0x1d,0x12,0x98,0x7c,0x6b,0x3a,0x45,0x58,0x1f,0xac,0x66,0x55,0xd9,0xf,0x66,0x7d,0xe1,0x2c,0x7f,0x41,0x39,0xed,0x17,0x7c,0x4,0xd0,0x8b,0xfc,0xa,0xa6,0xce,0xd7,0x74,0xf4,0x57,0xde,0x27,0x66,0xc4,0x85,0xe,0xb4,0x67,0xa3,0x58,0x45,0x35,0xf2,0x7f,0xdf,0xa2,0x75,0xe5,0x25,0xba,0xd4,0xca,0x24,0x1,0xd5,0x55,0x26,0xab,0xa9,0x1,0xf1,0xa0,0x81,0x3b,0x28,0x5c,0x48,0xbe,0xa7,0x3f,0x61,0x29,0x7f,0xbd,0xb2,0xc8,0x1f,0x4e,0xb6,0x6d,0x6d,0x4a,0xae,0x14,0x8c,0x78,0xdc,0xad,0x85,0x85,0xb8,0x54,0xee,0xed,0x92,0xa5,0xa6,0x6e,0x6a,0x9,0x41,0x23,0x5b,0xd7,0x83,0x75,0xf8,0xa0,0xcd,0xd8,0xe3,0x1a,0x8e,0x9e,0x2,0xb1,0x96,0xff,0x27,0x25,0x25,0x91,0x8,0x8,0x6e,0x61,0x55,0xd0,0xb4,0xfb,0x15,0x7c,0xd,0x6c,0xbc,0xc8,0x4a,0x3,0x71,0xaa,0xbb,0xf1,0x49,0x0,0x1,0x9c,0x7a,0x6a,0xa2,0x36,0xfa,0xd2,0xc,0x85,0x57,0x49,0xa1,0xff,0xab,0xd2,0x24,0x1,0xbd,0x8f,0xfb,0x97,0x8c,0xe,0x32,0xd,0x1d,0x20,0xa5,0x9e,0xf8,0x2a,0xc5,0x3,0xb,0x25,0x40,0xc4,0xff,0xb8,0xe2,0x7a,0xf5,0x43,0x1f,0x6d,0xdc,0x2,0xa4,0x1f,0x10,0x8,0x6a,0x60,0x27,0xbb,0xfe,0x7c,0xdf,0x8d,0x89,0x21,0x2f,0x33,0x9,0x80,0xbc,0xfc,0x7b,0xac,0xfb,0xc,0xa7,0xc3,0xd9,0xd3,0xf2,0xd9,0xcf,0xc1,0x23,0xc1,0xe,0xa8,0x31,0x7e,0x17,0x17,0x89,0xc9,0x9c,0xb4,0xd1,0xe2,0x35,0x49,0xc2,0x4c,0x33,0xc3,0x1f,0xec,0x72,0x4,0xd1,0xa1,0xe0,0x9e,0x93,0x9,0x86,0x61,0x62,0x97,0xb8,0xf3,0x3b,0x80,0xe2,0x90,0xa4,0x17,0x94,0x96,0x3a,0xdc,0x12,0x6a,0xc4,0x8f,0x97,0x3b,0x33,0xdc,0x1f,0xc,0x5e,0xc,0xb8,0x1e,0xaa,0xac,0xd6,0xc1,0xe7,0x43,0xaf,0xc2,0x98,0x30,0xb1,0xa1,0x7c,0x93,0x66,0xd5,0x57,0xcf,0x63,0xf4,0xaf,0x73,0x57,0x80,0xf1,0x50,0x12,0x18,0xc2,0x90,0xd9,0x93,0xbc,0xb1,0x1f,0x5b,0x52,0x31,0xa3,0x9b,0xb,0xc4,0x7b,0x75,0xa8,0xee,0x88,0x4f,0x1c,0xc5,0x79,0xc7,0xba,0x4f,0xb1,0x19,0xe4,0xc,0x31,0x3c,0x3,0xed,0xa9,0x97,0x7a,0x2f,0x90,0x6c,0x12,0xd4,0x14,0x97,0x43,0x47,0x67,0xaf,0xe0,0x19,0x38,0xba,0xec,0x68,0x71,0x4,0xd7,0xef,0x80,0x4d,0x16,0xcc,0xa1,0xe9,0x81,0x0,0x5a,0x20,0xbf,0x52,0x88,0xd3,0xd2,0x78,0x3e,0xa7,0x74,0x83,0xe3,0x4a,0x75,0x2,0x4a,0x44,0xca,0x72,0x3f,0x98,0x9d,0xe3,0x72,0x2e,0x68,0xd1,0xb0,0x15,0x13,0xdd,0xe4,0xea,0xc9,0x51,0x24,0xe2,0x6,0x78,0x9e,0xa8,0x41,0x27,0x55,0x2c,0x23,0x8e,0x7c,0xc4,0xee,0x30,0xb7,0x37,0x76,0xda,0x80,0xda,0xb1,0x14,0xbe,0x7e,0xd7,0xc9,0x15,0xeb,0x3a,0xbe,0xbc,0x1c,0x2,0xe1,0x1f,0xef,0x31,0xc6,0x78,0x4,0x8e,0xcd,0x35,0x53,0xfa,0x44,0x62,0xdf,0x83,0x8,0xe2,0xa,0x76,0x19,0xbc,0x84,0x52,0xc6,0xb6,0xa0,0xeb,0x37,0x76,0xa8,0x28,0x2c,0x0,0xf7,0x98,0xb,0xc5,0xec,0xce,0x31,0x4,0xf,0x1e,0xf9,0x39,0xfd,0xff,0x3c,0x82,0x5f,0x6b,0xa1,0x1f,0xa5,0xa5,0xa6,0x15,0x81,0x78,0x5,0xd0,0x8,0x5e,0x63,0x98,0x3a,0x6f,0x6b,0xe4,0x8a,0x52,0x6b,0x86,0xa5,0xfc,0x28,0xbc,0x37,0x9b,0xb1,0xd8,0x41,0x1e,0x1f,0x41,0x50,0xbb,0x28,0xaa,0xe4,0x48,0x98,0xd5,0x36,0x12,0xa5,0xcd,0x6b,0x56,0x65,0x80,0xb4,0xf0,0x95,0x5a,0x5e,0x11,0x6a,0xab,0x33,0xad,0xa1,0x83,0x39,0x9b,0x24,0xd3,0x22,0x7,0x35,0xd4,0xc,0xce,0x6f,0x46,0x4e,0xbf,0x47,0xd3,0xb1,0x22,0xb2,0xf4,0x68,0xf9,0x59,0xf8,0x36,0x88,0x73,0xa0,0x5a,0xa0,0xcb,0x4d,0x1e,0x96,0xfe,0x57,0x54,0x53,0xf0,0x74,0x6c,0xb1,0x78,0xde,0xea,0xba,0x1e,0xe1,0x48,0xb5,0x93,0x72,0xbc,0xa7,0xd3,0xa0,0x69,0xff,0xbd,0xec,0x25,0xfc,0xc2,0x5b,0x16,0x27,0xe6,0x4b,0x18,0xdd,0xeb,0xc4,0x44,0x61,0x21,0x49,0x8d,0x92,0x77,0x39,0x52,0xdb,0xb8,0x24,0x17,0x95,0x8e,0x47,0xeb,0x37,0x89,0xae,0xa3,0x66,0x67,0x3,0x76,0xe9,0x16,0x10,0xbe,0x65,0xc4,0x5a,0xa3,0x79,0x16,0xea,0x76,0x87,0x3a,0x16,0xb,0xe3,0x70,0xf1,0x56,0x9a,0x68,0xf7,0x1f,0xf9,0x2f,0x1,0xf9,0xe,0x5,0xa0,0xec,0x43,0x47,0x85,0x9f,0x49,0x91,0x9a,0x56,0xa,0x3b,0xbf,0xb,0x57,0xcc,0x52,0xec,0xf0,0xc5,0x5f,0xb9,0xf4,0x6d,0x35,0xc3,0x99,0x69,0xed,0xc6,0x45,0x24,0x13,0xca,0xc2,0x29,0x4a,0x71,0x57,0xd8,0xd9,0xde,0xb9,0x6c,0x93,0x7e,0x62,0x12,0xb9,0x9b,0xee,0x8f,0xc7,0x13,0x13,0x74,0x13,0x45,0x8f,0x6b,0x9c,0xb4,0x35,0xb8,0x30,0x51,0x6a,0xf7,0xc0,0x91,0x4e,0x6e,0x4e,0x41,0xb6,0xf3,0xb1,0xf0,0xad,0x5a,0x70,0x97,0xb,0xe2,0x53,0xb7,0xd6,0x61,0xa9,0x15,0x85,0xc5,0x5d,0xaf,0xc5,0x4b,0xe9,0xfb,0xf6,0x3a,0x4d,0x6c,0x60,0xbc,0x30,0x4f,0x31,0x9,0x51,0x40,0xf5,0x93,0xc1,0xff,0x88,0x15,0xe8,0xb5,0xc6,0x40,0xa0,0xdb,0x26,0x4d,0xb8,0x6e,0xba,0x4f,0x3c,0x85,0xa1,0x5c,0x8b,0x43,0x62,0x7c,0x2e,0x59,0xf9,0xf8,0xd4,0x36,0x7a,0xdb,0xb9,0x85,0x18,0x2e,0xdf,0xcd,0xc3,0xaa,0x5c,0xf8,0x56,0x96,0x7d,0xc6,0x28,0x6b,0x60,0xae,0x18,0xa7,0xe0,0x6d,0x4,0x80,0x89,0xf9,0x4b,0xe5,0xe7,0x74,0xec,0x4d,0xca,0xcd,0xb4,0x69,0x8a,0x10,0x5,0x35,0xfd,0xac,0xf2,0x9e,0x5d,0xa3,0x1,0xac,0xf,0xf1,0x6b,0x47,0x3d,0x40,0x3,0x53,0x2d,0x40,0xd1,0xbb,0x41,0xc6,0x6a,0x94,0x2f,0xfc,0x25,0xa3,0xac,0x74,0x9c,0xbd,0x76,0x54,0xf7,0x7d,0x51,0xdd,0x4,0x18,0x72,0x4f,0x60,0xa1,0x2e,0xce,0x80,0x3a,0x61,0x29,0x5a,0xbe,0x4d,0x66,0x86,0x61,0xa0,0x5a,0xf4,0xf3,0xdc,0xd1,0x29,0x98,0x84,0xf6,0xac,0xa3,0xfb,0xa1,0xf,0xd8,0xff,0xb8,0x2b,0xb7,0x38,0xb,0x30,0x3c,0x2f,0x21,0x39,0x3a,0xd6,0x40,0x4,0x86,0x1c,0x4b,0xaa,0xd5,0x27,0xb2,0x92,0x86,0x62,0x5f,0x26,0xc4,0x21,0x6c,0x21,0x4d,0x70,0xb5,0xb2,0x6a,0xe8,0x88,0x34,0x79,0xc4,0xda,0xb9,0xe5,0xd5,0x51,0x62,0x69,0xb1,0xbb,0x4e,0x30,0xa6,0xca,0x98,0x49,0xea,0x4c,0xf7,0x91,0xa6,0xab,0xf,0x88,0xb9,0x4c,0x4a,0x2f,0x40,0xc3,0x27,0xc3,0x47,0x67,0xa3,0xf8,0x4c,0xbc,0x9b,0x4d,0x3a,0x50,0xb5,0xb4,0x2a,0xc4,0x16,0x94,0xfb,0x59,0x68,0x7d,0xfe,0x29,0x73,0x32,0x67,0x65,0x90,0x16,0xea,0x9e,0x50,0x1d,0x5b,0xb7,0x86,0xcc,0x28,0x77,0x9a,0xaa,0x85,0xe0,0xe9,0xde,0x2e,0x9b,0xf0,0xa2,0xa1,0x2c,0xcc,0xc4,0x83,0xa5,0x6a,0x72,0xb9,0xb5,0x35,0xf1,0x4e,0x46,0xf9,0x84,0x5a,0x3e,0xf1,0x5a,0x81,0x5,0xfb,0xb2,0xa,0x42,0xa7,0x27,0xc0,0x6e,0xef,0x61,0xab,0x83,0x75,0x1c,0xe5,0x5c,0xf8,0x99,0x16,0xd1,0x8,0xbf,0x30,0x47,0x3b,0x11,0x70,0x95,0x46,0xb0,0xb4,0x47,0x58,0xe1,0x6f,0x5c,0xf8,0xad,0x2f,0xfa,0x8b,0x7b,0x3e,0x35,0xa8,0xeb,0x10,0xe6,0xf2,0x61,0x6f,0x1d,0x32,0x83,0xd6,0x0,0xbc,0x94,0x3b,0xf8,0x7,0x6b,0x77,0x61,0x64,0xfe,0x21,0x28,0xc2,0x19,0xc6,0x5c,0x64,0x63,0xba,0xa,0xfc,0x2b,0xc5,0x8c,0x31,0x33,0xac,0xfd,0x27,0x38,0xf6,0xfb,0xac,0xf5,0x2c,0x7c,0xbd,0x2,0x3b,0x74,0x5d,0x94,0x6b,0x63,0xeb,0x71,0xbe,0xab,0x87,0xc9,0xa4,0xa0,0x1d,0x59,0xe0,0xa7,0x5b,0x9f,0x88,0x6d,0x4f,0xd3,0x51,0xac,0x45,0xff,0xe3,0xd4,0xba,0xb6,0xe6,0x22,0x5d,0x3d,0x26,0xd5,0x22,0x7f,0x0,0x95,0x53,0x92,0x37,0xcd,0xfc,0x82,0x7f,0xac,0xf4,0x16,0x88,0x5,0xcc,0x89,0x94,0x67,0x23,0x81,0x5d,0xc6,0xc1,0x75,0x3d,0xc2,0x6e,0x4f,0xf1,0xca,0xc3,0x62,0xf1,0x27,0xe5,0x7b,0xa1,0x11,0xeb,0xf6,0x9d,0x14,0xd0,0xb8,0x26,0x3b,0x1e,0x68,0x7c,0xe0,0xa7,0xb0,0x5d,0xbf,0x66,0x9,0xc2,0x6,0xdb,0x1f,0xe4,0xa8,0x32,0x9f,0xe,0x2a,0x9d,0xd7,0x4a,0x49,0xfc,0xad,0x4b,0x37,0xe3,0xe4,0x59,0x28,0x8,0x5a,0xe2,0x32,0xe5,0x2f,0x4a,0xaf,0xf,0x1b,0x4b,0xcf,0xba,0xd2,0xe4,0xa3,0xd5,0x67,0xad,0x9f,0xda,0xc3,0x85,0xa6,0x63,0xfc,0xc1,0xb7,0x35,0x85,0x3e,0x3,0xac,0x34,0x77,0xae,0xe9,0xb,0x38,0x99,0x32,0x1a,0xa5,0x2e,0x2e,0x68,0x7f,0xd4,0x50,0xec,0x95,0x41,0x39,0xb6,0xde,0x72,0xdd,0xbc,0xe0,0x20,0x77,0x8e,0x12,0x77,0xfd,0xd4,0x96,0x8b,0xc4,0x3,0xf3,0xc8,0x57,0x24,0x2d,0xb1,0x8f,0x5f,0xed,0x44,0x9f,0x65,0x72,0x7f,0x21,0x8b,0x25,0x36,0x57,0x69,0xf5,0xe1,0x78,0x93,0x59,0x65,0x77,0x71,0xa8,0x23,0x66,0x4f,0x65,0x29,0x92,0x7b,0x35,0x3f,0x38,0x9b,0xfa,0xa0,0xca,0x2d,0x13,0xcc,0xe,0x1a,0xfb,0x24,0xd8,0x3a,0xaa,0xed,0x16,0x83,0x75,0x76,0x30,0xd3,0xb5,0x5d,0x5c,0x7f,0x79,0x73,0xd5,0xae,0xe8,0xc3,0xbd,0x5,0x55,0xe7,0x9c,0x3c,0x3f,0xaa,0x7c,0x33,0x43,0xc0,0x10,0x2e,0xba,0xfc,0xb5,0xc6,0x51,0x7,0xdb,0xb6,0x7b,0x8a,0xf9,0x8e,0xb2,0xb0,0xc5,0x99,0xeb,0xf1,0x20,0x78,0x35,0xbc,0x7c,0x63,0x71,0xb,0xf9,0x9d,0x49,0x32,0x90,0xe0,0xdb,0x50,0xb0,0x29,0x51,0x41,0xde,0x5a,0x55,0x71,0x84,0x83,0xc1,0x65,0x73,0x5d,0xdd,0xf4,0x38,0x8f,0x18,0x7a,0x9a,0x65,0xa2,0xb3,0x98,0x5d,0x81,0x78,0x5f,0xf5,0x9f,0x91,0x5b,0x6f,0x32,0xab,0x8c,0x8c,0xe1,0x50,0xa2,0xd4,0xac,0x57,0x8d,0xf,0x5f,0x26,0x6c,0xd1,0x5f,0x81,0x9d,0x9e,0xda,0x25,0x86,0x85,0xa6,0x6,0x9c,0x5,0x51,0xbd,0x65,0x1,0xf9,0xa8,0x47,0x67,0xe,0xbc,0x39,0x2c,0x2f,0x98,0x34,0xc9,0xb7,0x88,0x5,0xd7,0xf0,0x95,0xaa,0xed,0xbb,0xaa,0xc5,0x61,0x83,0xb9,0xe9,0xe6,0x1e,0x78,0x9,0xa5,0xf2,0xa5,0xda,0xde,0x43,0x59,0xde,0x6a,0x5d,0xcc,0x88,0x2b,0x5c,0xf6,0xe,0xa3,0x7d,0xc5,0xa7,0x34,0x6b,0x15,0xb7,0x16,0x90,0x11,0xb8,0x6,0x95,0x21,0xd1,0x3a,0x2e,0xa0,0xd0,0x1b,0x42,0x2,0xf4,0xad,0x64,0x7a,0x57,0x65,0x31,0x11,0xdb,0xfc,0x53,0x4d,0x89,0xc0,0x40,0xa8,0xf4,0x20,0x3f,0x47,0x85,0x7f,0x79,0x65,0x13,0xa,0x7f,0x33,0xbf,0x2e,0xfa,0x8a,0x85,0xa3,0xc1,0x99,0x9e,0xdf,0xb6,0xd,0x4b,0x1e,0xba,0x4c,0xeb,0x7b,0x25,0x7f,0xbf,0x52,0x1e,0xd1,0x15,0xf5,0x9b,0xcf,0x62,0xcd,0x33,0x22,0xc8,0xe9,0x8e,0xcc,0xa2,0x54,0x8f,0xd5,0xa,0x58,0x20,0x38,0xa5,0xf7,0xa2,0x59,0xc1,0x14,0xbc,0xdd,0xa2,0x3b,0xf2,0x3c,0xa9,0xa2,0xfe,0xb9,0xba,0x42,0xdb,0x83,0x1c,0xed,0x8,0x51,0x6,0x4b,0x57,0x52,0x11,0xe2,0xf1,0x2c,0x7c,0x19,0x85,0x51,0xdc,0xb8,0xc4,0x2c,0x6e,0xae,0x5a,0x10,0x5e,0x42,0x4d,0x50,0xeb,0x7,0x89,0x78,0x31,0x6e,0xf3,0xd4,0xfe,0x8a,0xa5,0x8d,0x4d,0x1e,0xf8,0x1c,0x7f,0x25,0x96,0xf0,0x33,0x5e,0x80,0x59,0x35,0x7a,0xa,0x4a,0x9,0x23,0x73,0x42,0x83,0xf0,0x15,0x51,0x1a,0xc0,0xd5,0x32,0x3f,0xc0,0xd0,0xe5,0x1a,0x7e,0x8b,0xd7,0xea,0x8a,0xbe,0xe3,0xac,0xc0,0xcf,0x39,0x3e,0x95,0xe2,0x2,0x89,0x7e,0x2c,0x3e,0xa9,0x61,0xc2,0xe5,0x37,0xda,0x26,0x52,0x1f,0xab,0xbd,0x92,0xfc,0x94,0x3,0x5a,0x1a,0x8f,0xac,0xea,0xfc,0x96,0xab,0xc9,0xe3,0x1f,0xa2,0xfe,0xb0,0xea,0x8,0x1b,0x92,0x73,0x29,0x1a,0x99,0x16,0xdf,0xec,0x74,0x75,0xda,0xa6,0xeb,0xfe,0x38,0x79,0x17,0xd5,0x2d,0x18,0xf7,0xbc,0xd1,0xa5,0xdc,0x54,0xdc,0xbc,0xa6,0x86,0x4a,0x73,0xc3,0x72,0x43,0x85,0x5f,0xc9,0xf7,0xfb,0x7d,0xaf,0x4c,0x58,0xfc,0xf8,0xac,0xee,0x40,0xf0,0x23,0xab,0xf2,0xb8,0x9d,0x9e,0xd6,0x27,0xf4,0xab,0x8c,0xe4,0x92,0x46,0x67,0xe7,0x66,0x3b,0x60,0xf0,0x8d,0xee,0x82,0x24,0xe7,0x31,0xd7,0x8f,0x15,0x21,0x4c,0xf2,0x90,0xec,0x8f,0x23,0x2,0x84,0xa4,0x73,0x15,0xb,0x1d,0xb5,0xe,0xb4,0x89,0x5,0xcf,0xfb,0x70,0x81,0x2,0x92,0x5d,0x36,0x5d,0xf7,0x39,0x98,0xb1,0xa5,0x59,0xf7,0x27,0x98,0x3f,0x56,0xca,0x34,0x41,0xb9,0x89,0xc3,0x9a,0xb4,0x55,0x13,0x54,0x9c,0x21,0xc1,0x1e,0x6,0x86,0x51,0xb8,0xcf,0x3a,0x2d,0xe6,0x6a,0xfa,0xb4,0x89,0x2a,0x5f,0x81,0x9,0x2b,0x79,0xa2,0x8e,0x19,0xd2,0xff,0x14,0xfa,0xb5,0x18,0xb1,0x2d,0xb4,0x94,0x73,0x7f,0xcb,0x37,0xe0,0xbf,0x3b,0x2b,0xf0,0xdd,0x99,0x64,0x82,0x55,0xf7,0x57,0x9b,0xcf,0xcb,0xc4,0xec,0xa8,0x42,0xf2,0x59,0x9e,0xa6,0x3b,0x69,0x59,0x71,0x78,0x14,0x61,0xd3,0x55,0x18,0x44,0x3b,0x1e,0x42,0x8f,0x3d,0xd2,0xbf,0x9f,0x66,0xd2,0x44,0x46,0x6e,0x2a,0x28,0x14,0x17,0x62};


/*2024-4-29:
该版本不使用pk和sk的gpu版本
此版本用作keygen的正确性验证*/
int crypto_kem_keygen_single_v2(unsigned char *array_pk,unsigned char *array_sk){//unsigned char *pk,unsigned char *sk){
    //每一个block用于完成一次的crypto
    unsigned char * coins_d_0;

    unsigned char * coins_h_0;

    cudaEvent_t start, stop;



    HANDLE_ERROR(cudaHostAlloc((void**)&coins_h_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaHostAllocDefault));


    HANDLE_ERROR(cudaMalloc((void**)&coins_d_0,FPTRU_COIN_BYTES * BATCH_SIZE));

    //准备数据
    for(int i=0;i<BATCH_SIZE;i++){
        randombytes(&coins_h_0[i*FPTRU_COIN_BYTES], FPTRU_SEEDBYTES);
    }

    //look_coins_h(coins_h_0);//注意只有前32个字节会被正确赋值

    //创建两个流
    cudaStream_t stream_0;

	HANDLE_ERROR(cudaStreamCreate(&stream_0));


    //传输数据
    HANDLE_ERROR(cudaMemcpyAsync(coins_d_0, coins_h_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyHostToDevice, stream_0));
    //hash DONE:去用上别人的hash代码

    atpqc_cuda::fips202_ws::global::shake<256><<<BATCH_SIZE, 32, 0, stream_0>>>(coins_d_0, FPTRU_COIN_BYTES, FPTRU_COIN_BYTES, coins_d_0, FPTRU_COIN_BYTES, FPTRU_SEEDBYTES, 32); //DONE:思考一下这里有没有错误->必须要每一个使用的不一样

    //HANDLE_ERROR(cudaMemcpyAsync(coins_h_0, coins_d_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyDeviceToHost, stream_0));

    //cudaDeviceSynchronize();

    //look_coins_h(coins_h_0);
    //printf("hash done\n");
    //进入pke.keygen

    poly *f_0;
    poly *finv_0;
    poly *g_0;
    poly *h_0;

    poly *f_h_0;
    poly *h_h_0;


    HANDLE_ERROR(cudaHostAlloc((void**)&f_h_0, sizeof(poly) * BATCH_SIZE,cudaHostAllocDefault));
    HANDLE_ERROR(cudaHostAlloc((void**)&h_h_0, sizeof(poly) * BATCH_SIZE,cudaHostAllocDefault));
    

    HANDLE_ERROR(cudaMalloc((void**)&f_0,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&finv_0,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&g_0,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&h_0,sizeof(poly) * BATCH_SIZE));

#ifdef CORRECT //固定随机值
    HANDLE_ERROR(cudaMemcpyAsync(coins_d_0, test_coin, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyHostToDevice, stream_0));//做正确性测试使用
#endif

#if(FPTRU_BOUND == 7) //653
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 4 + 1, 0, stream_0 >>>(f_0,coins_d_0,1,1,FPTRU_COIN_BYTES);
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 4 + 1, 0, stream_0>>>(g_0,coins_d_0 + FPTRU_COIN_BYTES / 2,0,0,FPTRU_COIN_BYTES);


#elif(FPTRU_BOUND == 5) //761和1277
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 8 + 1, 0, stream_0>>>(f_0,coins_d_0,1,1,FPTRU_COIN_BYTES);
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 8 + 1, 0, stream_0>>>(g_0,coins_d_0 + FPTRU_COIN_BYTES / 2,0,0,FPTRU_COIN_BYTES);

#endif

#ifdef CORRECT_1 //验证poly_sample_and_dpuble的正确性 h和f都验证了
    poly * g_h_0;
    HANDLE_ERROR(cudaHostAlloc((void**)&g_h_0, sizeof(poly) * BATCH_SIZE,cudaHostAllocDefault));
    //设备端传输数据
    HANDLE_ERROR(cudaMemcpyAsync(g_h_0, g_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream_0));
    HANDLE_ERROR(cudaMemcpyAsync(f_h_0, f_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream_0));


    cudaDeviceSynchronize();

    for(int j=0;j<BATCH_SIZE;j++){

        for(int i=0;i<FPTRU_N;i++){
            printf("%d,",(g_h_0[j]).coeffs[i]);
        }
        printf("\n");
    }


#endif
    //cudaStreamSynchronize(stream_0);//TODO:等待流执行完成
    //BEFORE_SPEED
    poly_inverse_batch_0_v2(finv_0,f_0,stream_0);
    //AFTER_SPEED("v2")

#ifdef CORRECT_5//验证批量求逆的正确性 已验证
    poly * finv_h_0;
    HANDLE_ERROR(cudaHostAlloc((void**)&finv_h_0, sizeof(poly) * BATCH_SIZE,cudaHostAllocDefault));
    //设备端传输数据
    HANDLE_ERROR(cudaMemcpyAsync(finv_h_0, finv_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream_0));


    cudaDeviceSynchronize();
    for(int j=0;j<BATCH_SIZE;j++){

        for(int i=0;i<FPTRU_N;i++){
            printf("%d,",(finv_h_0[j]).coeffs[i]);
        }
        printf("\n");
    }


#endif
    
    
#ifdef CORRECT_2 //用于验证poly_mul_653_batch_q1_v2的正确性
    nttpoly_n653 * array_ntta_h;
    nttpoly_n653 * array_nttb_h;

    nttpoly_n653 * array_ntta_d;
    nttpoly_n653 * array_nttb_d;

    HANDLE_ERROR(cudaHostAlloc((void**)&array_ntta_h, sizeof(nttpoly_n653) * BATCH_SIZE,cudaHostAllocDefault));
    HANDLE_ERROR(cudaHostAlloc((void**)&array_nttb_h, sizeof(nttpoly_n653) * BATCH_SIZE,cudaHostAllocDefault));

    HANDLE_ERROR(cudaMalloc((void**)&array_ntta_d,sizeof(nttpoly_n653) * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&array_nttb_d,sizeof(nttpoly_n653) * BATCH_SIZE));




    poly_mul_653_batch_q1_v2<<<BATCH_SIZE,N_N653/2,0,stream_0>>>(h_0,f_0,g_0);//,array_ntta_d,array_nttb_d);//可修改函数为poly_mul_653_batch_q1_v2_test
    HANDLE_ERROR(cudaMemcpyAsync(h_h_0, h_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream_0));

    HANDLE_ERROR(cudaMemcpyAsync(array_ntta_h, array_ntta_d, sizeof(nttpoly_n653) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream_0));
    HANDLE_ERROR(cudaMemcpyAsync(array_nttb_h, array_nttb_d, sizeof(nttpoly_n653) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream_0));
    cudaDeviceSynchronize();



    for(int j=0;j<BATCH_SIZE;j++){

        /*for(int i=0;i<FPTRU_N;i++){
            printf("%d,",(f_h_0[j]).coeffs[i]);
        }

        printf("\n\n");
        for(int i=0;i<FPTRU_N;i++){
            printf("%d,",(g_h_0[j]).coeffs[i]);
        }
        printf("\n\n");*/


        for(int i=0;i<FPTRU_N;i++){
            printf("%d,",(h_h_0[j]).coeffs[i]);
        }
        printf("\n");
    }
    
    
    /*for(int j=0;j<BATCH_SIZE;j++){
        for(int i=0;i<N_N653;i++){
            printf("%d,",(array_ntta_h[j]).coeffs[i]);
        }

        printf("\n");
        for(int i=0;i<N_N653;i++){
            printf("%d,",(array_nttb_h[j]).coeffs[i]);
        }
        printf("\n");
    }*/

    HANDLE_ERROR(cudaFree(array_ntta_d));
    HANDLE_ERROR(cudaFree(array_nttb_d));
#endif

    //printf("poly_inverse_batch done\n");//DONE:下面执行不通过
#ifdef CORRECT_7 //用于验证poly_mul输入的正确性
    poly * finv_h_0;
    poly * g_h_0;
    HANDLE_ERROR(cudaHostAlloc((void**)&g_h_0, sizeof(poly) * BATCH_SIZE,cudaHostAllocDefault));
    HANDLE_ERROR(cudaHostAlloc((void**)&finv_h_0, sizeof(poly) * BATCH_SIZE,cudaHostAllocDefault));
    //设备端传输数据
    HANDLE_ERROR(cudaMemcpyAsync(finv_h_0, finv_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream_0));

    HANDLE_ERROR(cudaMemcpyAsync(g_h_0, g_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream_0));
    cudaDeviceSynchronize();
    printf("input\n");
    for(int j=0;j<BATCH_SIZE;j++){

        for(int i=0;i<FPTRU_N;i++){
            printf("%d,",(finv_h_0[j]).coeffs[i]);
        }
        printf("\n");

        for(int i=0;i<FPTRU_N;i++){
            printf("%d,",(g_h_0[j]).coeffs[i]);
        }
        printf("\n");
    }

#endif
    //BEFORE_SPEED
    poly_mul_653_batch_q1_v2<<<BATCH_SIZE,N_N653/2,0,stream_0>>>(h_0,finv_0,g_0);//正确性已验证


    //AFTER_SPEED("poly mul q2")

#ifdef CORRECT_8 //验证poly_mul_653_batch_q1_v2的正确性 已验证

    poly * finv_h_0;
    poly * g_h_0;
    HANDLE_ERROR(cudaHostAlloc((void**)&g_h_0, sizeof(poly) * BATCH_SIZE,cudaHostAllocDefault));
    HANDLE_ERROR(cudaHostAlloc((void**)&finv_h_0, sizeof(poly) * BATCH_SIZE,cudaHostAllocDefault));
    //设备端传输数据
    HANDLE_ERROR(cudaMemcpyAsync(finv_h_0, finv_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream_0));

    HANDLE_ERROR(cudaMemcpyAsync(g_h_0, g_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream_0));

    HANDLE_ERROR(cudaMemcpyAsync(h_h_0, h_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream_0));
    cudaDeviceSynchronize();

    for(int j=0;j<BATCH_SIZE;j++){
        //printf("input\n");
        for(int i=0;i<FPTRU_N;i++){
            printf("%d,",(finv_h_0[j]).coeffs[i]);
        }
        printf("\n");

        for(int i=0;i<FPTRU_N;i++){
            printf("%d,",(g_h_0[j]).coeffs[i]);
        }
        printf("\n");
        //printf("output\n");
        for(int i=0;i<FPTRU_N;i++){
            printf("%d,",(h_h_0[j]).coeffs[i]);
        }
        printf("\n");
    }

#endif

    /*cudaEventRecord( stop, 0 ) ;cudaEventSynchronize( stop );float   elapsedTime;cudaEventElapsedTime( &elapsedTime,start, stop ); printf( "poly_sample and double time:  %f ms\n", elapsedTime );cudaEventDestroy( start );cudaEventDestroy( stop );*/


    
    
    //printf("poly_mul_q1_batch done\n");

    //BEFORE_SPEED
    poly_fqcsubq_batch_v2<<<BATCH_SIZE,FPTRU_N,0,stream_0>>>(h_0);
    //printf("poly_fqcsubq_batch done\n");

    //AFTER_SPEED("poly_fqcsubq_batch end v2")

#ifdef CORRECT_9 //验证poly_fqcsubq_batch_v2的正确性 已验证
    HANDLE_ERROR(cudaMemcpyAsync(h_h_0, h_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream_0));
    cudaDeviceSynchronize();
    for(int j=0;j<BATCH_SIZE;j++){
        for(int i=0;i<FPTRU_N;i++){
                printf("%d,",(h_h_0[j]).coeffs[i]);
            }
            printf("\n");
    }

#endif

    

    //设备端传输数据
    HANDLE_ERROR(cudaMemcpyAsync(h_h_0, h_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream_0));
    HANDLE_ERROR(cudaMemcpyAsync(f_h_0, f_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream_0));


    cudaDeviceSynchronize();

    HANDLE_ERROR(cudaFree(coins_d_0));

    HANDLE_ERROR(cudaFree(f_0));

    HANDLE_ERROR(cudaFree(finv_0));

    HANDLE_ERROR(cudaFree(g_0));

    HANDLE_ERROR(cudaFree(h_0));

    //进行最后一步
    for(int j=0;j<BATCH_SIZE;j++){
        pack_pk(&array_pk[j * FPTRU_KEM_PUBLICKEYBYTES],&h_h_0[j]);
        pack_sk(&array_sk[j * FPTRU_KEM_SECRETKEYBYTES],&f_h_0[j]);
        for (int i = 0; i < FPTRU_PKE_PUBLICKEYBYTES; ++i){
            array_sk[j * FPTRU_KEM_SECRETKEYBYTES + i + FPTRU_PKE_SECRETKEYBYTES] = array_pk[j * FPTRU_KEM_PUBLICKEYBYTES + i];
        }
        randombytes(array_sk + j * FPTRU_KEM_SECRETKEYBYTES + FPTRU_PKE_SECRETKEYBYTES + FPTRU_PKE_PUBLICKEYBYTES, FPTRU_SEEDBYTES);
    }


    return 1;


}

int crypto_kem_keygen_single(unsigned char *array_pk,unsigned char *array_sk){//unsigned char *pk,unsigned char *sk){
    //每一个block用于完成一次的crypto
    unsigned char * coins_d_0;
    unsigned char * pk_d_0;
    unsigned char * sk_d_0;

    unsigned char * coins_h_0;
    unsigned char * pk_h_0;
    unsigned char * sk_h_0;

    cudaEvent_t start, stop;



    HANDLE_ERROR(cudaHostAlloc((void**)&coins_h_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaHostAllocDefault));
    HANDLE_ERROR(cudaHostAlloc((void**)&pk_h_0, FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE, cudaHostAllocDefault));
    HANDLE_ERROR(cudaHostAlloc((void**)&sk_h_0, FPTRU_KEM_SECRETKEYBYTES * BATCH_SIZE, cudaHostAllocDefault));


    HANDLE_ERROR(cudaMalloc((void**)&pk_d_0,FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&sk_d_0,FPTRU_KEM_SECRETKEYBYTES * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&coins_d_0,FPTRU_COIN_BYTES * BATCH_SIZE));

    //准备数据
    for(int i=0;i<BATCH_SIZE;i++){
        randombytes(coins_h_0+i*FPTRU_COIN_BYTES, FPTRU_SEEDBYTES);
    }

    //创建两个流
    cudaStream_t stream_0;

	HANDLE_ERROR(cudaStreamCreate(&stream_0));


    //传输数据
    HANDLE_ERROR(cudaMemcpyAsync(coins_d_0, coins_h_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyHostToDevice, stream_0));
    //hash DONE:去用上别人的hash代码

    atpqc_cuda::fips202_ws::global::shake<256><<<BATCH_SIZE, 32, 0, stream_0>>>(coins_d_0, sizeof(uint8_t), FPTRU_COIN_BYTES, coins_d_0, sizeof(uint8_t), FPTRU_SEEDBYTES, 1);

    //printf("hash done\n");
    //进入pke.keygen

    poly *f_0;
    poly *finv_0;
    poly *g_0;
    poly *h_0;


    HANDLE_ERROR(cudaMalloc((void**)&f_0,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&finv_0,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&g_0,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&h_0,sizeof(poly) * BATCH_SIZE));

#if(FPTRU_BOUND == 7) //653
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 4 + 1, 0, stream_0 >>>(f_0,coins_d_0,1,1,FPTRU_COIN_BYTES);
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 4 + 1, 0, stream_0>>>(g_0,coins_d_0 + FPTRU_COIN_BYTES / 2,0,0,FPTRU_COIN_BYTES);


#elif(FPTRU_BOUND == 5) //761和1277
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 8 + 1, 0, stream_0>>>(f_0,coins_d_0,1,1,FPTRU_COIN_BYTES);
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 8 + 1, 0, stream_0>>>(g_0,coins_d_0 + FPTRU_COIN_BYTES / 2,0,0,FPTRU_COIN_BYTES);

#endif


    //BEFORE_SPEED
    poly_inverse_batch_0_v2(finv_0,f_0,stream_0);
    //AFTER_SPEED("v2")
    
    
    

    //printf("poly_inverse_batch done\n");//TODO:下面执行不通过

    //BEFORE_SPEED
    poly_mul_653_batch_q1_v2<<<BATCH_SIZE,N_N653/2,0,stream_0>>>(h_0,finv_0,g_0);
    //AFTER_SPEED("poly mul q2")

    /*cudaEventRecord( stop, 0 ) ;cudaEventSynchronize( stop );float   elapsedTime;cudaEventElapsedTime( &elapsedTime,start, stop ); printf( "poly_sample and double time:  %f ms\n", elapsedTime );cudaEventDestroy( start );cudaEventDestroy( stop );*/


    
    
    //printf("poly_mul_q1_batch done\n");
#if(NEW == 0)
    //BEFORE_SPEED
    poly_fqcsubq_batch<<<BATCH_SIZE,1,0,stream_0>>>(h_0);
    //printf("poly_fqcsubq_batch done\n");

    //AFTER_SPEED("poly_fqcsubq_batch end v1")
#endif

#if(NEW == 1)
    //BEFORE_SPEED
    poly_fqcsubq_batch_v2<<<BATCH_SIZE,FPTRU_N,0,stream_0>>>(h_0);
    //printf("poly_fqcsubq_batch done\n");

    //AFTER_SPEED("poly_fqcsubq_batch end v2")
#endif

    //BEFORE_SPEED
    pack_pk_batch<<<BATCH_SIZE,1,0,stream_0>>>(pk_d_0,h_0);
    //printf("pack_pk_batch done\n");
    //AFTER_SPEED("pack pk batch")


#if(NEW == 0)
    BEFORE_SPEED
    pack_sk_batch<<<BATCH_SIZE,1,0,stream_0>>>(sk_d_0,f_0);
    AFTER_SPEED("pack sk batch v1")
#endif


#if(NEW == 1)
    BEFORE_SPEED
    pack_sk_batch_v2<<<BATCH_SIZE,FPTRU_N/8 + 1,0,stream_0>>>(sk_d_0,f_0,FPTRU_KEM_SECRETKEYBYTES);
    AFTER_SPEED("pack sk batch v2")
#endif



    //printf("pack_sk_batch done\n");

    

    //设备端传输数据
    HANDLE_ERROR(cudaMemcpyAsync(pk_h_0, pk_d_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyDeviceToHost, stream_0));
    HANDLE_ERROR(cudaMemcpyAsync(sk_h_0, sk_d_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyDeviceToHost, stream_0));


    cudaDeviceSynchronize();


    //cpu端拷贝数据到输出
    memcpy(array_sk,sk_h_0,FPTRU_KEM_SECRETKEYBYTES * BATCH_SIZE);
    memcpy(array_pk,pk_h_0,FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE);

    

    HANDLE_ERROR(cudaFree(pk_d_0));
    HANDLE_ERROR(cudaFree(sk_d_0));
    HANDLE_ERROR(cudaFree(coins_d_0));

    HANDLE_ERROR(cudaFree(f_0));

    HANDLE_ERROR(cudaFree(finv_0));

    HANDLE_ERROR(cudaFree(g_0));

    HANDLE_ERROR(cudaFree(h_0));

    //进行最后一步
    for(int j=0;j<BATCH_SIZE;j++){
        for (int i = 0; i < FPTRU_PKE_PUBLICKEYBYTES; ++i){
            array_sk[j * FPTRU_KEM_SECRETKEYBYTES + i + FPTRU_PKE_SECRETKEYBYTES] = array_pk[j * FPTRU_KEM_PUBLICKEYBYTES + i];
    }
    }

    for(int i=0;i<BATCH_SIZE;i++){
        randombytes(array_sk + i * FPTRU_KEM_SECRETKEYBYTES + FPTRU_PKE_SECRETKEYBYTES + FPTRU_PKE_PUBLICKEYBYTES, FPTRU_SEEDBYTES);
    }

    return 1;


}

/*
int crypto_kem_keygen(unsigned char *array_pk,unsigned char *array_sk){//unsigned char *pk,unsigned char *sk){
    //每一个block用于完成一次的crypto
    unsigned char * coins_d_0;
    unsigned char * pk_d_0;
    unsigned char * sk_d_0;

    unsigned char * coins_h_0;
    unsigned char * pk_h_0;
    unsigned char * sk_h_0;

    unsigned char * coins_d_1;
    unsigned char * pk_d_1;
    unsigned char * sk_d_1;

    unsigned char * coins_h_1;
    unsigned char * pk_h_1;
    unsigned char * sk_h_1;
    


    HANDLE_ERROR(cudaHostAlloc((void**)&coins_h_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaHostAllocDefault));
    HANDLE_ERROR(cudaHostAlloc((void**)&pk_h_0, FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE, cudaHostAllocDefault));
    HANDLE_ERROR(cudaHostAlloc((void**)&sk_h_0, FPTRU_KEM_SECRETKEYBYTES * BATCH_SIZE, cudaHostAllocDefault));


    HANDLE_ERROR(cudaHostAlloc((void**)&coins_h_1, FPTRU_COIN_BYTES * BATCH_SIZE, cudaHostAllocDefault));
    HANDLE_ERROR(cudaHostAlloc((void**)&pk_h_1, FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE, cudaHostAllocDefault));
    HANDLE_ERROR(cudaHostAlloc((void**)&sk_h_1, FPTRU_KEM_SECRETKEYBYTES * BATCH_SIZE, cudaHostAllocDefault));


    HANDLE_ERROR(cudaMalloc((void**)&pk_d_0,FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&sk_d_0,FPTRU_KEM_SECRETKEYBYTES * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&coins_d_0,FPTRU_COIN_BYTES * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&pk_d_1,FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&sk_d_1,FPTRU_KEM_SECRETKEYBYTES * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&coins_d_1,FPTRU_COIN_BYTES * BATCH_SIZE));

    //准备数据
    for(int i=0;i<BATCH_SIZE;i++){
        randombytes(coins_h_0+i*FPTRU_COIN_BYTES, FPTRU_SEEDBYTES);
        randombytes(coins_h_1+i*FPTRU_COIN_BYTES, FPTRU_SEEDBYTES);
    }

    //创建两个流
    cudaStream_t stream_0;
	cudaStream_t stream_1;

	HANDLE_ERROR(cudaStreamCreate(&stream_0));
	HANDLE_ERROR(cudaStreamCreate(&stream_1));

    //传输数据
    HANDLE_ERROR(cudaMemcpyAsync(coins_d_0, coins_h_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyHostToDevice, stream_0));
    HANDLE_ERROR(cudaMemcpyAsync(coins_d_1, coins_h_1, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyHostToDevice, stream_1));

    //hash DONE:去用上别人的hash代码

    atpqc_cuda::fips202_ws::global::shake<256><<<BATCH_SIZE, 32, 0, stream_0>>>(coins_d_0, sizeof(uint8_t), FPTRU_COIN_BYTES, coins_d_0, sizeof(uint8_t), FPTRU_SEEDBYTES, 1);

    atpqc_cuda::fips202_ws::global::shake<256><<<BATCH_SIZE, 32, 0, stream_1>>>(coins_d_1, sizeof(uint8_t), FPTRU_COIN_BYTES, coins_d_1, sizeof(uint8_t), FPTRU_SEEDBYTES, 1);

    //printf("hash done\n");
    //进入pke.keygen

    poly *f_0;
    poly *finv_0;
    poly *g_0;
    poly *h_0;

    poly *f_1;
    poly *finv_1;
    poly *g_1;
    poly *h_1;

    HANDLE_ERROR(cudaMalloc((void**)&f_0,sizeof(poly) * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&f_1,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&finv_0,sizeof(poly) * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&finv_1,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&g_0,sizeof(poly) * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&g_1,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&h_0,sizeof(poly) * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&h_1,sizeof(poly) * BATCH_SIZE));

#if(FPTRU_BOUND == 7)
    poly_sample<<<BATCH_SIZE,FPTRU_N / 8 + 1, 0, stream_0 >>>(f_0,coins_d_0);
    poly_sample<<<BATCH_SIZE,FPTRU_N / 8 + 1, 0, stream_1 >>>(f_1,coins_d_1);

#elif(FPTRU_BOUND == 5)
    poly_sample<<<BATCH_SIZE,FPTRU_N / 4 + 1, 0, stream_0>>>(f_0,coins_d_0);
    poly_sample<<<BATCH_SIZE,FPTRU_N / 4 + 1, 0, stream_1>>>(f_1,coins_d_1);

#endif
    
    //printf("poly sample done\n");
    poly_double<<<BATCH_SIZE,FPTRU_N,0,stream_0>>>(f_0,f_0); //TODO:1.调用gpu能否带来性能的提升 2.batch是否要在__global__函数上再封装一层呢？
    poly_double<<<BATCH_SIZE,FPTRU_N,0,stream_1>>>(f_1,f_1);

    //printf("poly double done\n");
    //cudaDeviceSynchronize();


    poly_inverse_batch_0(finv_0,f_0,stream_0); //TODO:实现batch版本的inverse->在后续再调用ntt来做
    poly_inverse_batch_0(finv_1,f_1,stream_1);

    //printf("poly_inverse_batch done\n");//TODO:下面执行不通过



    poly_mul_q1_batch(h_0,finv_0,g_0,stream_0,BATCH_SIZE);
    poly_mul_q1_batch(h_1,finv_1,g_1,stream_1,BATCH_SIZE);

    //printf("poly_mul_q1_batch done\n");

    
    poly_fqcsubq_batch<<<BATCH_SIZE,1,0,stream_0>>>(h_0);
    poly_fqcsubq_batch<<<BATCH_SIZE,1,0,stream_1>>>(h_1);

    //printf("poly_fqcsubq_batch done\n");


    pack_pk_batch<<<BATCH_SIZE,1,0,stream_0>>>(pk_d_0,h_0);
    pack_pk_batch<<<BATCH_SIZE,1,0,stream_1>>>(pk_d_1,h_1);

    //printf("pack_pk_batch done\n");

    pack_sk_batch<<<BATCH_SIZE,1,0,stream_0>>>(sk_d_0,f_0);
    pack_sk_batch<<<BATCH_SIZE,1,0,stream_1>>>(sk_d_1,f_1);

    //printf("pack_sk_batch done\n");

    //设备端传输数据
    HANDLE_ERROR(cudaMemcpyAsync(pk_h_0, pk_d_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyDeviceToHost, stream_0));
    HANDLE_ERROR(cudaMemcpyAsync(sk_h_0, sk_d_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyDeviceToHost, stream_0));

    HANDLE_ERROR(cudaMemcpyAsync(pk_h_1, pk_d_1, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyDeviceToHost, stream_1));
    HANDLE_ERROR(cudaMemcpyAsync(sk_h_1, sk_d_1, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyDeviceToHost, stream_1));

    cudaDeviceSynchronize();

    //cpu端拷贝数据到输出
    
    for(int i=0;i<FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE;i++){
        array_pk[i]=pk_h_0[i];
    }
    for(int i=FPTRU_KEM_PUBLICKEYBYTES;i<FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE *2;i++){
        array_pk[i]=pk_h_1[i - FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE];
    }

    for(int i=0;i<FPTRU_KEM_SECRETKEYBYTES * BATCH_SIZE;i++){
        array_sk[i]=sk_h_0[i];
    }
    for(int i=0;i<FPTRU_KEM_SECRETKEYBYTES * BATCH_SIZE * 2;i++){
        array_sk[i]=sk_h_1[i - FPTRU_KEM_SECRETKEYBYTES * BATCH_SIZE];
    }

    HANDLE_ERROR(cudaFree(pk_d_0));
    HANDLE_ERROR(cudaFree(sk_d_0));
    HANDLE_ERROR(cudaFree(coins_d_0));

    HANDLE_ERROR(cudaFree(pk_d_1));
    HANDLE_ERROR(cudaFree(sk_d_1));
    HANDLE_ERROR(cudaFree(coins_d_1));

    HANDLE_ERROR(cudaFree(f_0));
    HANDLE_ERROR(cudaFree(f_1));

    HANDLE_ERROR(cudaFree(finv_0));
    HANDLE_ERROR(cudaFree(finv_1));

    HANDLE_ERROR(cudaFree(g_0));
    HANDLE_ERROR(cudaFree(g_1));

    HANDLE_ERROR(cudaFree(h_0));
    HANDLE_ERROR(cudaFree(h_1));

    return 1;


}
*/

/*2024-5-8:
参数:array_pk:cpu端变量，用于存储BATCH_SIZE个待生成的公钥
    array_sk:cpu端变量,用于存储BATCH_SIZE个待生成的私钥
    strem:使用的流名称
    
处理完成:在stream上完成BATCH_SIZE个公私钥的生成
TODO:如何并发呢？不能等这个完成了再做下面的！
*/
void crypto_kem_keygen(unsigned char *array_pk,unsigned char *array_sk,cudaStream_t stream){//unsigned char *pk,unsigned char *sk){
    //每一个block用于完成一次的crypto
    unsigned char * coins_d_0;

    unsigned char * coins_h_0;

    cudaEvent_t start, stop;



    HANDLE_ERROR(cudaHostAlloc((void**)&coins_h_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaHostAllocDefault));


    HANDLE_ERROR(cudaMalloc((void**)&coins_d_0,FPTRU_COIN_BYTES * BATCH_SIZE));

    //准备数据
    for(int i=0;i<BATCH_SIZE;i++){
        randombytes(&coins_h_0[i*FPTRU_COIN_BYTES], FPTRU_SEEDBYTES);
    }

    //创建两个流
    /*cudaStream_t stream_0;

	HANDLE_ERROR(cudaStreamCreate(&stream_0));*/


    //传输数据
    HANDLE_ERROR(cudaMemcpyAsync(coins_d_0, coins_h_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyHostToDevice, stream));
    //hash DONE:去用上别人的hash代码

    atpqc_cuda::fips202_ws::global::shake<256><<<BATCH_SIZE, 32, 0, stream>>>(coins_d_0, FPTRU_COIN_BYTES, FPTRU_COIN_BYTES, coins_d_0, FPTRU_COIN_BYTES, FPTRU_SEEDBYTES, 32);

    //进入pke.keygen

    poly *f_0;
    poly *finv_0;
    poly *g_0;
    poly *h_0;

    poly *f_h_0;
    poly *h_h_0;


    HANDLE_ERROR(cudaHostAlloc((void**)&f_h_0, sizeof(poly) * BATCH_SIZE,cudaHostAllocDefault));
    HANDLE_ERROR(cudaHostAlloc((void**)&h_h_0, sizeof(poly) * BATCH_SIZE,cudaHostAllocDefault));
    

    HANDLE_ERROR(cudaMalloc((void**)&f_0,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&finv_0,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&g_0,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&h_0,sizeof(poly) * BATCH_SIZE));

#ifdef CORRECT_CION //固定随机值
    HANDLE_ERROR(cudaMemcpyAsync(coins_d_0, test_coin, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyHostToDevice, stream_0));//做正确性测试使用
#endif

#if(FPTRU_BOUND == 7) //653
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 4 + 1, 0, stream >>>(f_0,coins_d_0,1,1,FPTRU_COIN_BYTES);
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 4 + 1, 0, stream>>>(g_0,coins_d_0 + FPTRU_COIN_BYTES / 2,0,0,FPTRU_COIN_BYTES);


#elif(FPTRU_BOUND == 5) //761和1277
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 8 + 1, 0, stream>>>(f_0,coins_d_0,1,1,FPTRU_COIN_BYTES);
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 8 + 1, 0, stream>>>(g_0,coins_d_0 + FPTRU_COIN_BYTES / 2,0,0,FPTRU_COIN_BYTES);

#endif


    //cudaStreamSynchronize(stream_0);//TODO:等待流执行完成
    //BEFORE_SPEED
    poly_inverse_batch_0_v2(finv_0,f_0,stream);
    //AFTER_SPEED("v2")
   
    //BEFORE_SPEED
    
    //BEFORE_SPEED
    poly_mul_653_batch_q1_v2<<<BATCH_SIZE,N_N653/2,0,stream>>>(h_0,finv_0,g_0);//正确性已验证 //TODO:zhc一定要改回来
    
    /*cudaEventRecord( stop, 0 ) ;cudaEventSynchronize( stop );float   elapsedTime;cudaEventElapsedTime( &elapsedTime,start, stop );

    cudaEventDestroy( start );cudaEventDestroy( stop );*/

    poly_fqcsubq_batch_v2<<<BATCH_SIZE,FPTRU_N,0,stream>>>(h_0);
    

    

    //设备端传输数据
    HANDLE_ERROR(cudaMemcpyAsync(h_h_0, h_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    HANDLE_ERROR(cudaMemcpyAsync(f_h_0, f_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));


    cudaStreamSynchronize(stream);

    HANDLE_ERROR(cudaFree(coins_d_0));

    HANDLE_ERROR(cudaFree(f_0));

    HANDLE_ERROR(cudaFree(finv_0));

    HANDLE_ERROR(cudaFree(g_0));

    HANDLE_ERROR(cudaFree(h_0));

    //进行最后一步
    for(int j=0;j<BATCH_SIZE;j++){
        pack_pk(&array_pk[j * FPTRU_KEM_PUBLICKEYBYTES],&h_h_0[j]);
        pack_sk(&array_sk[j * FPTRU_KEM_SECRETKEYBYTES],&f_h_0[j]);
        for (int i = 0; i < FPTRU_PKE_PUBLICKEYBYTES; ++i){
            array_sk[j * FPTRU_KEM_SECRETKEYBYTES + i + FPTRU_PKE_SECRETKEYBYTES] = array_pk[j * FPTRU_KEM_PUBLICKEYBYTES + i];
        }
        randombytes(array_sk + j * FPTRU_KEM_SECRETKEYBYTES + FPTRU_PKE_SECRETKEYBYTES + FPTRU_PKE_PUBLICKEYBYTES, FPTRU_SEEDBYTES);
    }


    //return elapsedTime;
}



void crypto_kem_keygen_v2(unsigned char *array_pk,unsigned char *array_sk,cudaStream_t stream){//unsigned char *pk,unsigned char *sk){
    //每一个block用于完成一次的crypto
    unsigned char * coins_d_0;

    unsigned char * coins_h_0;

    cudaEvent_t start, stop;



    HANDLE_ERROR(cudaHostAlloc((void**)&coins_h_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaHostAllocDefault));


    HANDLE_ERROR(cudaMalloc((void**)&coins_d_0,FPTRU_COIN_BYTES * BATCH_SIZE));

    //准备数据
    for(int i=0;i<BATCH_SIZE;i++){
        randombytes(&coins_h_0[i*FPTRU_COIN_BYTES], FPTRU_SEEDBYTES);
    }

    //创建两个流
    /*cudaStream_t stream_0;

	HANDLE_ERROR(cudaStreamCreate(&stream_0));*/


    //传输数据
    HANDLE_ERROR(cudaMemcpyAsync(coins_d_0, coins_h_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyHostToDevice, stream));
    //hash DONE:去用上别人的hash代码

    atpqc_cuda::fips202_ws::global::shake<256><<<BATCH_SIZE, 32, 0, stream>>>(coins_d_0, FPTRU_COIN_BYTES, FPTRU_COIN_BYTES, coins_d_0, FPTRU_COIN_BYTES, FPTRU_SEEDBYTES, 32);

    //进入pke.keygen

    poly *f_0;
    poly *finv_0;
    poly *g_0;
    poly *h_0;

    poly *f_h_0;
    poly *h_h_0;


    HANDLE_ERROR(cudaHostAlloc((void**)&f_h_0, sizeof(poly) * BATCH_SIZE,cudaHostAllocDefault));
    HANDLE_ERROR(cudaHostAlloc((void**)&h_h_0, sizeof(poly) * BATCH_SIZE,cudaHostAllocDefault));
    

    HANDLE_ERROR(cudaMalloc((void**)&f_0,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&finv_0,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&g_0,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&h_0,sizeof(poly) * BATCH_SIZE));

#ifdef CORRECT_CION //固定随机值
    HANDLE_ERROR(cudaMemcpyAsync(coins_d_0, test_coin, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyHostToDevice, stream_0));//做正确性测试使用
#endif

#if(FPTRU_BOUND == 7) //653
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 4 + 1, 0, stream >>>(f_0,coins_d_0,1,1,FPTRU_COIN_BYTES);
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 4 + 1, 0, stream>>>(g_0,coins_d_0 + FPTRU_COIN_BYTES / 2,0,0,FPTRU_COIN_BYTES);


#elif(FPTRU_BOUND == 5) //761和1277
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 8 + 1, 0, stream>>>(f_0,coins_d_0,1,1,FPTRU_COIN_BYTES);
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 8 + 1, 0, stream>>>(g_0,coins_d_0 + FPTRU_COIN_BYTES / 2,0,0,FPTRU_COIN_BYTES);

#endif


    //cudaStreamSynchronize(stream_0);//TODO:等待流执行完成
    //BEFORE_SPEED
    poly_inverse_batch_0_v3(finv_0,f_0,stream);
    //AFTER_SPEED("v2")
   
    //BEFORE_SPEED
    
    //BEFORE_SPEED
    poly_mul_653_batch_q1_v3<<<BATCH_SIZE,168,0,stream>>>(h_0,finv_0,g_0);//正确性已验证 //TODO:zhc一定要改回来
    
    /*cudaEventRecord( stop, 0 ) ;cudaEventSynchronize( stop );float   elapsedTime;cudaEventElapsedTime( &elapsedTime,start, stop );

    cudaEventDestroy( start );cudaEventDestroy( stop );*/


    poly_fqcsubq_batch_v2<<<BATCH_SIZE,FPTRU_N,0,stream>>>(h_0);
    

    

    //设备端传输数据
    HANDLE_ERROR(cudaMemcpyAsync(h_h_0, h_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    HANDLE_ERROR(cudaMemcpyAsync(f_h_0, f_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));


    cudaStreamSynchronize(stream);

    HANDLE_ERROR(cudaFree(coins_d_0));

    HANDLE_ERROR(cudaFree(f_0));

    HANDLE_ERROR(cudaFree(finv_0));

    HANDLE_ERROR(cudaFree(g_0));

    HANDLE_ERROR(cudaFree(h_0));

    //进行最后一步
    for(int j=0;j<BATCH_SIZE;j++){
        pack_pk(&array_pk[j * FPTRU_KEM_PUBLICKEYBYTES],&h_h_0[j]);
        pack_sk(&array_sk[j * FPTRU_KEM_SECRETKEYBYTES],&f_h_0[j]);
        for (int i = 0; i < FPTRU_PKE_PUBLICKEYBYTES; ++i){
            array_sk[j * FPTRU_KEM_SECRETKEYBYTES + i + FPTRU_PKE_SECRETKEYBYTES] = array_pk[j * FPTRU_KEM_PUBLICKEYBYTES + i];
        }
        randombytes(array_sk + j * FPTRU_KEM_SECRETKEYBYTES + FPTRU_PKE_SECRETKEYBYTES + FPTRU_PKE_PUBLICKEYBYTES, FPTRU_SEEDBYTES);
    }


    //return elapsedTime;
}


double crypto_kem_keygen_no_inv_batch(unsigned char *array_pk,unsigned char *array_sk,cudaStream_t stream){//unsigned char *pk,unsigned char *sk){
    //每一个block用于完成一次的crypto
    
    struct timeval cpu_start,cpu_end;
    gettimeofday(&cpu_start, NULL);

    unsigned char * coins_d_0;

    unsigned char * coins_h_0;

    cudaEvent_t start, stop;



    HANDLE_ERROR(cudaHostAlloc((void**)&coins_h_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaHostAllocDefault));


    HANDLE_ERROR(cudaMalloc((void**)&coins_d_0,FPTRU_COIN_BYTES * BATCH_SIZE));

    //准备数据
    for(int i=0;i<BATCH_SIZE;i++){
        randombytes(&coins_h_0[i*FPTRU_COIN_BYTES], FPTRU_SEEDBYTES);
    }

    //创建两个流
    /*cudaStream_t stream_0;

	HANDLE_ERROR(cudaStreamCreate(&stream_0));*/


    //传输数据
    HANDLE_ERROR(cudaMemcpyAsync(coins_d_0, coins_h_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyHostToDevice, stream));
    //hash DONE:去用上别人的hash代码

    atpqc_cuda::fips202_ws::global::shake<256><<<BATCH_SIZE, 32, 0, stream>>>(coins_d_0, FPTRU_COIN_BYTES, FPTRU_COIN_BYTES, coins_d_0, FPTRU_COIN_BYTES, FPTRU_SEEDBYTES, 32);

    //进入pke.keygen

    poly *f_0;
    poly *finv_0;
    poly *g_0;
    poly *h_0;

    poly *f_h_0;
    poly *h_h_0;


    HANDLE_ERROR(cudaHostAlloc((void**)&f_h_0, sizeof(poly) * BATCH_SIZE,cudaHostAllocDefault));
    HANDLE_ERROR(cudaHostAlloc((void**)&h_h_0, sizeof(poly) * BATCH_SIZE,cudaHostAllocDefault));
    

    HANDLE_ERROR(cudaMalloc((void**)&f_0,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&finv_0,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&g_0,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&h_0,sizeof(poly) * BATCH_SIZE));

#ifdef CORRECT_CION //固定随机值
    HANDLE_ERROR(cudaMemcpyAsync(coins_d_0, test_coin, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyHostToDevice, stream_0));//做正确性测试使用
#endif

#if(FPTRU_BOUND == 7) //653
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 4 + 1, 0, stream >>>(f_0,coins_d_0,1,1,FPTRU_COIN_BYTES);
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 4 + 1, 0, stream>>>(g_0,coins_d_0 + FPTRU_COIN_BYTES / 2,0,0,FPTRU_COIN_BYTES);


#elif(FPTRU_BOUND == 5) //761和1277
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 8 + 1, 0, stream>>>(f_0,coins_d_0,1,1,FPTRU_COIN_BYTES);
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 8 + 1, 0, stream>>>(g_0,coins_d_0 + FPTRU_COIN_BYTES / 2,0,0,FPTRU_COIN_BYTES);

#endif


    //cudaStreamSynchronize(stream_0);//TODO:等待流执行完成
    //BEFORE_SPEED
    //poly_inverse_batch_0_v3(finv_0,f_0,stream);
    poly_inv<<<BATCH_SIZE,FPTRU_N,0,stream>>>(finv_0,f_0);
    //AFTER_SPEED("v2")
   
    //BEFORE_SPEED
    
    //BEFORE_SPEED
    poly_mul_653_batch_q1_v3<<<BATCH_SIZE,168,0,stream>>>(h_0,finv_0,g_0);//正确性已验证 //TODO:zhc一定要改回来
    
    /*cudaEventRecord( stop, 0 ) ;cudaEventSynchronize( stop );float   elapsedTime;cudaEventElapsedTime( &elapsedTime,start, stop );

    cudaEventDestroy( start );cudaEventDestroy( stop );*/


    poly_fqcsubq_batch_v2<<<BATCH_SIZE,FPTRU_N,0,stream>>>(h_0);
    

    

    //设备端传输数据
    HANDLE_ERROR(cudaMemcpyAsync(h_h_0, h_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    HANDLE_ERROR(cudaMemcpyAsync(f_h_0, f_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));


    cudaStreamSynchronize(stream);

    HANDLE_ERROR(cudaFree(coins_d_0));

    HANDLE_ERROR(cudaFree(f_0));

    HANDLE_ERROR(cudaFree(finv_0));

    HANDLE_ERROR(cudaFree(g_0));

    HANDLE_ERROR(cudaFree(h_0));

    //进行最后一步
    for(int j=0;j<BATCH_SIZE;j++){
        pack_pk(&array_pk[j * FPTRU_KEM_PUBLICKEYBYTES],&h_h_0[j]);
        pack_sk(&array_sk[j * FPTRU_KEM_SECRETKEYBYTES],&f_h_0[j]);
        for (int i = 0; i < FPTRU_PKE_PUBLICKEYBYTES; ++i){
            array_sk[j * FPTRU_KEM_SECRETKEYBYTES + i + FPTRU_PKE_SECRETKEYBYTES] = array_pk[j * FPTRU_KEM_PUBLICKEYBYTES + i];
        }
        randombytes(array_sk + j * FPTRU_KEM_SECRETKEYBYTES + FPTRU_PKE_SECRETKEYBYTES + FPTRU_PKE_PUBLICKEYBYTES, FPTRU_SEEDBYTES);
    }


    //return elapsedTime;
    gettimeofday(&cpu_end, NULL);
    double timeuse = 1000000*(cpu_end.tv_sec - cpu_start.tv_sec) + cpu_end.tv_usec-cpu_start.tv_usec;//单位为微秒
    return timeuse;
}



//#define CORRECT_CION
double crypto_kem_keygen_no_inv_batch_stream_ordered_async(unsigned char *array_pk,unsigned char *array_sk,cudaStream_t stream){//unsigned char *pk,unsigned char *sk){
    //每一个block用于完成一次的crypto
    struct timeval cpu_start,cpu_end;
    gettimeofday(&cpu_start, NULL);
    
    cudaMemPool_t mempool;
    cudaDeviceGetDefaultMemPool(&mempool, 0);//指定设备为0（即第一个GPU）
    uint64_t threshold = UINT64_MAX;
    cudaMemPoolSetAttribute(mempool, cudaMemPoolAttrReleaseThreshold, &threshold);


    unsigned char * coins_d_0;

    unsigned char * coins_h_0;

    cudaEvent_t start, stop;



    HANDLE_ERROR(cudaHostAlloc((void**)&coins_h_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaHostAllocDefault));


    HANDLE_ERROR(cudaMallocAsync((void**)&coins_d_0,FPTRU_COIN_BYTES * BATCH_SIZE,stream));

    //准备数据
    for(int i=0;i<BATCH_SIZE;i++){
        randombytes(&coins_h_0[i*FPTRU_COIN_BYTES], FPTRU_SEEDBYTES);
    }


    //创建两个流
    /*cudaStream_t stream_0;

	HANDLE_ERROR(cudaStreamCreate(&stream_0));*/

    
    //传输数据
    HANDLE_ERROR(cudaMemcpyAsync(coins_d_0, coins_h_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyHostToDevice, stream));
    //hash DONE:去用上别人的hash代码
 
    //BEFORE_SPEED
    atpqc_cuda::fips202_ws::global::shake<256><<<BATCH_SIZE, 32, 0, stream>>>(coins_d_0, FPTRU_COIN_BYTES, FPTRU_COIN_BYTES, coins_d_0, FPTRU_COIN_BYTES, FPTRU_SEEDBYTES, BATCH_SIZE);
    //AFTER_SPEED("hash")

    //进入pke.keygen


    poly *f_0;
    poly *finv_0;
    poly *g_0;
    poly *h_0;

    poly *f_h_0;
    poly *h_h_0;


    HANDLE_ERROR(cudaHostAlloc((void**)&f_h_0, sizeof(poly) * BATCH_SIZE,cudaHostAllocDefault));
    HANDLE_ERROR(cudaHostAlloc((void**)&h_h_0, sizeof(poly) * BATCH_SIZE,cudaHostAllocDefault));
    

    HANDLE_ERROR(cudaMallocAsync((void**)&f_0,sizeof(poly) * BATCH_SIZE,stream));

    HANDLE_ERROR(cudaMallocAsync((void**)&finv_0,sizeof(poly) * BATCH_SIZE,stream));

    HANDLE_ERROR(cudaMallocAsync((void**)&g_0,sizeof(poly) * BATCH_SIZE,stream));

    HANDLE_ERROR(cudaMallocAsync((void**)&h_0,sizeof(poly) * BATCH_SIZE,stream));



#ifdef CORRECT_CION //固定随机值
    HANDLE_ERROR(cudaMemcpyAsync(coins_d_0, test_coin, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyHostToDevice, stream));//做正确性测试使用
#endif

    //BEFORE_SPEED
#if(FPTRU_BOUND == 7) //653
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 4 + 1, 0, stream >>>(f_0,coins_d_0,1,1,FPTRU_COIN_BYTES);
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 4 + 1, 0, stream>>>(g_0,coins_d_0 + FPTRU_COIN_BYTES / 2,0,0,FPTRU_COIN_BYTES);


#elif(FPTRU_BOUND == 5) //761和1277
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 8 + 1, 0, stream>>>(f_0,coins_d_0,1,1,FPTRU_COIN_BYTES);
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 8 + 1, 0, stream>>>(g_0,coins_d_0 + FPTRU_COIN_BYTES / 2,0,0,FPTRU_COIN_BYTES);

#endif
   

    HANDLE_ERROR(cudaFreeAsync(coins_d_0,stream));
    
    //cudaStreamSynchronize(stream_0);//TODO:等待流执行完成
    //BEFORE_SPEED
    //poly_inverse_batch_0_v3(finv_0,f_0,stream);

#if (FPTRU_N == 653 || FPTRU_N == 761)
    poly_inv<<<BATCH_SIZE,FPTRU_N ,0,stream>>>(finv_0,f_0);
    //poly_inv_1277<<<BATCH_SIZE,FPTRU_N/2+1 ,0,stream>>>(finv_0,f_0);
    //AFTER_SPEED("v2")
#elif (FPTRU_N == 1277)
    poly_inv_1277<<<BATCH_SIZE,FPTRU_N/2+1 ,0,stream>>>(finv_0,f_0);
#endif
    
    

    //BEFORE_SPEED
    
    //BEFORE_SPEED
#if (FPTRU_N == 653)
    poly_mul_653_batch_q1_v3<<<BATCH_SIZE,168,0,stream>>>(h_0,finv_0,g_0);//正确性已验证 //TODO:zhc一定要改回来
#elif (FPTRU_N == 761)
    poly_mul_761_batch_q1<<<BATCH_SIZE,192,0,stream>>>(h_0,finv_0,g_0);
#elif (FPTRU_N == 1277)
    poly_mul_1277_batch_q1<<<BATCH_SIZE,320,0,stream>>>(h_0,finv_0,g_0);
#endif

    
    HANDLE_ERROR(cudaFreeAsync(finv_0,stream));
    HANDLE_ERROR(cudaFreeAsync(g_0,stream));
    
    /*cudaEventRecord( stop, 0 ) ;cudaEventSynchronize( stop );float   elapsedTime;cudaEventElapsedTime( &elapsedTime,start, stop );

    cudaEventDestroy( start );cudaEventDestroy( stop );*/
#if (FPTRU_N == 653 || FPTRU_N == 761)
    poly_fqcsubq_batch_v2<<<BATCH_SIZE,FPTRU_N,0,stream>>>(h_0);
    //poly_fqcsubq_batch_1277<<<BATCH_SIZE,FPTRU_N/4 + 1,0,stream>>>(h_0);
#elif (FPTRU_N == 1277)
    poly_fqcsubq_batch_1277<<<BATCH_SIZE,FPTRU_N/4 + 1,0,stream>>>(h_0);
#endif

    //设备端传输数据
    HANDLE_ERROR(cudaMemcpyAsync(h_h_0, h_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    HANDLE_ERROR(cudaMemcpyAsync(f_h_0, f_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    //cudaEventRecord( stop, 0 ) ;cudaEventSynchronize( stop );float elapsedTime; cudaEventElapsedTime( &elapsedTime,start, stop ); printf( "%s: %f us\n","poly_inv",elapsedTime*1000 );cudaEventDestroy( start );cudaEventDestroy( stop );



    cudaStreamSynchronize(stream);


    HANDLE_ERROR(cudaFreeAsync(f_0,stream));
    HANDLE_ERROR(cudaFreeAsync(h_0,stream));
    

    //进行最后一步
    for(int j=0;j<BATCH_SIZE;j++){
        pack_pk(&array_pk[j * FPTRU_KEM_PUBLICKEYBYTES],&h_h_0[j]);
        pack_sk(&array_sk[j * FPTRU_KEM_SECRETKEYBYTES],&f_h_0[j]);
        for (int i = 0; i < FPTRU_PKE_PUBLICKEYBYTES; ++i){
            array_sk[j * FPTRU_KEM_SECRETKEYBYTES + i + FPTRU_PKE_SECRETKEYBYTES] = array_pk[j * FPTRU_KEM_PUBLICKEYBYTES + i];
        }
        randombytes(array_sk + j * FPTRU_KEM_SECRETKEYBYTES + FPTRU_PKE_SECRETKEYBYTES + FPTRU_PKE_PUBLICKEYBYTES, FPTRU_SEEDBYTES);
    }

    gettimeofday(&cpu_end, NULL);
    double timeuse = 1000000*(cpu_end.tv_sec - cpu_start.tv_sec) + cpu_end.tv_usec-cpu_start.tv_usec;//单位为微秒

    

    return timeuse;
    //return 0;
}



void crypto_kem_keygen_tensor_core(unsigned char *array_pk,unsigned char *array_sk,cudaStream_t stream){//unsigned char *pk,unsigned char *sk){
    //printf("tensor core\n");
    //每一个block用于完成一次的crypto
    unsigned char * coins_d_0;

    unsigned char * coins_h_0;

    cudaEvent_t start, stop;



    HANDLE_ERROR(cudaHostAlloc((void**)&coins_h_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaHostAllocDefault));


    HANDLE_ERROR(cudaMallocAsync((void**)&coins_d_0,FPTRU_COIN_BYTES * BATCH_SIZE,stream));

    //准备数据
    for(int i=0;i<BATCH_SIZE;i++){
        randombytes(&coins_h_0[i*FPTRU_COIN_BYTES], FPTRU_SEEDBYTES);
    }

    //创建两个流
    /*cudaStream_t stream_0;

	HANDLE_ERROR(cudaStreamCreate(&stream_0));*/


    //传输数据
    HANDLE_ERROR(cudaMemcpyAsync(coins_d_0, coins_h_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyHostToDevice, stream));
    //hash DONE:去用上别人的hash代码

    atpqc_cuda::fips202_ws::global::shake<256><<<BATCH_SIZE, 32, 0, stream>>>(coins_d_0, FPTRU_COIN_BYTES, FPTRU_COIN_BYTES, coins_d_0, FPTRU_COIN_BYTES, FPTRU_SEEDBYTES, 32);

    //进入pke.keygen

    poly *f_0;
    poly *finv_0;
    poly *g_0;
    poly *h_0;

    poly *f_h_0;
    poly *h_h_0;


    HANDLE_ERROR(cudaHostAlloc((void**)&f_h_0, sizeof(poly) * BATCH_SIZE,cudaHostAllocDefault));
    HANDLE_ERROR(cudaHostAlloc((void**)&h_h_0, sizeof(poly) * BATCH_SIZE,cudaHostAllocDefault));
    

    HANDLE_ERROR(cudaMallocAsync((void**)&f_0,sizeof(poly) * BATCH_SIZE,stream));

    HANDLE_ERROR(cudaMallocAsync((void**)&finv_0,sizeof(poly) * BATCH_SIZE,stream));

    HANDLE_ERROR(cudaMallocAsync((void**)&g_0,sizeof(poly) * BATCH_SIZE,stream));

    HANDLE_ERROR(cudaMallocAsync((void**)&h_0,sizeof(poly) * BATCH_SIZE,stream));

#ifdef CORRECT_CION //固定随机值
    HANDLE_ERROR(cudaMemcpyAsync(coins_d_0, test_coin, FPTRU_COIN_BYTES * BATCH_SIZE, cudaMemcpyHostToDevice, stream));//做正确性测试使用
#endif

#if(FPTRU_BOUND == 7) //653
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 4 + 1, 0, stream >>>(f_0,coins_d_0,1,1,FPTRU_COIN_BYTES);
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 4 + 1, 0, stream>>>(g_0,coins_d_0 + FPTRU_COIN_BYTES / 2,0,0,FPTRU_COIN_BYTES);


#elif(FPTRU_BOUND == 5) //761和1277
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 8 + 1, 0, stream>>>(f_0,coins_d_0,1,1,FPTRU_COIN_BYTES);
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 8 + 1, 0, stream>>>(g_0,coins_d_0 + FPTRU_COIN_BYTES / 2,0,0,FPTRU_COIN_BYTES);

#endif

    HANDLE_ERROR(cudaFreeAsync(coins_d_0,stream));
    //cudaStreamSynchronize(stream_0);//TODO:等待流执行完成
    //BEFORE_SPEED
    //poly_inverse_batch_0_v3(finv_0,f_0,stream);
    poly_inv<<<BATCH_SIZE,FPTRU_N,0,stream>>>(finv_0,f_0); //TODO:这里写了加1操作
    //AFTER_SPEED("v2")
   
    //BEFORE_SPEED
    
    //BEFORE_SPEED
    /*****************tesncor core工作区*****************/
    
    //poly_mul_653_batch_q1_v3<<<BATCH_SIZE,168,0,stream>>>(h_0,finv_0,g_0);//正确性已验证 //TODO:zhc一定要改回来

    tensor_poly_mul_v3(h_0,finv_0,g_0,stream);

    HANDLE_ERROR(cudaFreeAsync(finv_0,stream));
    HANDLE_ERROR(cudaFreeAsync(g_0,stream));


    /*****************tesncor core工作区*****************/
    
    /*cudaEventRecord( stop, 0 ) ;cudaEventSynchronize( stop );float   elapsedTime;cudaEventElapsedTime( &elapsedTime,start, stop );

    cudaEventDestroy( start );cudaEventDestroy( stop );*/


    poly_fqcsubq_batch_v2<<<BATCH_SIZE,FPTRU_N,0,stream>>>(h_0);
    

    //设备端传输数据
    HANDLE_ERROR(cudaMemcpyAsync(h_h_0, h_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    HANDLE_ERROR(cudaMemcpyAsync(f_h_0, f_0, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));


    cudaStreamSynchronize(stream);

    

    HANDLE_ERROR(cudaFreeAsync(f_0,stream));
    HANDLE_ERROR(cudaFreeAsync(h_0,stream));

    //进行最后一步
    for(int j=0;j<BATCH_SIZE;j++){
        pack_pk(&array_pk[j * FPTRU_KEM_PUBLICKEYBYTES],&h_h_0[j]);
        pack_sk(&array_sk[j * FPTRU_KEM_SECRETKEYBYTES],&f_h_0[j]);
        for (int i = 0; i < FPTRU_PKE_PUBLICKEYBYTES; ++i){
            array_sk[j * FPTRU_KEM_SECRETKEYBYTES + i + FPTRU_PKE_SECRETKEYBYTES] = array_pk[j * FPTRU_KEM_PUBLICKEYBYTES + i];
        }
        randombytes(array_sk + j * FPTRU_KEM_SECRETKEYBYTES + FPTRU_PKE_SECRETKEYBYTES + FPTRU_PKE_PUBLICKEYBYTES, FPTRU_SEEDBYTES);
    }


    //return elapsedTime;
}

__global__ void pk_to_m(unsigned char * m, unsigned char * pk){
    int bid = blockIdx.x;
    int tid = threadIdx.x;

    m[bid * (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) + tid] = pk[bid * FPTRU_KEM_PUBLICKEYBYTES + tid];

}

/*2024-7-8:
输入:buf:缓冲区指针
    k:共享秘密的存储地址

过程:从buf缓冲区中抽取出部分作为共享的秘密
线程组织形式:<<<batch_size,FPTRU_SHAREDKEYBYTES>>>
*/
__global__ void buf2k(unsigned char * buf,unsigned char * k){
    k[blockIdx.x * FPTRU_SHAREDKEYBYTES + threadIdx.x] = buf[ blockIdx.x * (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) + threadIdx.x];
}

unsigned char seed[FPTRU_SEEDBYTES]={213,153,187,148,28,44,238,49,18,139,227,227,58,178,45,166,105,7,200,183,92,88,9,9,157,63,142,243,64,211,192,209,};
//#define debug 1

#define pinned
//#define no_pinned
/*2024-7-8:
附:正确性验证方案，固定seed和PK,同c实现相比，是否具有相同的ct和k->正确性已检验*/
void crypto_kem_encaps_test(unsigned char *ct, unsigned char *k, const unsigned char *pk,cudaStream_t stream){
    cudaEvent_t start, stop;
    unsigned char * buf_h;
    unsigned char * buf_d;

    unsigned char * m_d;
    unsigned char * pk_d;

    poly * h_d;
    poly * h_h;

    poly * r_d;
    poly * sigma_d;
    poly * c_d;

    unsigned char * ct_d;
    unsigned char * k_d;

#ifdef pinned
    HANDLE_ERROR(cudaHostAlloc((void**)&buf_h, (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE, cudaHostAllocDefault));

    HANDLE_ERROR(cudaHostAlloc((void**)&h_h, sizeof(poly) * BATCH_SIZE, cudaHostAllocDefault));
#endif

#ifdef no_pinned
    buf_h =(unsigned char*) malloc((FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE);
    h_h = (poly*) malloc(sizeof(poly) * BATCH_SIZE);
#endif


    

    HANDLE_ERROR(cudaMalloc((void**)&buf_d,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&m_d,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&h_d,sizeof(poly) * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&r_d,sizeof(poly) * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&sigma_d,sizeof(poly) * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&c_d,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&ct_d, FPTRU_PKE_CIPHERTEXTBYTES * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&k_d, FPTRU_SHAREDKEYBYTES * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&pk_d, FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE));



    for(int i=0;i<BATCH_SIZE;i++){
        randombytes(&buf_h[i*(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2)], FPTRU_SEEDBYTES);

        /*for(int k=0;k<FPTRU_SEEDBYTES;k++){
            //printf("0x%x,",buf_h[k]);
            buf_h[k]=seed[k];
        }
        printf("\n");*/

        unpack_pk(&h_h[i],&pk[i*FPTRU_KEM_PUBLICKEYBYTES]);
    }

#ifdef pinned 
    BEFORE_SPEED 
    HANDLE_ERROR(cudaMemcpyAsync(buf_d, buf_h, (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE, cudaMemcpyHostToDevice, stream));

    HANDLE_ERROR(cudaMemcpyAsync(pk_d, pk, FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE, cudaMemcpyHostToDevice, stream)); //暂时不需要使用pk了


    HANDLE_ERROR(cudaMemcpyAsync(h_d, h_h, sizeof(poly) * BATCH_SIZE, cudaMemcpyHostToDevice, stream));

    AFTER_SPEED("memcpy host to device pinned")

#endif


#ifdef no_pinned
    BEFORE_SPEED 
    HANDLE_ERROR(cudaMemcpy(buf_d, buf_h, (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE, cudaMemcpyHostToDevice));

    HANDLE_ERROR(cudaMemcpy(pk_d, pk, FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE, cudaMemcpyHostToDevice)); //暂时不需要使用pk了


    HANDLE_ERROR(cudaMemcpy(h_d, h_h, sizeof(poly) * BATCH_SIZE, cudaMemcpyHostToDevice));

    AFTER_SPEED("memcpy host to device no pinned")
#endif
    //goto res;

    atpqc_cuda::fips202_ws::global::shake<256><<<BATCH_SIZE, 32, 0, stream>>>(m_d + FPTRU_PREFIXHASHBYTES, FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES, FPTRU_MSGBYTES, buf_d, FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2, 32, BATCH_SIZE); //TODO:m这里的地址是否是正确的呢 通过hashtest验证通过

#ifdef debug //除了前33个字节，后面都是一样的，验证通过
    printf("\nafter shake256\n");
    unsigned char m_h[(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) * BATCH_SIZE]={0};
    HANDLE_ERROR(cudaMemcpyAsync(m_h, m_d, (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    cudaDeviceSynchronize();
    for(int j=0;j<BATCH_SIZE;j++){
        for(int i=0;i<FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES;i++){
            printf("0x%x,",m_h[j*(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) + i]);
        }
        printf("\n\n");
    }
#endif


    pk_to_m<<<BATCH_SIZE,FPTRU_PREFIXHASHBYTES,0,stream>>>(m_d,pk_d);

#ifdef debug //验证通过
    printf("\nafter pk\n");
    //unsigned char m_h[(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) * BATCH_SIZE]={0};
    HANDLE_ERROR(cudaMemcpyAsync(m_h, m_d, (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    cudaDeviceSynchronize();
    for(int j=0;j<BATCH_SIZE;j++){
        for(int i=0;i<FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES;i++){
            printf("0x%x,",m_h[j*(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) + i]);
        }
        printf("\n\n");
    }
#endif

    atpqc_cuda::fips202_ws::global::sha3<512><<<BATCH_SIZE,32,0,stream>>>(buf_d,FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2,m_d,FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES,FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES,BATCH_SIZE);//输出.输入，输入的长度

    atpqc_cuda::fips202_ws::global::shake<256><<<BATCH_SIZE, 32, 0, stream>>>(buf_d + FPTRU_SHAREDKEYBYTES, FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2, FPTRU_COIN_BYTES / 2, buf_d + FPTRU_SHAREDKEYBYTES, FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2, 32, BATCH_SIZE); //TODO:m这里的地址是否是正确的呢 通过hashtest验证通过

    //crypto_pke_enc
    //pack_pk_batch<<<BATCH_SIZE,1,0,stream>>>(pk_d,h_d);//出于dncode非递归版本教困难以及效率的考虑

#if(FPTRU_BOUND == 7) //653
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 4 + 1, 0, stream >>>(r_d,buf_d + FPTRU_SHAREDKEYBYTES,0,0,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2));


#elif(FPTRU_BOUND == 5) //761和1277
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 8 + 1, 0, stream>>>(r_d,buf_d + FPTRU_SHAREDKEYBYTES,0,0,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2));

#endif
    poly_mul_653_batch_q1_v3<<<BATCH_SIZE,168,0,stream>>>(sigma_d,h_d,r_d);

    poly_fqcsubq_batch_v2<<<BATCH_SIZE,FPTRU_N,0,stream>>>(sigma_d);

    //TODO:poly_encode_compress模块 c_d,sigma_d,m_d+FPTRU_PREFIXHASHBYTES
    poly_fqcsubq_encode_compress_batch<<<BATCH_SIZE,FPTRU_N>>>(c_d,sigma_d,m_d+FPTRU_PREFIXHASHBYTES,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES));

#ifdef debug //c_d是正确的
    printf("see c_h\n");
    poly c_h[BATCH_SIZE];
    HANDLE_ERROR(cudaMemcpyAsync(c_h, c_d, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    cudaDeviceSynchronize();
    for(int j=0;j<BATCH_SIZE;j++){
        for(int i=0;i<FPTRU_N;i++){
            printf("%d,",c_h[j].coeffs[i]);
        }
        printf("\n");
    }

#endif
#if (FPTRU_Q2 == 1024)
    pack_ct_batch<<<BATCH_SIZE,FPTRU_N / 4 + 1>>>(ct_d,c_d);
#elif (FPTRU_Q2 == 2048)
    pack_ct_batch<<<BATCH_SIZE,FPTRU_N/8 + 1>>>(ct_d,c_d);
#elif (FPTRU_Q2 == 4096)
    pack_ct_batch<<<BATCH_SIZE,FPTRU_N / 2 + 1>>>(ct_d,c_d);
#endif

#ifdef debug
    printf("see ct\n");
    unsigned char ct_h[FPTRU_PKE_CIPHERTEXTBYTES * BATCH_SIZE]={0};
    HANDLE_ERROR(cudaMemcpyAsync(ct_h, ct_d, FPTRU_PKE_CIPHERTEXTBYTES * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    cudaDeviceSynchronize();
    for(int j=0;j<BATCH_SIZE;j++){
        for(int i=0;i<FPTRU_PKE_CIPHERTEXTBYTES;i++){
            printf("0x%x,",ct_h[j * FPTRU_PKE_CIPHERTEXTBYTES + i]);
        }
        printf("\n\n");
    }

#endif
    buf2k<<<BATCH_SIZE,FPTRU_SHAREDKEYBYTES>>>(buf_d,k_d);


    HANDLE_ERROR(cudaMemcpyAsync(ct, ct_d, FPTRU_KEM_CIPHERTEXTBYTES * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    HANDLE_ERROR(cudaMemcpyAsync(k, k_d, FPTRU_SHAREDKEYBYTES * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));

res:
    HANDLE_ERROR(cudaFree(buf_d));
    HANDLE_ERROR(cudaFree(m_d));
    HANDLE_ERROR(cudaFree(h_d));
    HANDLE_ERROR(cudaFree(r_d));
    HANDLE_ERROR(cudaFree(sigma_d));
    HANDLE_ERROR(cudaFree(c_d));
    HANDLE_ERROR(cudaFree(ct_d));
    HANDLE_ERROR(cudaFree(k_d));
    HANDLE_ERROR(cudaFree(pk_d));

}

LazyCUDATimer kernelfuse("kernel fuse");
/*简洁正确版本*/
double crypto_kem_encaps(unsigned char *ct, unsigned char *k, const unsigned char *pk,cudaStream_t stream){

    struct timeval cpu_start,cpu_end;
    gettimeofday(&cpu_start, NULL);
    cudaEvent_t start, stop;
    unsigned char * buf_h;
    unsigned char * buf_d;

    unsigned char * m_d;
    unsigned char * pk_d;

    poly * h_d;
    poly * h_h;

    poly * r_d;
    poly * sigma_d;
    poly * c_d;

    unsigned char * ct_d;
    unsigned char * k_d;

    HANDLE_ERROR(cudaHostAlloc((void**)&buf_h, (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE, cudaHostAllocDefault));

    HANDLE_ERROR(cudaHostAlloc((void**)&h_h, sizeof(poly) * BATCH_SIZE, cudaHostAllocDefault));

    HANDLE_ERROR(cudaMalloc((void**)&buf_d,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&m_d,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&h_d,sizeof(poly) * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&r_d,sizeof(poly) * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&sigma_d,sizeof(poly) * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&c_d,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&ct_d, FPTRU_PKE_CIPHERTEXTBYTES * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&k_d, FPTRU_SHAREDKEYBYTES * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&pk_d, FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE));

    /*gettimeofday(&cpu_end, NULL);
    double timeuse = 1000000*(cpu_end.tv_sec - cpu_start.tv_sec) + cpu_end.tv_usec-cpu_start.tv_usec;//单位为微秒*/

    
    for(int i=0;i<BATCH_SIZE;i++){
        randombytes(&buf_h[i*(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2)], FPTRU_SEEDBYTES);

        //固定随机值，可做正确性验证使用
        /*for(int k=0;k<FPTRU_SEEDBYTES;k++){
            //printf("0x%x,",buf_h[k]);
            buf_h[k]=seed[k];
        }
        printf("\n");*/

        unpack_pk(&h_h[i],&pk[i*FPTRU_KEM_PUBLICKEYBYTES]);
    }
    


    
    HANDLE_ERROR(cudaMemcpyAsync(buf_d, buf_h, (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE, cudaMemcpyHostToDevice, stream));

    HANDLE_ERROR(cudaMemcpyAsync(pk_d, pk, FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE, cudaMemcpyHostToDevice, stream)); //暂时不需要使用pk了


    HANDLE_ERROR(cudaMemcpyAsync(h_d, h_h, sizeof(poly) * BATCH_SIZE, cudaMemcpyHostToDevice, stream));


    atpqc_cuda::fips202_ws::global::shake<256><<<BATCH_SIZE, 32, 0, stream>>>(m_d + FPTRU_PREFIXHASHBYTES, FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES, FPTRU_MSGBYTES, buf_d, FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2, 32, BATCH_SIZE); //TODO:m这里的地址是否是正确的呢 通过hashtest验证通过



    pk_to_m<<<BATCH_SIZE,FPTRU_PREFIXHASHBYTES,0,stream>>>(m_d,pk_d);



    atpqc_cuda::fips202_ws::global::sha3<512><<<BATCH_SIZE,32,0,stream>>>(buf_d,FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2,m_d,FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES,FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES,BATCH_SIZE);//输出.输入，输入的长度

    atpqc_cuda::fips202_ws::global::shake<256><<<BATCH_SIZE, 32, 0, stream>>>(buf_d + FPTRU_SHAREDKEYBYTES, FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2, FPTRU_COIN_BYTES / 2, buf_d + FPTRU_SHAREDKEYBYTES, FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2, 32, BATCH_SIZE); //TODO:m这里的地址是否是正确的呢 通过hashtest验证通过

    //crypto_pke_enc
    //pack_pk_batch<<<BATCH_SIZE,1,0,stream>>>(pk_d,h_d);//出于dncode非递归版本教困难以及效率的考虑

#if(FPTRU_BOUND == 7) //653
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 4 + 1, 0, stream >>>(r_d,buf_d + FPTRU_SHAREDKEYBYTES,0,0,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2));


#elif(FPTRU_BOUND == 5) //761和1277
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 8 + 1, 0, stream>>>(r_d,buf_d + FPTRU_SHAREDKEYBYTES,0,0,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2));

#endif
    poly_mul_653_batch_q1_v3<<<BATCH_SIZE,168,0,stream>>>(sigma_d,h_d,r_d);

    kernelfuse.start();
    poly_fqcsubq_batch_v2<<<BATCH_SIZE,FPTRU_N,0,stream>>>(sigma_d);

    //TODO:poly_encode_compress模块 c_d,sigma_d,m_d+FPTRU_PREFIXHASHBYTES
    poly_fqcsubq_encode_compress_batch<<<BATCH_SIZE,FPTRU_N,0,stream>>>(c_d,sigma_d,m_d+FPTRU_PREFIXHASHBYTES,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES));


#if (FPTRU_Q2 == 1024)
    pack_ct_batch<<<BATCH_SIZE,FPTRU_N / 4 + 1,0,stream>>>(ct_d,c_d);
#elif (FPTRU_Q2 == 2048)
    pack_ct_batch<<<BATCH_SIZE,FPTRU_N/8 + 1,0,stream>>>(ct_d,c_d);
#elif (FPTRU_Q2 == 4096)
    pack_ct_batch<<<BATCH_SIZE,FPTRU_N / 2 + 1,0,stream>>>(ct_d,c_d);
#endif
    kernelfuse.stop();

    buf2k<<<BATCH_SIZE,FPTRU_SHAREDKEYBYTES,0,stream>>>(buf_d,k_d);

    //BEFORE_SPEED
    HANDLE_ERROR(cudaMemcpyAsync(ct, ct_d, FPTRU_KEM_CIPHERTEXTBYTES * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    HANDLE_ERROR(cudaMemcpyAsync(k, k_d, FPTRU_SHAREDKEYBYTES * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    //cudaEventRecord( stop, 0 ) ;cudaEventSynchronize( stop );float elapsedTime; cudaEventElapsedTime( &elapsedTime,start, stop ); printf( "%s: %f us\n","h2d",elapsedTime*1000 );cudaEventDestroy( start );cudaEventDestroy( stop );


    
    HANDLE_ERROR(cudaFree(buf_d));
    HANDLE_ERROR(cudaFree(m_d));
    HANDLE_ERROR(cudaFree(h_d));
    HANDLE_ERROR(cudaFree(r_d));
    HANDLE_ERROR(cudaFree(sigma_d));
    HANDLE_ERROR(cudaFree(c_d));
    HANDLE_ERROR(cudaFree(ct_d));
    HANDLE_ERROR(cudaFree(k_d));
    HANDLE_ERROR(cudaFree(pk_d));

    
    gettimeofday(&cpu_end, NULL);
    double timeuse = 1000000*(cpu_end.tv_sec - cpu_start.tv_sec) + cpu_end.tv_usec-cpu_start.tv_usec;//单位为微秒
    //return elapsedTime*1000;
    return timeuse;

}


//#define why2
/*简洁正确且使用了stream order的版本*/
double crypto_kem_encaps_stream_order(unsigned char *ct, unsigned char *k, const unsigned char *pk,cudaStream_t stream){

    cudaMemPool_t mempool;
    cudaDeviceGetDefaultMemPool(&mempool, 0);//指定设备为0（即第一个GPU）
    uint64_t threshold = UINT64_MAX;
    cudaMemPoolSetAttribute(mempool, cudaMemPoolAttrReleaseThreshold, &threshold);
    struct timeval cpu_start,cpu_end;
    gettimeofday(&cpu_start, NULL);
    cudaEvent_t start, stop;

    unsigned char * buf_h;
    unsigned char * buf_d;

    unsigned char * m_d;
    unsigned char * pk_d;

    poly * h_d;
    poly * h_h;

    poly * r_d;
    poly * sigma_d;
    poly * c_d;

    unsigned char * ct_d;
    unsigned char * k_d;

    HANDLE_ERROR(cudaHostAlloc((void**)&buf_h, (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE, cudaHostAllocDefault));

    HANDLE_ERROR(cudaHostAlloc((void**)&h_h, sizeof(poly) * BATCH_SIZE, cudaHostAllocDefault));

    HANDLE_ERROR(cudaMallocAsync((void**)&buf_d,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE,stream));

    HANDLE_ERROR(cudaMallocAsync((void**)&m_d,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) * BATCH_SIZE,stream));

    HANDLE_ERROR(cudaMallocAsync((void**)&h_d,sizeof(poly) * BATCH_SIZE,stream));
    
    HANDLE_ERROR(cudaMallocAsync((void**)&pk_d, FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE,stream));

    /*gettimeofday(&cpu_end, NULL);
    double timeuse = 1000000*(cpu_end.tv_sec - cpu_start.tv_sec) + cpu_end.tv_usec-cpu_start.tv_usec;//单位为微秒*/

    
    for(int i=0;i<BATCH_SIZE;i++){
        randombytes(&buf_h[i*(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2)], FPTRU_SEEDBYTES);

        //固定随机值，可做正确性验证使用
        /*for(int k=0;k<FPTRU_SEEDBYTES;k++){
            //printf("0x%x,",buf_h[k]);
            buf_h[i*(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) + k]=seed[k];
        }*/
        //printf("\n");
        unpack_pk(&h_h[i],&pk[i*FPTRU_KEM_PUBLICKEYBYTES]);
    }

    



    
    HANDLE_ERROR(cudaMemcpyAsync(buf_d, buf_h, (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE, cudaMemcpyHostToDevice, stream));

    HANDLE_ERROR(cudaMemcpyAsync(pk_d, pk, FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE, cudaMemcpyHostToDevice, stream)); //暂时不需要使用pk了


    HANDLE_ERROR(cudaMemcpyAsync(h_d, h_h, sizeof(poly) * BATCH_SIZE, cudaMemcpyHostToDevice, stream));


    atpqc_cuda::fips202_ws::global::shake<256><<<BATCH_SIZE, 32, 0, stream>>>(m_d + FPTRU_PREFIXHASHBYTES, FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES, FPTRU_MSGBYTES, buf_d, FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2, 32, BATCH_SIZE); //TODO:m这里的地址是否是正确的呢 通过hashtest验证通过



    pk_to_m<<<BATCH_SIZE,FPTRU_PREFIXHASHBYTES,0,stream>>>(m_d,pk_d);


    HANDLE_ERROR(cudaFreeAsync(pk_d,stream));


    atpqc_cuda::fips202_ws::global::sha3<512><<<BATCH_SIZE,32,0,stream>>>(buf_d,FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2,m_d,FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES,FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES,BATCH_SIZE);//输出.输入，输入的长度

    atpqc_cuda::fips202_ws::global::shake<256><<<BATCH_SIZE, 32, 0, stream>>>(buf_d + FPTRU_SHAREDKEYBYTES, FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2, FPTRU_COIN_BYTES / 2, buf_d + FPTRU_SHAREDKEYBYTES, FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2, 32, BATCH_SIZE); //TODO:m这里的地址是否是正确的呢 通过hashtest验证通过

    //crypto_pke_enc
    //pack_pk_batch<<<BATCH_SIZE,1,0,stream>>>(pk_d,h_d);//出于dncode非递归版本教困难以及效率的考虑

#ifdef why2
    HANDLE_ERROR(cudaMemcpyAsync(buf_h, buf_d, (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    HANDLE_ERROR(cudaDeviceSynchronize());
    printf("look buf\n");
    for(int i=0;i<BATCH_SIZE;i++){
        for(int j=0;j<(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2);j++){
            printf("%d,",buf_h[i*(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) +j]);
        }
        printf("\n");
    }
#endif

    HANDLE_ERROR(cudaMallocAsync((void**)&r_d,sizeof(poly) * BATCH_SIZE,stream));

#if(FPTRU_BOUND == 7) //653
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 4 + 1, 0, stream>>>(r_d,buf_d + FPTRU_SHAREDKEYBYTES,0,0,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2));


#elif(FPTRU_BOUND == 5) //761和1277
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 8 + 1, 0, stream>>>(r_d,buf_d + FPTRU_SHAREDKEYBYTES,0,0,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2));

#endif
    HANDLE_ERROR(cudaMallocAsync((void**)&sigma_d,sizeof(poly) * BATCH_SIZE,stream));
    
    poly_mul_653_batch_q1_v3<<<BATCH_SIZE,168,0,stream>>>(sigma_d,h_d,r_d);

#ifdef why2
    poly sigma[BATCH_SIZE];
    HANDLE_ERROR(cudaMemcpyAsync(sigma, h_d, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    HANDLE_ERROR(cudaDeviceSynchronize());
    printf("look h_d\n");
    for(int i=0;i<BATCH_SIZE;i++){
        for(int j=0;j<FPTRU_N;j++){
            printf("%d,",sigma[i].coeffs[j]);
        }
        printf("\n");
    }

#endif

    HANDLE_ERROR(cudaFreeAsync(h_d,stream));
    HANDLE_ERROR(cudaFreeAsync(r_d,stream));

    poly_fqcsubq_batch_v2<<<BATCH_SIZE,FPTRU_N,0,stream>>>(sigma_d);

    //TODO:poly_encode_compress模块 c_d,sigma_d,m_d+FPTRU_PREFIXHASHBYTES
    HANDLE_ERROR(cudaMallocAsync((void**)&c_d,sizeof(poly) * BATCH_SIZE,stream));

#ifdef why2
    unsigned char m_h[(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) * BATCH_SIZE];
    HANDLE_ERROR(cudaMemcpyAsync(m_h, m_d, (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    HANDLE_ERROR(cudaDeviceSynchronize());
    printf("look m\n");
    for(int i=0;i<BATCH_SIZE;i++){
        for(int j=0;j<(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES);j++){
            printf("%d,",m_h[i*(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) +j]);
        }
        printf("\n");
    }

#endif

    poly_fqcsubq_encode_compress_batch<<<BATCH_SIZE,FPTRU_N,0,stream>>>(c_d,sigma_d,m_d+FPTRU_PREFIXHASHBYTES,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES));


#ifdef why2
    //poly sigma[BATCH_SIZE];
    HANDLE_ERROR(cudaMemcpyAsync(sigma, sigma_d, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    HANDLE_ERROR(cudaDeviceSynchronize());
    printf("look sigma_d\n");
    for(int i=0;i<BATCH_SIZE;i++){
        for(int j=0;j<FPTRU_N;j++){
            printf("%d,",sigma[i].coeffs[j]);
        }
        printf("\n");
    }

    HANDLE_ERROR(cudaMemcpyAsync(sigma, c_d, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    HANDLE_ERROR(cudaDeviceSynchronize());
    printf("look c_d\n");
    for(int i=0;i<BATCH_SIZE;i++){
        for(int j=0;j<FPTRU_N;j++){
            printf("%d,",sigma[i].coeffs[j]);
        }
        printf("\n");
    }


#endif

    HANDLE_ERROR(cudaFreeAsync(m_d,stream));
    HANDLE_ERROR(cudaFreeAsync(sigma_d,stream));

    HANDLE_ERROR(cudaMallocAsync((void**)&ct_d, FPTRU_PKE_CIPHERTEXTBYTES * BATCH_SIZE,stream));
#if (FPTRU_Q2 == 1024)
    pack_ct_batch<<<BATCH_SIZE,FPTRU_N / 4 + 1,0,stream>>>(ct_d,c_d);
#elif (FPTRU_Q2 == 2048)
    pack_ct_batch<<<BATCH_SIZE,FPTRU_N/8 + 1,0,stream>>>(ct_d,c_d);
#elif (FPTRU_Q2 == 4096)
    pack_ct_batch<<<BATCH_SIZE,FPTRU_N / 2 + 1,0,stream>>>(ct_d,c_d);
#endif

    HANDLE_ERROR(cudaFreeAsync(c_d,stream));
    HANDLE_ERROR(cudaMallocAsync((void**)&k_d, FPTRU_SHAREDKEYBYTES * BATCH_SIZE,stream));
    buf2k<<<BATCH_SIZE,FPTRU_SHAREDKEYBYTES,0,stream>>>(buf_d,k_d);

    //BEFORE_SPEED
    HANDLE_ERROR(cudaMemcpyAsync(ct, ct_d, FPTRU_KEM_CIPHERTEXTBYTES * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    HANDLE_ERROR(cudaMemcpyAsync(k, k_d, FPTRU_SHAREDKEYBYTES * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    //cudaEventRecord( stop, 0 ) ;cudaEventSynchronize( stop );float elapsedTime; cudaEventElapsedTime( &elapsedTime,start, stop ); printf( "%s: %f us\n","h2d",elapsedTime*1000 );cudaEventDestroy( start );cudaEventDestroy( stop );


    
    HANDLE_ERROR(cudaFreeAsync(buf_d,stream));
    


    HANDLE_ERROR(cudaFreeAsync(ct_d,stream));
    HANDLE_ERROR(cudaFreeAsync(k_d,stream));
    

    cudaStreamSynchronize(stream);//注意和原先的同步
    gettimeofday(&cpu_end, NULL);
    double timeuse = 1000000*(cpu_end.tv_sec - cpu_start.tv_sec) + cpu_end.tv_usec-cpu_start.tv_usec;//单位为微秒
    //return elapsedTime*1000;
    return timeuse;

}

//#define why2
/*在crypto_kem_encaps_stream_order上使用了如下的修改
1.不使用pk_to_m函数,而是在cpu端将pk的部分值赋给m
batch1次的时间:130.595000->130.011000

2.sigma_d和h_d合并为sigma_h_d
batch一次的时间:130.011000->129.485000

3.删除c_d，复用sigma_h_d
batch一次的时间129.485000->129.144000

note:上述改进的优化都很微弱，甚至没什么效果

4.合并内存的传输
感觉效果不是很明显

5.合并poly_fqcsubq_batch_v2到poly_fqcsubq_encode_compress_batch
能够有效减少2.5微秒左右

6.把poly_fqcsubq_encode_compress_batch融合到pack ct里面
三个操作的时间8.64->3.87微秒*/
//#define check1
double crypto_kem_encaps_v4(unsigned char *ct, unsigned char *k, const unsigned char *pk,cudaStream_t stream){

    cudaMemPool_t mempool;
    cudaDeviceGetDefaultMemPool(&mempool, 0);//指定设备为0（即第一个GPU）
    uint64_t threshold = UINT64_MAX;
    cudaMemPoolSetAttribute(mempool, cudaMemPoolAttrReleaseThreshold, &threshold);
    struct timeval cpu_start,cpu_end;
    

    unsigned char * buf_h;
    unsigned char * buf_d;

    unsigned char * m_d;
    //unsigned char * pk_d;
    unsigned char * m_h;

    poly * sigma_h_d;
    poly * h_h;

    poly * r_d;
    //poly * sigma_d;
    //poly * c_d;

    unsigned char * ct_d;
    unsigned char * k_d;

    HANDLE_ERROR(cudaHostAlloc((void**)&buf_h, (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE, cudaHostAllocDefault));

    HANDLE_ERROR(cudaHostAlloc((void**)&h_h, sizeof(poly) * BATCH_SIZE, cudaHostAllocDefault));

    HANDLE_ERROR(cudaHostAlloc((void**)&m_h, (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) * BATCH_SIZE, cudaHostAllocDefault));

    HANDLE_ERROR(cudaMallocAsync((void**)&buf_d,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE,stream));

    HANDLE_ERROR(cudaMallocAsync((void**)&m_d,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) * BATCH_SIZE,stream));

    HANDLE_ERROR(cudaMallocAsync((void**)&sigma_h_d,sizeof(poly) * BATCH_SIZE,stream));
    
    //HANDLE_ERROR(cudaMallocAsync((void**)&pk_d, FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE,stream));

    /*gettimeofday(&cpu_end, NULL);
    double timeuse = 1000000*(cpu_end.tv_sec - cpu_start.tv_sec) + cpu_end.tv_usec-cpu_start.tv_usec;//单位为微秒*/

    /*gettimeofday(&cpu_start, NULL);
    cudaEvent_t start, stop;*/
    for(int i=0;i<BATCH_SIZE;i++){
        randombytes(&buf_h[i*(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2)], FPTRU_SEEDBYTES);

        //固定随机值，可做正确性验证使用
        for(int k=0;k<FPTRU_SEEDBYTES;k++){
            //printf("0x%x,",buf_h[k]);
            buf_h[i*(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) + k]=seed[k];
        }
        //printf("\n");
        unpack_pk(&h_h[i],&pk[i*FPTRU_KEM_PUBLICKEYBYTES]);
        
        for(int j=0;j<FPTRU_PREFIXHASHBYTES;j++){
            m_h[i*(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) + j] = pk[i * FPTRU_KEM_PUBLICKEYBYTES + j];
        }
    }

    //cudaStreamSynchronize(stream);//注意和原先的同步
    /*gettimeofday(&cpu_end, NULL);
    double timeuse = 1000000*(cpu_end.tv_sec - cpu_start.tv_sec) + cpu_end.tv_usec-cpu_start.tv_usec;//单位为微秒*/



    
    HANDLE_ERROR(cudaMemcpyAsync(buf_d, buf_h, (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE, cudaMemcpyHostToDevice, stream));


    HANDLE_ERROR(cudaMemcpyAsync(m_d, m_h, (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) * BATCH_SIZE, cudaMemcpyHostToDevice, stream)); //暂时不需要使用pk了


    HANDLE_ERROR(cudaMemcpyAsync(sigma_h_d, h_h, sizeof(poly) * BATCH_SIZE, cudaMemcpyHostToDevice, stream));


    atpqc_cuda::fips202_ws::global::shake<256><<<BATCH_SIZE, 32, 0, stream>>>(m_d + FPTRU_PREFIXHASHBYTES, FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES, FPTRU_MSGBYTES, buf_d, FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2, 32, BATCH_SIZE); //TODO:m这里的地址是否是正确的呢 通过hashtest验证通过



    atpqc_cuda::fips202_ws::global::sha3<512><<<BATCH_SIZE,32,0,stream>>>(buf_d,FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2,m_d,FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES,FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES,BATCH_SIZE);//输出.输入，输入的长度

    atpqc_cuda::fips202_ws::global::shake<256><<<BATCH_SIZE, 32, 0, stream>>>(buf_d + FPTRU_SHAREDKEYBYTES, FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2, FPTRU_COIN_BYTES / 2, buf_d + FPTRU_SHAREDKEYBYTES, FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2, 32, BATCH_SIZE); //TODO:m这里的地址是否是正确的呢 通过hashtest验证通过

    //crypto_pke_enc
    //pack_pk_batch<<<BATCH_SIZE,1,0,stream>>>(pk_d,h_d);//出于dncode非递归版本教困难以及效率的考虑

    HANDLE_ERROR(cudaMallocAsync((void**)&r_d,sizeof(poly) * BATCH_SIZE,stream));

#if(FPTRU_BOUND == 7) //653
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 4 + 1, 0, stream>>>(r_d,buf_d + FPTRU_SHAREDKEYBYTES,0,0,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2));

#elif(FPTRU_BOUND == 5) //761和1277
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 8 + 1, 0, stream>>>(r_d,buf_d + FPTRU_SHAREDKEYBYTES,0,0,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2));

#endif
    //HANDLE_ERROR(cudaMallocAsync((void**)&sigma_d,sizeof(poly) * BATCH_SIZE,stream));
    
#if (FPTRU_N == 653)
    poly_mul_653_batch_q1_v3<<<BATCH_SIZE,168,0,stream>>>(sigma_h_d,sigma_h_d,r_d);
#elif (FPTRU_N == 761)
    poly_mul_761_batch_q1<<<BATCH_SIZE,192,0,stream>>>(sigma_h_d,sigma_h_d,r_d);
#elif (FPTRU_N == 1277)
    poly_mul_1277_batch_q1<<<BATCH_SIZE,320,0,stream>>>(sigma_h_d,sigma_h_d,r_d);
#endif
    //HANDLE_ERROR(cudaFreeAsync(h_d,stream));
    HANDLE_ERROR(cudaFreeAsync(r_d,stream));

    //poly_fqcsubq_batch_v2<<<BATCH_SIZE,FPTRU_N,0,stream>>>(sigma_h_d);

    //TODO:poly_encode_compress模块 c_d,sigma_d,m_d+FPTRU_PREFIXHASHBYTES

    ///poly_fqcsubq_encode_compress_batch<<<BATCH_SIZE,FPTRU_N,0,stream>>>(sigma_h_d,sigma_h_d,m_d+FPTRU_PREFIXHASHBYTES,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES));
    HANDLE_ERROR(cudaMallocAsync((void**)&ct_d, FPTRU_PKE_CIPHERTEXTBYTES * BATCH_SIZE,stream));
#if (FPTRU_N == 653)
    poly_fqcsubq_encode_compress_batch_pack_ct_653<<<BATCH_SIZE,FPTRU_N/8 + 1,0,stream>>>(ct_d,sigma_h_d,m_d+FPTRU_PREFIXHASHBYTES,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES));
#elif (FPTRU_N == 761)
    poly_fqcsubq_encode_compress_batch_pack_ct_761<<<BATCH_SIZE,FPTRU_N/8 + 1,0,stream>>>(ct_d,sigma_h_d,m_d+FPTRU_PREFIXHASHBYTES,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES));
#elif (FPTRU_N == 1277)
    poly_fqcsubq_encode_compress_batch_pack_ct_1277<<<BATCH_SIZE,FPTRU_N/8 + 1,0,stream>>>(ct_d,sigma_h_d,m_d+FPTRU_PREFIXHASHBYTES,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES));
#endif
    
    //

#ifdef check1
    poly s[BATCH_SIZE]; //只有部分是相同的
    HANDLE_ERROR(cudaMemcpyAsync(s, sigma_h_d, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));

    cudaDeviceSynchronize();
    printf("sigma_h_d2\n");
    for(int i=0;i<BATCH_SIZE;i++){
        for(int j=0;j<FPTRU_N;j++){
            printf("%d,",s[i].coeffs[j]);
        }
        printf("\n");
    }

    unsigned char m[FPTRU_MSGBYTES * BATCH_SIZE];
    printf("look m2\n");
    HANDLE_ERROR(cudaMemcpyAsync(m, m_d+FPTRU_PREFIXHASHBYTES, FPTRU_MSGBYTES * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    for(int i=0;i<BATCH_SIZE;i++){
        for(int j=0;j<FPTRU_MSGBYTES;j++){
            printf("0x%x,",m[j]);
        }
        printf("\n");
    }

    unsigned char ccct[FPTRU_PKE_CIPHERTEXTBYTES * BATCH_SIZE];
    printf("look ccct\n");
    HANDLE_ERROR(cudaMemcpyAsync(ccct, ct_d, FPTRU_PKE_CIPHERTEXTBYTES * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    for(int i=0;i<BATCH_SIZE;i++){
        for(int j=0;j<FPTRU_PKE_CIPHERTEXTBYTES;j++){
            printf("0x%x,",ccct[j]);
        }
        printf("\n");
    }

#endif
    HANDLE_ERROR(cudaFreeAsync(m_d,stream));
    
// #if (FPTRU_Q2 == 1024)
//     //pack_ct_batch<<<BATCH_SIZE,FPTRU_N / 4 + 1,0,stream>>>(ct_d,sigma_h_d);
// #elif (FPTRU_Q2 == 2048)
//     //pack_ct_batch<<<BATCH_SIZE,FPTRU_N/8 + 1,0,stream>>>(ct_d,sigma_h_d);
// #elif (FPTRU_Q2 == 4096)
//     pack_ct_batch<<<BATCH_SIZE,FPTRU_N / 2 + 1,0,stream>>>(ct_d,sigma_h_d);
// #endif 
    unsigned char *test_h;
    unsigned char *test_d;

    /*HANDLE_ERROR(cudaMallocAsync((void**)&test_d, (FPTRU_PKE_CIPHERTEXTBYTES + FPTRU_SHAREDKEYBYTES)* BATCH_SIZE,stream));
    HANDLE_ERROR(cudaHostAlloc((void**)&test_h, (FPTRU_PKE_CIPHERTEXTBYTES + FPTRU_SHAREDKEYBYTES) * BATCH_SIZE, cudaHostAllocDefault));

    BEFORE_SPEED
    HANDLE_ERROR(cudaMemcpyAsync(test_h, test_d, (FPTRU_PKE_CIPHERTEXTBYTES + FPTRU_SHAREDKEYBYTES) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    cudaEventRecord( stop, 0 ) ;cudaEventSynchronize( stop );float elapsedTime; cudaEventElapsedTime( &elapsedTime,start, stop ); cudaEventDestroy( start );cudaEventDestroy( stop );*/

    //HANDLE_ERROR(cudaFreeAsync(c_d,stream));
    HANDLE_ERROR(cudaMallocAsync((void**)&k_d, FPTRU_SHAREDKEYBYTES * BATCH_SIZE,stream));
    buf2k<<<BATCH_SIZE,FPTRU_SHAREDKEYBYTES,0,stream>>>(buf_d,k_d);

    //BEFORE_SPEED
    HANDLE_ERROR(cudaMemcpyAsync(ct, ct_d, FPTRU_KEM_CIPHERTEXTBYTES * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    //AFTER_SPEED("copy ct D2H")
    
    
    //BEFORE_SPEED
    HANDLE_ERROR(cudaMemcpyAsync(k, k_d, FPTRU_SHAREDKEYBYTES * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    //cudaEventRecord( stop, 0 ) ;cudaEventSynchronize( stop );float elapsedTime; cudaEventElapsedTime( &elapsedTime,start, stop ); cudaEventDestroy( start );cudaEventDestroy( stop );
    //AFTER_SPEED("copy k H2D")
    //cudaEventRecord( stop, 0 ) ;cudaEventSynchronize( stop );float elapsedTime; cudaEventElapsedTime( &elapsedTime,start, stop ); printf( "%s: %f us\n","h2d",elapsedTime*1000 );cudaEventDestroy( start );cudaEventDestroy( stop );


    
    HANDLE_ERROR(cudaFreeAsync(buf_d,stream));//buf_d最后才会删掉
    HANDLE_ERROR(cudaFreeAsync(sigma_h_d,stream));


    HANDLE_ERROR(cudaFreeAsync(ct_d,stream));
    HANDLE_ERROR(cudaFreeAsync(k_d,stream));
    

    //return elapsedTime*1000;
    //return timeuse;
    return 0;

}


void crypto_kem_decaps(unsigned char *k, const unsigned char *ct, const unsigned char *sk,cudaStream_t stream){
    unsigned char * m_d;
    poly * c_h;
    poly * f_h;

    poly *c_d,*f_d;

    HANDLE_ERROR(cudaHostAlloc((void**)&c_h, sizeof(poly) * BATCH_SIZE, cudaHostAllocDefault));
    HANDLE_ERROR(cudaHostAlloc((void**)&f_h, sizeof(poly) * BATCH_SIZE, cudaHostAllocDefault));

    //pke dec
    for(int i=0;i<BATCH_SIZE;i++){
        unpack_ct(&c_h[i], &ct[i*FPTRU_KEM_CIPHERTEXTBYTES]);//写成gpu的版本
        unpack_sk(&f_h[i], &sk[i*FPTRU_KEM_SECRETKEYBYTES]);//写成gpu的版本
    }

    //在batch为1的情况下测试正确性
    printf("ch\n");
    for(int i=0;i<FPTRU_N;i++){
        printf("%d,",c_h->coeffs[i]);
    }
    printf("\n\n");


    HANDLE_ERROR(cudaMallocAsync((void**)&c_d,sizeof(poly) * BATCH_SIZE,stream));
    HANDLE_ERROR(cudaMallocAsync((void**)&f_d,sizeof(poly) * BATCH_SIZE,stream));

    HANDLE_ERROR(cudaMemcpyAsync(c_d, c_h, sizeof(poly) * BATCH_SIZE, cudaMemcpyHostToDevice, stream));
    HANDLE_ERROR(cudaMemcpyAsync(f_d, f_h, sizeof(poly) * BATCH_SIZE, cudaMemcpyHostToDevice, stream));

    ///多项式乘法
    poly_mul_653_batch_q2<<<BATCH_SIZE,168,0,stream>>>(c_d,c_d,f_d);
    HANDLE_ERROR(cudaFreeAsync(f_d,stream));

    HANDLE_ERROR(cudaMallocAsync((void**)&m_d,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) * BATCH_SIZE,stream));
    
    poly_decode_batch<<<BATCH_SIZE,FPTRU_MSGBYTES,0,stream>>>(m_d + FPTRU_PREFIXHASHBYTES,c_d);

    //sk2m<<<BATCH_SIZE,FPTRU_PREFIXHASHBYTES,0,stream>>>()
    HANDLE_ERROR(cudaFreeAsync(c_d,stream));
    HANDLE_ERROR(cudaFreeAsync(m_d,stream));
}

#define DEBUG
void crypto_kem_decaps_v2(unsigned char *k, const unsigned char *ct, const unsigned char *sk,cudaStream_t stream){
    poly *c_d,*f_d;
    unsigned char * ct_d;
    HANDLE_ERROR(cudaMallocAsync((void**)&c_d,sizeof(poly) * BATCH_SIZE,stream));
    HANDLE_ERROR(cudaMallocAsync((void**)&f_d,sizeof(poly) * BATCH_SIZE,stream));
    HANDLE_ERROR(cudaMallocAsync((void**)&ct_d,FPTRU_KEM_CIPHERTEXTBYTES * BATCH_SIZE,stream));

    HANDLE_ERROR(cudaMemcpyAsync(ct_d, ct, FPTRU_KEM_CIPHERTEXTBYTES * BATCH_SIZE, cudaMemcpyHostToDevice, stream));

    unpack_ct_batch<<<BATCH_SIZE,FPTRU_N,0,stream>>>(c_d,ct_d);

#ifdef DEBUG_1 //正确性验证通过
    poly c;
    HANDLE_ERROR(cudaMemcpyAsync(&c, c_d, sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    cudaDeviceSynchronize();
    printf("ch\n");
    for(int i=0;i<FPTRU_N;i++){
        printf("%d,",c.coeffs[i]);
    }
    printf("\n\n");
#endif
    HANDLE_ERROR(cudaFreeAsync(c_d,stream));
    HANDLE_ERROR(cudaFreeAsync(f_d,stream));
    HANDLE_ERROR(cudaFreeAsync(ct_d,stream));
}


//#define why14
//但是这样申请的内存空间就需要一直使用而得不到释放 -> 看下到时候能不能释放吧
/*输入:res用于存储是否解封装成功*/
double crypto_kem_decaps_v3(unsigned char *k, const unsigned char *ct, const unsigned char *sk,cudaStream_t stream, int *res){
    /*struct timeval cpu_start,cpu_end;
    gettimeofday(&cpu_start, NULL);*/
    //需要传输m,ct3和3个多项式
    //bytes[0....BATCH_SIZE*(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES)]对应m bytes[BATCH_SIZE*(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES)...]对应ct3
    unsigned char * bytes;//[BATCH_SIZE * ( (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) + (FPTRU_PKE_CIPHERTEXTBYTES + FPTRU_SEEDBYTES + FPTRU_PREFIXHASHBYTES) )]; //bytes的组织结构 m * BATCH_SIZE + ct3 * BATCH_SIZE
    unsigned char * bytes_d;

    poly * polys;//[3 * BATCH_SIZE];//polys的组织结构为 sk * BATCH_SIZE + ct * BATCH_SIZE + pk * BATCH_SIZE
    poly * polys_d;
    poly * r_sigma_d;

    unsigned char * buf_d;//结构为(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE
    unsigned char * buf_h;

    unsigned char * buf2_d;

    unsigned char * buf2_h;

    unsigned char * ct2_d;
    unsigned char * ct2_h;

    HANDLE_ERROR(cudaHostAlloc((void**)&bytes, BATCH_SIZE * ( (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) + (FPTRU_PKE_CIPHERTEXTBYTES + FPTRU_SEEDBYTES + FPTRU_PREFIXHASHBYTES) ), cudaHostAllocDefault));

    HANDLE_ERROR(cudaHostAlloc((void**)&polys, BATCH_SIZE * sizeof(poly) * 3, cudaHostAllocDefault));


    HANDLE_ERROR(cudaMallocAsync((void**)&polys_d,BATCH_SIZE * sizeof(poly) * 3,stream));
    HANDLE_ERROR(cudaMallocAsync((void**)&bytes_d, BATCH_SIZE * ( (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) + (FPTRU_PKE_CIPHERTEXTBYTES + FPTRU_SEEDBYTES + FPTRU_PREFIXHASHBYTES) ),stream));

    //m [FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES]

    //sk到m的赋值
    for(int j=0;j<BATCH_SIZE;j++){
        for(int i = 0; i < FPTRU_PREFIXHASHBYTES; i++){
            bytes[j * (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) + i] = sk[j * FPTRU_KEM_SECRETKEYBYTES + i + FPTRU_PKE_SECRETKEYBYTES];//DEBUG:这里传输的是公钥
        }
        unpack_ct(&polys[j], &ct[j*FPTRU_KEM_CIPHERTEXTBYTES]);//写成gpu的版本


        unpack_sk(&polys[BATCH_SIZE + j], &sk[j*FPTRU_KEM_SECRETKEYBYTES]);//写成gpu的版本


        unpack_pk(&polys[2 * BATCH_SIZE + j], &sk[j*FPTRU_KEM_SECRETKEYBYTES + FPTRU_PKE_SECRETKEYBYTES]);

        for(int i=0;i<FPTRU_PREFIXHASHBYTES;i++){
            bytes[(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) *BATCH_SIZE +  j * (FPTRU_PKE_CIPHERTEXTBYTES + FPTRU_SEEDBYTES + FPTRU_PREFIXHASHBYTES) + i] = sk[j * FPTRU_KEM_SECRETKEYBYTES + FPTRU_PKE_SECRETKEYBYTES + i];
        }
        for(int i=0;i<FPTRU_SEEDBYTES;i++){
             bytes[(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) *BATCH_SIZE +  j * (FPTRU_PKE_CIPHERTEXTBYTES + FPTRU_SEEDBYTES + FPTRU_PREFIXHASHBYTES) + FPTRU_PREFIXHASHBYTES + i] = sk[j * FPTRU_KEM_SECRETKEYBYTES + FPTRU_PKE_SECRETKEYBYTES + FPTRU_PKE_PUBLICKEYBYTES + i];
        }
        for(int i=0;i<FPTRU_PKE_CIPHERTEXTBYTES;i++){
            bytes[(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) *BATCH_SIZE +  j * (FPTRU_PKE_CIPHERTEXTBYTES + FPTRU_SEEDBYTES + FPTRU_PREFIXHASHBYTES) + FPTRU_PREFIXHASHBYTES + FPTRU_SEEDBYTES + i] = ct[j * FPTRU_KEM_CIPHERTEXTBYTES + i];
        }
        
    }

    HANDLE_ERROR(cudaMemcpyAsync(polys_d, polys, BATCH_SIZE * sizeof(poly) * 3, cudaMemcpyHostToDevice, stream));
    HANDLE_ERROR(cudaMemcpyAsync(bytes_d, bytes, BATCH_SIZE * ( (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) + (FPTRU_PKE_CIPHERTEXTBYTES + FPTRU_SEEDBYTES + FPTRU_PREFIXHASHBYTES) ), cudaMemcpyHostToDevice, stream));

#ifdef why4
    poly s[BATCH_SIZE]; //只有部分是相同的
    HANDLE_ERROR(cudaMemcpyAsync(s, &polys_d[0], sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));

    cudaDeviceSynchronize();
    printf("first first look poly_d[0]\n");
    for(int i=0;i<BATCH_SIZE;i++){
        for(int j=0;j<FPTRU_N;j++){
            printf("%d,",s[i].coeffs[j]);
        }
        printf("\n");
    }

    HANDLE_ERROR(cudaMemcpyAsync(s, &polys_d[BATCH_SIZE], sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));

    cudaDeviceSynchronize();
    printf("first first look poly_d[1]\n");
    for(int i=0;i<BATCH_SIZE;i++){
        for(int j=0;j<FPTRU_N;j++){
            printf("%d,",s[i].coeffs[j]);
        }
        printf("\n");
    }


    HANDLE_ERROR(cudaMemcpyAsync(s, &polys_d[BATCH_SIZE * 2], sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));

    cudaDeviceSynchronize();
    printf("first first look poly_d[2]\n");
    for(int i=0;i<BATCH_SIZE;i++){
        for(int j=0;j<FPTRU_N;j++){
            printf("%d,",s[i].coeffs[j]);
        }
        printf("\n");
    }
#endif

    //sk转变为多项式

    //ct转变为多项式

    //pk转变为多项式

    //构造ct3

    //crypto_pke_dec(m + FPTRU_PREFIXHASHBYTES, ct_poly, sk_poly);
#ifdef why14
    poly s[BATCH_SIZE]; //只有部分是相同的
    HANDLE_ERROR(cudaMemcpyAsync(s, &polys_d[0], sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));

    cudaDeviceSynchronize();
    printf("poly_d[0]\n");
    for(int i=0;i<BATCH_SIZE;i++){
        for(int j=0;j<FPTRU_N;j++){
            printf("%d,",s[i].coeffs[j]);
        }
        printf("\n");
    }

#endif

#if (FPTRU_N == 653)
    poly_mul_653_batch_q2<<<BATCH_SIZE,168,0,stream>>>(&polys_d[0],&polys_d[0],&polys_d[BATCH_SIZE]);
#elif(FPTRU_N == 761)
    poly_mul_761_batch_q2<<<BATCH_SIZE,192,0,stream>>>(&polys_d[0],&polys_d[0],&polys_d[BATCH_SIZE]);
#elif(FPTRU_N == 1277)
    poly_mul_1277_batch_q2<<<BATCH_SIZE,320,0,stream>>>(&polys_d[0],&polys_d[0],&polys_d[BATCH_SIZE]);
#endif

#ifdef why14
    //poly s[BATCH_SIZE]; //只有部分是相同的
    HANDLE_ERROR(cudaMemcpyAsync(s, &polys_d[0], sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));

    cudaDeviceSynchronize();
    printf("poly_d[0]\n");
    for(int i=0;i<BATCH_SIZE;i++){
        for(int j=0;j<FPTRU_N;j++){
            printf("%d,",s[i].coeffs[j]);
        }
        printf("\n");
    }

    HANDLE_ERROR(cudaMemcpyAsync(s, &polys_d[BATCH_SIZE], sizeof(poly) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));

    cudaDeviceSynchronize();
    printf("polys_d[BATCH_SIZE]\n");
    for(int i=0;i<BATCH_SIZE;i++){
        for(int j=0;j<FPTRU_N;j++){
            printf("%d,",s[i].coeffs[j]);
        }
        printf("\n");
    }

#endif

    poly_decode_batch<<<BATCH_SIZE,FPTRU_MSGBYTES,0,stream>>>(bytes_d + FPTRU_PREFIXHASHBYTES,&polys_d[0]);

    HANDLE_ERROR(cudaFreeAsync(polys_d,stream));

    //对m求sha3_512并放到buf里 crypto_hash_sha3_512(buf, m, FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES)

    HANDLE_ERROR(cudaMallocAsync((void**)&buf_d,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE,stream));
    atpqc_cuda::fips202_ws::global::sha3<512><<<BATCH_SIZE,32,0,stream>>>(buf_d,FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2,bytes_d,FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES,FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES,BATCH_SIZE);//输出.输入，输入的长度 

    //进一步优化buf,crypto_hash_shake256(buf + FPTRU_SHAREDKEYBYTES, FPTRU_COIN_BYTES / 2, buf + FPTRU_SHAREDKEYBYTES, 32);

    atpqc_cuda::fips202_ws::global::shake<256><<<BATCH_SIZE, 32, 0, stream>>>(buf_d + FPTRU_SHAREDKEYBYTES, FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2, FPTRU_COIN_BYTES / 2, buf_d + FPTRU_SHAREDKEYBYTES, FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2, 32, BATCH_SIZE);

#ifdef why4
    unsigned char buf_h2[(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE];

    HANDLE_ERROR(cudaMemcpyAsync(buf_h2, buf_d, (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));

    cudaDeviceSynchronize();
    printf("first look buf\n");
    for(int i=0;i<BATCH_SIZE;i++){
        for(int j=0;j<(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2);j++){
            printf("%d,",buf_h2[ i * (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) + j]);
        }
        printf("\n");
    }
#endif
    //对m进行加密 crypto_pke_enc(ct2, sk + FPTRU_PKE_SECRETKEYBYTES, m + FPTRU_PREFIXHASHBYTES, buf + FPTRU_SHAREDKEYBYTES);

    HANDLE_ERROR(cudaMallocAsync((void**)&r_sigma_d,sizeof(poly) * BATCH_SIZE,stream));
#if(FPTRU_BOUND == 7) //653
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 4 + 1, 0, stream>>>(r_sigma_d,buf_d + FPTRU_SHAREDKEYBYTES,0,0,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2));
#elif(FPTRU_BOUND == 5) //761和1277
    poly_sample_and_double_v2<<<BATCH_SIZE,FPTRU_N / 8 + 1, 0, stream>>>(r_sigma_d,buf_d + FPTRU_SHAREDKEYBYTES,0,0,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2));
#endif

#ifdef why3
    printf("first look r_sigma_h\n");
    poly r_sigma_h[BATCH_SIZE];
    HANDLE_ERROR(cudaMemcpyAsync(r_sigma_h, r_sigma_d, BATCH_SIZE * sizeof(poly), cudaMemcpyDeviceToHost, stream));
    HANDLE_ERROR(cudaDeviceSynchronize());
    for(int i=0;i<BATCH_SIZE;i++){
        for(int j=0;j<FPTRU_N;j++){
            printf("%d,",r_sigma_h[i].coeffs[j]);
        }
        printf("\n");
    }
#endif

#if (FPTRU_N == 653)
    poly_mul_653_batch_q1_v3<<<BATCH_SIZE,168,0,stream>>>(r_sigma_d,&polys[2 * BATCH_SIZE],r_sigma_d);
#elif(FPTRU_N == 761)
    poly_mul_761_batch_q1<<<BATCH_SIZE,192,0,stream>>>(r_sigma_d,&polys[2 * BATCH_SIZE],r_sigma_d);
#elif(FPTRU_N == 1277)
    poly_mul_1277_batch_q1<<<BATCH_SIZE,320,0,stream>>>(r_sigma_d,&polys[2 * BATCH_SIZE],r_sigma_d);
#endif

///////////////////////////////////////////////////////////////////////////////////////////
// //下面可以合并
// #if (FPTRU_N == 653 || FPTRU_N == 761)
//     poly_fqcsubq_batch_v2<<<BATCH_SIZE,FPTRU_N,0,stream>>>(r_sigma_d);
// #elif(FPTRU_N == 1277)
//     poly_fqcsubq_batch_1277<<<BATCH_SIZE,FPTRU_N/4 + 1,0,stream>>>(r_sigma_d);
// #endif

// #ifdef why3
//     printf("second look r_sigma_h\n");
//     //poly r_sigma_h[BATCH_SIZE];
//     HANDLE_ERROR(cudaMemcpyAsync(r_sigma_h, r_sigma_d, BATCH_SIZE * sizeof(poly), cudaMemcpyDeviceToHost, stream));
//     HANDLE_ERROR(cudaDeviceSynchronize());
//     for(int i=0;i<BATCH_SIZE;i++){
//         for(int j=0;j<FPTRU_N;j++){
//             printf("%d,",r_sigma_h[i].coeffs[j]);
//         }
//         printf("\n");
//     }
// #endif

//     poly_fqcsubq_encode_compress_batch<<<BATCH_SIZE,FPTRU_N,0,stream>>>(r_sigma_d,r_sigma_d,bytes_d + FPTRU_PREFIXHASHBYTES,( (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES)));//TODO:这里是否存在边写边读的冲突呢


//     HANDLE_ERROR(cudaMallocAsync((void**)&ct2_d,FPTRU_PKE_CIPHERTEXTBYTES * BATCH_SIZE,stream));

// #ifdef why3
//     printf("third look r_sigma_h\n");
//     //poly r_sigma_h[BATCH_SIZE];
//     HANDLE_ERROR(cudaMemcpyAsync(r_sigma_h, r_sigma_d, BATCH_SIZE * sizeof(poly), cudaMemcpyDeviceToHost, stream));
//     HANDLE_ERROR(cudaDeviceSynchronize());
//     for(int i=0;i<BATCH_SIZE;i++){
//         for(int j=0;j<FPTRU_N;j++){
//             printf("%d,",r_sigma_h[i].coeffs[j]);
//         }
//         printf("\n");
//     }
// #endif

// #if (FPTRU_Q2 == 1024)
//     pack_ct_batch<<<BATCH_SIZE,FPTRU_N / 4 + 1,0,stream>>>(ct2_d,r_sigma_d);
// #elif (FPTRU_Q2 == 2048)
//     pack_ct_batch<<<BATCH_SIZE,FPTRU_N/8 + 1,0,stream>>>(ct2_d,r_sigma_d);
// #elif (FPTRU_Q2 == 4096)
//     pack_ct_batch<<<BATCH_SIZE,FPTRU_N / 2 + 1,0,stream>>>(ct2_d,r_sigma_d);
// #endif
///////////////////////////////////////////////////////////////////////////////////////////
    HANDLE_ERROR(cudaMallocAsync((void**)&ct2_d,FPTRU_PKE_CIPHERTEXTBYTES * BATCH_SIZE,stream));

#if (FPTRU_N == 653)
    poly_fqcsubq_encode_compress_batch_pack_ct_653<<<BATCH_SIZE,FPTRU_N/8 + 1,0,stream>>>(ct2_d,r_sigma_d,bytes_d + FPTRU_PREFIXHASHBYTES,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES));
#elif (FPTRU_N == 761)
    poly_fqcsubq_encode_compress_batch_pack_ct_761<<<BATCH_SIZE,FPTRU_N/8 + 1,0,stream>>>(ct2_d,r_sigma_d,bytes_d + FPTRU_PREFIXHASHBYTES,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES));
#elif (FPTRU_N == 1277)
    poly_fqcsubq_encode_compress_batch_pack_ct_1277<<<BATCH_SIZE,FPTRU_N/8 + 1,0,stream>>>(ct2_d,r_sigma_d,bytes_d + FPTRU_PREFIXHASHBYTES,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES));
 #endif

///////////////////////////////////////////////////////////////////////////////////////////
    HANDLE_ERROR(cudaFreeAsync(r_sigma_d,stream));

    HANDLE_ERROR(cudaHostAlloc((void**)&ct2_h, FPTRU_PKE_CIPHERTEXTBYTES * BATCH_SIZE, cudaHostAllocDefault));

    HANDLE_ERROR(cudaMemcpyAsync(ct2_h, ct2_d, FPTRU_PKE_CIPHERTEXTBYTES * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));
    //对ct3计算hash值 crypto_hash_sha3_512(buf2, ct3, FPTRU_PKE_CIPHERTEXTBYTES + FPTRU_SEEDBYTES + FPTRU_PREFIXHASHBYTES);

#ifdef why3
    printf("look ct2\n");
    for(int i=0;i<BATCH_SIZE;i++){
        for(int j=0;j<FPTRU_PKE_CIPHERTEXTBYTES;j++){
            printf("%d,",ct2_h[ i * FPTRU_PKE_CIPHERTEXTBYTES + j]);
        }
        printf("\n");
    }
#endif

    HANDLE_ERROR(cudaFreeAsync(ct2_d,stream));

    HANDLE_ERROR(cudaMallocAsync((void**)&buf2_d,(FPTRU_SHAREDKEYBYTES * 2) * BATCH_SIZE,stream));

    atpqc_cuda::fips202_ws::global::sha3<512><<<BATCH_SIZE,32,0,stream>>>(buf2_d,FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2,bytes_d,FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES,FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES,BATCH_SIZE);//输出.输入，输入的长度
    

    HANDLE_ERROR(cudaFreeAsync(bytes_d,stream));


    HANDLE_ERROR(cudaHostAlloc((void**)&buf2_h, (FPTRU_SHAREDKEYBYTES * 2) * BATCH_SIZE, cudaHostAllocDefault));

    HANDLE_ERROR(cudaMemcpyAsync(buf2_h, buf2_d, (FPTRU_SHAREDKEYBYTES * 2) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));

    HANDLE_ERROR(cudaHostAlloc((void**)&buf_h, (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE, cudaHostAllocDefault));

    HANDLE_ERROR(cudaMemcpyAsync(buf_h, buf_d, (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE, cudaMemcpyDeviceToHost, stream));

    cudaDeviceSynchronize();
    HANDLE_ERROR(cudaFreeAsync(buf_d,stream));
    HANDLE_ERROR(cudaFreeAsync(buf2_d,stream));

#ifdef why3
    printf("look buf\n");
    for(int i=0;i<BATCH_SIZE;i++){
        for(int j=0;j<(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2);j++){
            printf("%d,",buf_h[ i * (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) + j]);
        }
        printf("\n");
    }

    printf("look buf2\n");
    for(int i=0;i<BATCH_SIZE;i++){
        for(int j=0;j<(FPTRU_SHAREDKEYBYTES * 2);j++){
            printf("%d,",buf2_h[ i * (FPTRU_SHAREDKEYBYTES * 2) + j]);
        }
        printf("\n");
    }

    printf("look ct2\n");
    for(int i=0;i<BATCH_SIZE;i++){
        for(int j=0;j<FPTRU_PKE_CIPHERTEXTBYTES;j++){
            printf("%d,",ct2_h[ i * FPTRU_PKE_CIPHERTEXTBYTES + j]);
        }
        printf("\n");
    }

#endif

    //?取出ct2,buf2,buf1 比较后使用cpu进行输出
    for(int j=0;j<BATCH_SIZE;j++){
        int16_t t = 0;
        int32_t fail;
        for (int i = 0; i < FPTRU_PKE_CIPHERTEXTBYTES; ++i){
            t |= ct[j * FPTRU_KEM_CIPHERTEXTBYTES + i] ^ ct2_h[j * FPTRU_PKE_CIPHERTEXTBYTES + i]; //和原来的密文进行比较，获取是否fail 
        }

        fail = (uint16_t)t;
        fail = (-fail) >> 31;

        for (int i = 0; i < FPTRU_SHAREDKEYBYTES; ++i){
            k[FPTRU_SHAREDKEYBYTES * j + i] = buf_h[(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * j + i] ^ ((-fail) & (buf_h[(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * j + i] ^ buf2_h[(FPTRU_SHAREDKEYBYTES * 2) * j + i]));
        }
        res[j] = fail;
    }

   
    /*gettimeofday(&cpu_end, NULL);
    double timeuse = 1000000*(cpu_end.tv_sec - cpu_start.tv_sec) + cpu_end.tv_usec-cpu_start.tv_usec;//单位为微秒*/
    //return elapsedTime*1000;
    return 0;

    //传输ct1进去，在gpu上比较，最后将k传输出来


    //考虑多次一起传输数据


}

#include <thread>
using namespace std;
//#define why12771

LazyCUDATimer keygenNTT("keygen NTT");
LazyCUDATimer encapsNTT("encaps NTT");
LazyCUDATimer decapsNTT("decaps NTT");

void crypto_keygen(unsigned char *array_pk,unsigned char *array_sk,cudaStream_t stream,unsigned char * coins_h_0,unsigned char * coins_d_0,poly *finv_0,poly *h_0,poly *f_0,poly * g_0, unsigned char * d_pk,unsigned char * sk_d,int batch_size){
    
    
// #ifdef allzero
//     printf("look coins in keygen\n");
//     for(int j=0;j<batch_size;j++){
//         for(int i=0;i<FPTRU_SEEDBYTES;i++){
//             printf("%d,",coins_h_0[j * FPTRU_COIN_BYTES + i]);
//         }
//         printf("\n");
//     }
    
// #endif

    HANDLE_ERROR(cudaMemcpyAsync(coins_d_0, coins_h_0, FPTRU_COIN_BYTES * batch_size, cudaMemcpyHostToDevice, stream));
    
    atpqc_cuda::fips202_ws::global::shake<256><<<batch_size, 32, 0, stream>>>(coins_d_0, FPTRU_COIN_BYTES, FPTRU_COIN_BYTES, coins_d_0, FPTRU_COIN_BYTES, FPTRU_SEEDBYTES, batch_size);
// #ifdef allzero
//     printf("look coins_d after shake in keygen\n");

// #endif
#if(FPTRU_BOUND == 7)
    poly_sample_and_double_v2<<<batch_size,FPTRU_N / 4 + 1, 0, stream >>>(f_0,coins_d_0,1,1,FPTRU_COIN_BYTES);
    poly_sample_and_double_v2<<<batch_size,FPTRU_N / 4 + 1, 0, stream>>>(g_0,coins_d_0 + FPTRU_COIN_BYTES / 2,0,0,FPTRU_COIN_BYTES);
#elif(FPTRU_BOUND == 5) 
    poly_sample_and_double_v2<<<batch_size,FPTRU_N / 8 + 1, 0, stream>>>(f_0,coins_d_0,1,1,FPTRU_COIN_BYTES);
    poly_sample_and_double_v2<<<batch_size,FPTRU_N / 8 + 1, 0, stream>>>(g_0,coins_d_0 + FPTRU_COIN_BYTES / 2,0,0,FPTRU_COIN_BYTES);
#endif

// #ifdef allzero
//     printf("look f_0 in keygen\n");
//     HANDLE_ERROR(cudaMemcpyAsync(h_h_0, f_0, sizeof(poly) * batch_size, cudaMemcpyDeviceToHost, stream));
//     cudaDeviceSynchronize();
//     for(int j=0;j<batch_size;j++){
//         for(int i=0;i<FPTRU_N;i++){
//             printf("%d,",h_h_0[j].coeffs[i]);
//         }
//         printf("\n");
//     }

//     printf("look g_0 in keygen\n");
//     HANDLE_ERROR(cudaMemcpyAsync(h_h_0, g_0, sizeof(poly) * batch_size, cudaMemcpyDeviceToHost, stream));
//     cudaDeviceSynchronize();
//     for(int j=0;j<batch_size;j++){
//         for(int i=0;i<FPTRU_N;i++){
//             printf("%d,",h_h_0[j].coeffs[i]);
//         }
//         printf("\n");
//     }
// #endif

#if (FPTRU_N == 653 || FPTRU_N == 761)
    poly_inv<<<batch_size,FPTRU_N ,0,stream>>>(finv_0,f_0);
    //poly_inv_1277<<<batch_size,FPTRU_N/2+1 ,0,stream>>>(finv_0,f_0);
    //AFTER_SPEED("v2")
#elif (FPTRU_N == 1277)
    poly_inv_1277<<<batch_size,FPTRU_N/2+1 ,0,stream>>>(finv_0,f_0);
#endif

#ifdef why1277
    poly * h_h_0;
    HANDLE_ERROR(cudaHostAlloc((void**)&h_h_0, sizeof(poly) * batch_size, cudaHostAllocDefault));
    printf("look f_0 in keygen\n");
    HANDLE_ERROR(cudaMemcpyAsync(h_h_0, f_0, sizeof(poly) * batch_size, cudaMemcpyDeviceToHost, stream));
    cudaDeviceSynchronize();
    for(int j=0;j<batch_size;j++){
        for(int i=0;i<FPTRU_N;i++){
            printf("%d,",h_h_0[j].coeffs[i]);
        }
        printf("\n");
    }

    printf("look finv_0 in keygen\n");
    HANDLE_ERROR(cudaMemcpyAsync(h_h_0, finv_0, sizeof(poly) * batch_size, cudaMemcpyDeviceToHost, stream));
    cudaDeviceSynchronize();
    for(int j=0;j<batch_size;j++){
        for(int i=0;i<FPTRU_N;i++){
            printf("%d,",h_h_0[j].coeffs[i]);
        }
        printf("\n");
    }

#endif

    //keygenNTT.start();
#if (FPTRU_N == 653)
    poly_mul_653_batch_q1_v3<<<batch_size,168,0,stream>>>(h_0,finv_0,g_0);//正确性已验证 //TODO:zhc一定要改回来
#elif (FPTRU_N == 761)
    poly_mul_761_batch_q1<<<batch_size,192,0,stream>>>(h_0,finv_0,g_0);
#elif (FPTRU_N == 1277)
    poly_mul_1277_batch_q1<<<batch_size,320,0,stream>>>(h_0,finv_0,g_0);
#endif
    //keygenNTT.stop();

#ifdef why1277

    printf("look g_0 in keygen\n");
    HANDLE_ERROR(cudaMemcpyAsync(h_h_0, g_0, sizeof(poly) * batch_size, cudaMemcpyDeviceToHost, stream));
    cudaDeviceSynchronize();
    for(int j=0;j<batch_size;j++){
        for(int i=0;i<FPTRU_N;i++){
            printf("%d,",h_h_0[j].coeffs[i]);
        }
        printf("\n");
    }

    printf("look h_0 in keygen\n");
    HANDLE_ERROR(cudaMemcpyAsync(h_h_0, h_0, sizeof(poly) * batch_size, cudaMemcpyDeviceToHost, stream));
    cudaDeviceSynchronize();
    for(int j=0;j<batch_size;j++){
        for(int i=0;i<FPTRU_N;i++){
            printf("%d,",h_h_0[j].coeffs[i]);
        }
        printf("\n");
    }

#endif


#if (FPTRU_N == 653 || FPTRU_N == 761)
    poly_fqcsubq_batch_v2<<<batch_size,FPTRU_N,0,stream>>>(h_0);
    //poly_fqcsubq_batch_1277<<<batch_size,FPTRU_N/4 + 1,0,stream>>>(h_0);
#elif (FPTRU_N == 1277)
    poly_fqcsubq_batch_1277<<<batch_size,FPTRU_N/4 + 1,0,stream>>>(h_0);
#endif

#ifdef why1277

    printf("look h_0 in keygen\n");
    HANDLE_ERROR(cudaMemcpyAsync(h_h_0, h_0, sizeof(poly) * batch_size, cudaMemcpyDeviceToHost, stream));
    cudaDeviceSynchronize();
    for(int j=0;j<batch_size;j++){
        for(int i=0;i<FPTRU_N;i++){
            printf("%d,",h_h_0[j].coeffs[i]);
        }
        printf("\n");
    }

#endif

#ifndef dg
//#define ddddbug
#ifdef ddddbug
    printf("look pk in decaps\n");
    HANDLE_ERROR(cudaMemcpyAsync(h_h_0, h_0, sizeof(poly) * batch_size, cudaMemcpyDeviceToHost, stream));
    cudaDeviceSynchronize();
    for(int i=0;i<batch_size;i++){
        for(int j=0;j<FPTRU_N;j++){
            printf("%d,",h_h_0[i].coeffs[j]);
        }
        printf("\n\n");
    }
#endif
    //CUDATimer aa("keygen pack_pk_batch");
    //aa.start();
    pack_pk_simple_batch<<<batch_size,FPTRU_N/8+1,0,stream>>>(d_pk,sk_d,h_0);
    HANDLE_ERROR(cudaMemcpyAsync(array_pk, d_pk, FPTRU_KEM_PUBLICKEYBYTES * batch_size, cudaMemcpyDeviceToHost, stream));
    //aa.stop();
#endif

#ifdef why1277
    printf("look pk in keygen\n");
    cudaDeviceSynchronize();
    for(int j=0;j<batch_size;j++){
        for(int i=0;i<FPTRU_KEM_PUBLICKEYBYTES;i++){
            printf("%d,",array_pk[j * FPTRU_KEM_PUBLICKEYBYTES + i]);
        }
        printf("\n\n");
    }
    
#endif
#ifdef dg
    HANDLE_ERROR(cudaMemcpyAsync(h_h_0, h_0, sizeof(poly) * batch_size, cudaMemcpyDeviceToHost, stream));
#endif 
    pack_sk_batch_v2<<<batch_size,FPTRU_N/8+1,0,stream>>>(sk_d,f_0,FPTRU_KEM_SECRETKEYBYTES);
    HANDLE_ERROR(cudaMemcpyAsync(array_sk, sk_d, FPTRU_KEM_SECRETKEYBYTES * batch_size, cudaMemcpyDeviceToHost, stream));
    //// HANDLE_ERROR(cudaMemcpyAsync(f_h_0, f_0, sizeof(poly) * batch_size, cudaMemcpyDeviceToHost, stream));

#ifdef why1277
    printf("look pk in keygen\n");
    cudaDeviceSynchronize();
    for(int j=0;j<batch_size;j++){
        for(int i=0;i<FPTRU_KEM_SECRETKEYBYTES;i++){
            printf("%d,",array_sk[j * FPTRU_KEM_SECRETKEYBYTES + i]);
        }
        printf("\n\n");
    }
    
#endif

    cudaStreamSynchronize(stream);
    
    //ChronoTimer timer_keypair_last("keygen last");
    //timer_keypair_last.start();
    
#ifdef dg
    for(int j=0;j<batch_size;j++){
        pack_pk(&array_pk[j * FPTRU_KEM_PUBLICKEYBYTES],&h_h_0[j]);
    }
#endif
        //// pack_sk(&array_sk[j * FPTRU_KEM_SECRETKEYBYTES],&f_h_0[j]);
        // for (int i = 0; i < FPTRU_PKE_PUBLICKEYBYTES; ++i){
        //     array_sk[j * FPTRU_KEM_SECRETKEYBYTES + i + FPTRU_PKE_SECRETKEYBYTES] = array_pk[j * FPTRU_KEM_PUBLICKEYBYTES + i];
        // }
        
    
    //timer_keypair_last.stop();
}


struct KeygenArgs {
    unsigned char *array_pk;
    unsigned char *array_sk;
    cudaStream_t stream;
    unsigned char * coins_h_0;
    unsigned char * coins_d_0;
    poly *finv_0;
    poly *h_0;
    poly *f_0;
    poly * g_0;
    unsigned char * d_pk;
    unsigned char * sk_d;
    int batch_size;
};

void thread_function_keygen(KeygenArgs *args) {
    crypto_keygen(args->array_pk,args->array_sk,args->stream,args->coins_h_0,args->coins_d_0,args->finv_0,args->h_0,args->f_0,args->g_0, args->d_pk,args->sk_d,args->batch_size);
}

double fptru_keygen(unsigned char *array_pk,unsigned char *array_sk){
    cudaMemPool_t mempool;
    cudaDeviceGetDefaultMemPool(&mempool, 0);//指定设备为0（即第一个GPU）
    uint64_t threshold = UINT64_MAX;
    cudaMemPoolSetAttribute(mempool, cudaMemPoolAttrReleaseThreshold, &threshold);

    unsigned char * coins_d_0;
    unsigned char * coins_h_0;
    poly *f_h_0;
    poly *h_h_0;

    HANDLE_ERROR(cudaHostAlloc((void**)&coins_h_0, FPTRU_COIN_BYTES * BATCH_SIZE, cudaHostAllocDefault));

    poly *f_0;
    poly *finv_0;
    poly *g_0;
    poly *h_0;
    unsigned char * d_pk;
    unsigned char * d_sk;
    
    HANDLE_ERROR(cudaMalloc((void**)&coins_d_0,FPTRU_COIN_BYTES * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&f_0,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&finv_0,sizeof(poly) * BATCH_SIZE));
    
    HANDLE_ERROR(cudaMalloc((void**)&g_0,sizeof(poly) * BATCH_SIZE));

    HANDLE_ERROR(cudaMalloc((void**)&h_0,sizeof(poly) * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&d_pk, FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&d_sk, FPTRU_KEM_SECRETKEYBYTES * BATCH_SIZE));

    for(int i=0;i<BATCH_SIZE;i++){
        randombytes(&coins_h_0[i*FPTRU_COIN_BYTES], FPTRU_SEEDBYTES);
        // printf("random %d\n",i);
        // for(int j=0;j<FPTRU_SEEDBYTES;j++){
        //     printf("%d,",coins_h_0[i*FPTRU_COIN_BYTES + j]);
        //     //coins_h_0[i*FPTRU_COIN_BYTES + j] = seed[j];
        // }
        // printf("\n");
        //randombytes(array_sk + i * FPTRU_KEM_SECRETKEYBYTES + FPTRU_PKE_SECRETKEYBYTES + FPTRU_PKE_PUBLICKEYBYTES, FPTRU_SEEDBYTES);
    }

#ifdef onlybatch
    ChronoTimer timer_keypair_batch("keygen batch");
    cudaStream_t stream0;
    HANDLE_ERROR(cudaStreamCreate(&stream0));
    for(int i=0;i<HXWTEST;i++){
        timer_keypair_batch.start();
        crypto_keygen(array_pk,array_sk,stream0,coins_h_0,coins_d_0,finv_0,h_0,f_0,g_0, d_pk,d_sk,BATCH_SIZE);
        timer_keypair_batch.stop();
    }
    HANDLE_ERROR(cudaStreamDestroy(stream0));
#endif

    
    std::vector<cudaStream_t> streams(NUM_THREAD);
    for (auto &stream: streams) {
        HANDLE_ERROR(cudaStreamCreate(&stream));
    }
    int batch_size = BATCH_SIZE/NUM_THREAD;

#ifdef onlystream
    ChronoTimer timer_keypair_stream("keygen stream");
    for(int i=0;i<HXWTEST;i++){
        timer_keypair_stream.start();
        for(int j=0;j<NUM_THREAD;j++){
            crypto_keygen(array_pk + batch_size * FPTRU_KEM_PUBLICKEYBYTES * j,
            array_sk + batch_size * FPTRU_KEM_SECRETKEYBYTES * j,
            streams[j],
            coins_h_0 + batch_size * FPTRU_COIN_BYTES * j, 
            coins_d_0 + batch_size * FPTRU_COIN_BYTES * j, 
            finv_0 + batch_size * j,h_0 + batch_size * j ,f_0 + batch_size * j , g_0 + batch_size * j, d_pk +  batch_size *FPTRU_KEM_PUBLICKEYBYTES * j,d_sk  + batch_size * FPTRU_KEM_SECRETKEYBYTES * j,batch_size);
        }
        cudaDeviceSynchronize();
        timer_keypair_stream.stop();
    }
#endif

#ifdef stream_threads
    ChronoTimer timer_keypair_stream_threads("keygen stream threads");
    std::thread threads[NUM_THREAD];
    std::vector<KeygenArgs> keygen_args(NUM_THREAD);
    for (int j = 0; j < NUM_THREAD; j++) {
        keygen_args[j].array_pk = array_pk + batch_size * FPTRU_KEM_PUBLICKEYBYTES * j;
        keygen_args[j].array_sk = array_sk + batch_size * FPTRU_KEM_SECRETKEYBYTES * j;
        keygen_args[j].stream = streams[j];
        keygen_args[j].coins_h_0 = coins_h_0 + batch_size * FPTRU_COIN_BYTES * j;
        keygen_args[j].coins_d_0 = coins_d_0 + batch_size * FPTRU_COIN_BYTES * j;
        keygen_args[j].finv_0 = finv_0 + batch_size * j;
        keygen_args[j].h_0 = h_0 + batch_size * j;
        keygen_args[j].f_0 = f_0 + batch_size * j;
        keygen_args[j].g_0 = g_0 + batch_size * j;
        keygen_args[j].d_pk = d_pk +  batch_size *FPTRU_KEM_PUBLICKEYBYTES * j;
        keygen_args[j].sk_d = d_sk  + batch_size * FPTRU_KEM_SECRETKEYBYTES * j;
        keygen_args[j].batch_size = batch_size;
    }

    for(int j=0;j<HXWTEST;j++){
        timer_keypair_stream_threads.start();
        for (int i = 0; i < NUM_THREAD; i++) {
            threads[i] = std::thread(thread_function_keygen, &keygen_args[i]);
        }
        for (int i = 0; i < NUM_THREAD; i++) {
            threads[i].join();
        }
        timer_keypair_stream_threads.stop();
    }
#endif

    HANDLE_ERROR(cudaFree(coins_d_0));

    HANDLE_ERROR(cudaFree(finv_0));
    HANDLE_ERROR(cudaFree(g_0));

    HANDLE_ERROR(cudaFree(f_0));
    HANDLE_ERROR(cudaFree(h_0));
    HANDLE_ERROR(cudaFree(d_pk));
    HANDLE_ERROR(cudaFree(d_sk));

    HANDLE_ERROR(cudaFreeHost(coins_h_0));

    
    for (auto &stream: streams) {
        HANDLE_ERROR(cudaStreamDestroy(stream));
    }

    for(int i=0;i<BATCH_SIZE;i++){
        randombytes(array_sk + i * FPTRU_KEM_SECRETKEYBYTES + FPTRU_PKE_SECRETKEYBYTES + FPTRU_PKE_PUBLICKEYBYTES, FPTRU_SEEDBYTES);
    }

    return 0;
}

void crypto_encaps(unsigned char *ct, unsigned char *k, unsigned char *pk,cudaStream_t stream,unsigned char * buf_h,unsigned char * m_h,unsigned char * buf_d,unsigned char * m_d,poly * sigma_h_d,poly * r_d,unsigned char * ct_d,unsigned char * k_d,unsigned char * pk_d,int batch_size){
    
    // ChronoTimer b("unpack_pk");
    // b.start();
#ifdef dg
    for(int i=0;i<batch_size;i++){
        
        unpack_pk(&h_h[i],&pk[i*FPTRU_KEM_PUBLICKEYBYTES]);
    
    }
#endif
    // b.stop();

    // ChronoTimer bb("m_h");
    // bb.start();
    for(int i=0;i<batch_size;i++){
        
        for(int j=0;j<FPTRU_PREFIXHASHBYTES;j++){
            m_h[i*(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) + j] = pk[i * FPTRU_KEM_PUBLICKEYBYTES + j];//4us
        }
    }
    //bb.stop();

#ifndef dg
    //CUDATimer a("unpack_pk_batch");// must in function
    //a.start();
    HANDLE_ERROR(cudaMemcpyAsync(pk_d, pk, FPTRU_KEM_PUBLICKEYBYTES * batch_size, cudaMemcpyHostToDevice, stream));
    unpack_pk_simple_batch<<<batch_size,FPTRU_N/8 + 1,0,stream>>>(sigma_h_d,pk_d,FPTRU_KEM_PUBLICKEYBYTES);
    //a.stop();
//#define dddbug
#ifdef dddbug
    poly h_h[BATCH_SIZE];
    HANDLE_ERROR(cudaMemcpyAsync(h_h, sigma_h_d, batch_size * sizeof(poly), cudaMemcpyDeviceToHost, stream));
    cudaDeviceSynchronize();
    printf("look pk in encaps\n");
    for(int i=0;i<batch_size;i++){
        for(int j=0;j<FPTRU_N;j++){
            printf("%d,",h_h[i].coeffs[j]);
        }
        printf("\n\n");
    }
#endif
#endif
    
    HANDLE_ERROR(cudaMemcpyAsync(buf_d, buf_h, (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * batch_size, cudaMemcpyHostToDevice, stream));


    HANDLE_ERROR(cudaMemcpyAsync(m_d, m_h, (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) * batch_size, cudaMemcpyHostToDevice, stream));

#ifdef dg
    HANDLE_ERROR(cudaMemcpyAsync(sigma_h_d, h_h, sizeof(poly) * batch_size, cudaMemcpyHostToDevice, stream));
#endif 

    
    atpqc_cuda::fips202_ws::global::shake<256><<<batch_size, 32, 0, stream>>>(m_d + FPTRU_PREFIXHASHBYTES, FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES, FPTRU_MSGBYTES, buf_d, FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2, 32, batch_size);

#ifdef why127712
    printf("in encaps look m\n");
    HANDLE_ERROR(cudaMemcpyAsync(m_h, m_d, (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) * batch_size, cudaMemcpyDeviceToHost, stream));
    cudaDeviceSynchronize();
    for(int j=0;j<batch_size;j++){
        for(int i=0;i<FPTRU_MSGBYTES;i++){
            printf("%d,",m_h[j*(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) + FPTRU_PREFIXHASHBYTES + i]);
        }
        printf("\n\n");
    }
    printf("done\n");
#endif

    atpqc_cuda::fips202_ws::global::sha3<512><<<batch_size,32,0,stream>>>(buf_d,FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2,m_d,FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES,FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES,batch_size);

    atpqc_cuda::fips202_ws::global::shake<256><<<batch_size, 32, 0, stream>>>(buf_d + FPTRU_SHAREDKEYBYTES, FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2, FPTRU_COIN_BYTES / 2, buf_d + FPTRU_SHAREDKEYBYTES, FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2, 32, batch_size); 
    
    
#if(FPTRU_BOUND == 7)
    poly_sample_and_double_v2<<<batch_size,FPTRU_N / 4 + 1, 0, stream>>>(r_d,buf_d + FPTRU_SHAREDKEYBYTES,0,0,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2));

#elif(FPTRU_BOUND == 5)
    poly_sample_and_double_v2<<<batch_size,FPTRU_N / 8 + 1, 0, stream>>>(r_d,buf_d + FPTRU_SHAREDKEYBYTES,0,0,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2));
#endif
    
    //encapsNTT.start();
#if (FPTRU_N == 653)
    poly_mul_653_batch_q1_v3<<<batch_size,168,0,stream>>>(sigma_h_d,sigma_h_d,r_d);
#elif (FPTRU_N == 761)
    poly_mul_761_batch_q1<<<batch_size,192,0,stream>>>(sigma_h_d,sigma_h_d,r_d);
#elif (FPTRU_N == 1277)
    poly_mul_1277_batch_q1<<<batch_size,320,0,stream>>>(sigma_h_d,sigma_h_d,r_d);
#endif
    //encapsNTT.stop();
    
    // poly_poly_sample_and_double_mul_761_q1<<<batch_size,192,0,stream>>>(buf_d + FPTRU_SHAREDKEYBYTES,0,0,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2),sigma_h_d,sigma_h_d);

    //kernelfuse.start();
#if (FPTRU_N == 653)
    poly_fqcsubq_encode_compress_batch_pack_ct_653<<<batch_size,FPTRU_N/8 + 1,0,stream>>>(ct_d,sigma_h_d,m_d+FPTRU_PREFIXHASHBYTES,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES));
#elif (FPTRU_N == 761)
    poly_fqcsubq_encode_compress_batch_pack_ct_761<<<batch_size,FPTRU_N/8 + 1,0,stream>>>(ct_d,sigma_h_d,m_d+FPTRU_PREFIXHASHBYTES,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES)); //进一步增加共享内存会出问题
#elif (FPTRU_N == 1277)
    poly_fqcsubq_encode_compress_batch_pack_ct_1277<<<batch_size,FPTRU_N/8 + 1,0,stream>>>(ct_d,sigma_h_d,m_d+FPTRU_PREFIXHASHBYTES,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES));
#endif
    //kernelfuse.stop();
    

    buf2k<<<batch_size,FPTRU_SHAREDKEYBYTES,0,stream>>>(buf_d,k_d);
    
    HANDLE_ERROR(cudaMemcpyAsync(ct, ct_d, FPTRU_KEM_CIPHERTEXTBYTES * batch_size, cudaMemcpyDeviceToHost, stream));
    
    HANDLE_ERROR(cudaMemcpyAsync(k, k_d, FPTRU_SHAREDKEYBYTES * batch_size, cudaMemcpyDeviceToHost, stream));
    
}


struct EncapsArgs{
    unsigned char *ct;
    unsigned char *k;
    unsigned char *pk;
    cudaStream_t stream;
    unsigned char * buf_h;
    unsigned char * m_h;
    unsigned char * buf_d;
    unsigned char * m_d;
    poly * sigma_h_d;
    poly * r_d;
    unsigned char * ct_d;
    unsigned char * k_d;
    unsigned char * pk_d;
    int batch_size;
};

void thread_function_encaps(EncapsArgs *args) {
    crypto_encaps(args->ct, args->k, args->pk,args->stream,args->buf_h,args->m_h,args->buf_d,args->m_d,args->sigma_h_d,args->r_d,args->ct_d,args->k_d,args->pk_d,args->batch_size);
}

void fptru_encaps(unsigned char *ct, unsigned char *k, unsigned char *pk){
    cudaMemPool_t mempool;
    cudaDeviceGetDefaultMemPool(&mempool, 0);//指定设备为0（即第一个GPU）
    uint64_t threshold = UINT64_MAX;
    cudaMemPoolSetAttribute(mempool, cudaMemPoolAttrReleaseThreshold, &threshold);

    
    unsigned char * buf_h;
    unsigned char * m_h;


    poly * sigma_h_d;
    poly * r_d;
    unsigned char * ct_d;
    unsigned char * k_d;
    unsigned char *test_d;
    unsigned char * buf_d;
    unsigned char * m_d;
    unsigned char * pk_d;

    HANDLE_ERROR(cudaHostAlloc((void**)&buf_h, (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE, cudaHostAllocDefault));
    HANDLE_ERROR(cudaHostAlloc((void**)&m_h, (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) * BATCH_SIZE, cudaHostAllocDefault));

    HANDLE_ERROR(cudaMalloc((void**)&buf_d,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&m_d,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&sigma_h_d,sizeof(poly) * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&r_d,sizeof(poly) * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&ct_d, FPTRU_PKE_CIPHERTEXTBYTES * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&k_d, FPTRU_SHAREDKEYBYTES * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&pk_d, FPTRU_KEM_PUBLICKEYBYTES * BATCH_SIZE));

    
    for(int i=0;i<BATCH_SIZE;i++){
        randombytes(&buf_h[i*(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2)], FPTRU_SEEDBYTES);
        // for(int j=0;j<FPTRU_SEEDBYTES;j++){
        //     buf_h[i*(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2)+j] = seed[j];
        // }
    }

#ifdef onlybatch
    ChronoTimer timer_encaps_batch("encaps batch");
    cudaStream_t stream0;
    HANDLE_ERROR(cudaStreamCreate(&stream0));
    for(int i=0;i<HXWTEST;i++){
        timer_encaps_batch.start();
        crypto_encaps(ct,k,pk,stream0,buf_h,m_h,buf_d,m_d,sigma_h_d,r_d,ct_d,k_d,pk_d,BATCH_SIZE);
        cudaDeviceSynchronize();
        timer_encaps_batch.stop();
    }
    cudaStreamDestroy(stream0);
#endif

    
    std::vector<cudaStream_t> streams(NUM_THREAD);
    for (auto &stream: streams) {
        HANDLE_ERROR(cudaStreamCreate(&stream));
    }
    int batch_size = BATCH_SIZE/NUM_THREAD;

#ifdef onlystream
    ChronoTimer timer_encaps_stream("encaps stream");
    for(int i=0;i<HXWTEST;i++){
        timer_encaps_stream.start();
        for(int j=0;j<NUM_THREAD;j++){
            crypto_encaps(ct + batch_size * j * FPTRU_KEM_CIPHERTEXTBYTES, k + batch_size * j * FPTRU_SHAREDKEYBYTES,pk + batch_size * j * FPTRU_KEM_PUBLICKEYBYTES,streams[j],buf_h + batch_size * j * (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2),m_h + batch_size * j * (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES),buf_d + batch_size * j * (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2),m_d + j *batch_size * (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) ,sigma_h_d + j * batch_size,r_d + j * batch_size ,ct_d + j * batch_size * FPTRU_PKE_CIPHERTEXTBYTES,k_d + j * batch_size * FPTRU_SHAREDKEYBYTES,pk_d + batch_size * j * FPTRU_KEM_PUBLICKEYBYTES,batch_size);
        }
        cudaDeviceSynchronize();
        timer_encaps_stream.stop();
    }
#endif

#ifdef stream_threads
    ChronoTimer timer_encaps_stream_threads("encaps stream threads");
    std::thread threads[NUM_THREAD];
    std::vector<EncapsArgs> encaps_args(NUM_THREAD);
    for (int j = 0; j < NUM_THREAD; j++) {
        encaps_args[j].ct = ct + batch_size * j * FPTRU_KEM_CIPHERTEXTBYTES;
        encaps_args[j].k = k + batch_size * j * FPTRU_SHAREDKEYBYTES;
        encaps_args[j].pk = pk + batch_size * j * FPTRU_KEM_PUBLICKEYBYTES;
        encaps_args[j].stream = streams[j];
        encaps_args[j].buf_h = buf_h + batch_size * j * (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2);
        encaps_args[j].m_h = m_h + batch_size * j * (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES);
        encaps_args[j].buf_d = buf_d + batch_size * j * (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2);
        encaps_args[j].m_d = m_d + j *batch_size * (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES);
        encaps_args[j].sigma_h_d = sigma_h_d + j * batch_size;
        encaps_args[j].r_d = r_d + j * batch_size ;
        encaps_args[j].ct_d = ct_d + j * batch_size * FPTRU_PKE_CIPHERTEXTBYTES;
        encaps_args[j].k_d = k_d + j * batch_size * FPTRU_SHAREDKEYBYTES;
        encaps_args[j].pk_d = pk_d + batch_size * j * FPTRU_KEM_PUBLICKEYBYTES;
        encaps_args[j].batch_size = batch_size;
    }
    
    for(int j=0;j<HXWTEST;j++){
        timer_encaps_stream_threads.start();
        for (int i = 0; i < NUM_THREAD; i++) {
            threads[i] = std::thread(thread_function_encaps, &encaps_args[i]);
        }
        for (int i = 0; i < NUM_THREAD; i++) {
            threads[i].join();
        }
        timer_encaps_stream_threads.stop();
    }
#endif

    
    for (auto &stream: streams) {
        HANDLE_ERROR(cudaStreamDestroy(stream));
    }

    HANDLE_ERROR(cudaFree(r_d));
    HANDLE_ERROR(cudaFree(m_d));
    HANDLE_ERROR(cudaFree(buf_d));
    HANDLE_ERROR(cudaFree(sigma_h_d));
    HANDLE_ERROR(cudaFree(ct_d));
    HANDLE_ERROR(cudaFree(k_d));
    HANDLE_ERROR(cudaFree(pk_d));

    HANDLE_ERROR(cudaFreeHost(buf_h));
    HANDLE_ERROR(cudaFreeHost(m_h));

}



double crypto_decaps(unsigned char *k, const unsigned char *ct,const unsigned char *sk,unsigned char * bytes, poly * polys, poly * polys_d,cudaStream_t stream,unsigned char * bytes_d,unsigned char * buf_d,poly * r_sigma_d,unsigned char * ct2_d,unsigned char * ct2_h,unsigned char * buf2_d,unsigned char * buf2_h,unsigned char * buf_h,int *res,unsigned char * sk_d,int batch_size){
    
    // ChronoTimer bb("decaps before");
    // bb.start();
    for(int j=0;j<batch_size;j++){
        for(int i = 0; i < FPTRU_PREFIXHASHBYTES; i++){
            bytes[j * (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) + i] = sk[j * FPTRU_KEM_SECRETKEYBYTES + i + FPTRU_PKE_SECRETKEYBYTES];
            bytes[(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) *batch_size +  j * (FPTRU_PKE_CIPHERTEXTBYTES + FPTRU_SEEDBYTES + FPTRU_PREFIXHASHBYTES) + i] = sk[j * FPTRU_KEM_SECRETKEYBYTES + FPTRU_PKE_SECRETKEYBYTES + i];
        }
        //unpack_ct(&polys[j], &ct[j*FPTRU_KEM_CIPHERTEXTBYTES]);


        ///unpack_sk(&polys[batch_size + j], &sk[j*FPTRU_KEM_SECRETKEYBYTES]);

#ifdef dg
        unpack_pk(&polys[2 * batch_size + j], &sk[j*FPTRU_KEM_SECRETKEYBYTES + FPTRU_PKE_SECRETKEYBYTES]);
#endif
        for(int i=0;i<FPTRU_SEEDBYTES;i++){
             bytes[(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) *batch_size +  j * (FPTRU_PKE_CIPHERTEXTBYTES + FPTRU_SEEDBYTES + FPTRU_PREFIXHASHBYTES) + FPTRU_PREFIXHASHBYTES + i] = sk[j * FPTRU_KEM_SECRETKEYBYTES + FPTRU_PKE_SECRETKEYBYTES + FPTRU_PKE_PUBLICKEYBYTES + i];
        }
        for(int i=0;i<FPTRU_PKE_CIPHERTEXTBYTES;i++){
            bytes[(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) *batch_size +  j * (FPTRU_PKE_CIPHERTEXTBYTES + FPTRU_SEEDBYTES + FPTRU_PREFIXHASHBYTES) + FPTRU_PREFIXHASHBYTES + FPTRU_SEEDBYTES + i] = ct[j * FPTRU_KEM_CIPHERTEXTBYTES + i];
        }
        
    }
    // bb.stop();
#ifdef dg
    HANDLE_ERROR(cudaMemcpyAsync(polys_d, polys, batch_size * sizeof(poly) * 3, cudaMemcpyHostToDevice, stream));
#endif

#ifndef dg
    
    HANDLE_ERROR(cudaMemcpyAsync(sk_d, sk, batch_size * FPTRU_KEM_SECRETKEYBYTES, cudaMemcpyHostToDevice, stream));
    
    //HANDLE_ERROR(cudaMemcpyAsync(polys_d, polys, batch_size * sizeof(poly) * 2, cudaMemcpyHostToDevice, stream));
    //CUDATimer a("unpack_pk_batch");// must in function
    //a.start();
    unpack_pk_simple_batch<<<batch_size,FPTRU_N/8 + 1,0,stream>>>(polys_d + 2 * batch_size,sk_d + FPTRU_PKE_SECRETKEYBYTES,FPTRU_KEM_SECRETKEYBYTES);
    //a.stop();
//#define ddbug
#ifdef ddbug
    HANDLE_ERROR(cudaMemcpyAsync(polys + 2*batch_size, polys_d + 2 * batch_size, batch_size * sizeof(poly), cudaMemcpyDeviceToHost, stream));
    cudaDeviceSynchronize();
    printf("look pk in decaps\n");
    for(int i=0;i<batch_size;i++){
        for(int j=0;j<FPTRU_N;j++){
            printf("%d,",polys[batch_size * 2 +i].coeffs[j]);
        }
        printf("\n\n");
    }
#endif
#endif

    unpack_sk_batch<<<batch_size,FPTRU_N/8+1,0,stream>>>(polys_d +batch_size, sk_d);
    

    HANDLE_ERROR(cudaMemcpyAsync(ct2_d, ct, batch_size * FPTRU_PKE_CIPHERTEXTBYTES, cudaMemcpyHostToDevice, stream));
#if (FPTRU_Q2 == 1024)
    unpack_ct_batch<<<batch_size,FPTRU_N/4 + 1,0,stream>>>(polys_d,ct2_d);
#elif (FPTRU_Q2 == 2048)
    unpack_ct_batch<<<batch_size,FPTRU_N/8 + 1,0,stream>>>(polys_d,ct2_d);
#endif
    HANDLE_ERROR(cudaMemcpyAsync(bytes_d, bytes, batch_size * ( (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) + (FPTRU_PKE_CIPHERTEXTBYTES + FPTRU_SEEDBYTES + FPTRU_PREFIXHASHBYTES) ), cudaMemcpyHostToDevice, stream));

    //decapsNTT.start();
#ifdef why12771
    poly * h_h_0;
    HANDLE_ERROR(cudaHostAlloc((void**)&h_h_0, sizeof(poly) * batch_size, cudaHostAllocDefault));
    printf("look polys_d[0] in keygen\n");
    HANDLE_ERROR(cudaMemcpyAsync(h_h_0, &polys_d[0], sizeof(poly) * batch_size, cudaMemcpyDeviceToHost, stream));
    cudaDeviceSynchronize();
    for(int j=0;j<batch_size;j++){
        for(int i=0;i<FPTRU_N;i++){
            printf("%d,",h_h_0[j].coeffs[i]);
        }
        printf("\n");
    }
    printf("look polys_d[batch_size] in keygen\n");
    HANDLE_ERROR(cudaMemcpyAsync(h_h_0, &polys_d[batch_size], sizeof(poly) * batch_size, cudaMemcpyDeviceToHost, stream));
    cudaDeviceSynchronize();
    for(int j=0;j<batch_size;j++){
        for(int i=0;i<FPTRU_N;i++){
            printf("%d,",h_h_0[j].coeffs[i]);
        }
        printf("\n");
    }

#endif
    
#if (FPTRU_N == 653)
    poly_mul_653_batch_q2<<<batch_size,168,0,stream>>>(&polys_d[0],&polys_d[0],&polys_d[batch_size]);
#elif(FPTRU_N == 761)
    poly_mul_761_batch_q2<<<batch_size,192,0,stream>>>(&polys_d[0],&polys_d[0],&polys_d[batch_size]);
#elif(FPTRU_N == 1277)
    poly_mul_1277_batch_q2<<<batch_size,320,0,stream>>>(&polys_d[0],&polys_d[0],&polys_d[batch_size]);
#endif
    //decapsNTT.stop();

    
    //错误
#ifdef why12771
    printf("look polys_d[0] after NTT\n");
    HANDLE_ERROR(cudaMemcpyAsync(h_h_0, &polys_d[0], sizeof(poly) * batch_size, cudaMemcpyDeviceToHost, stream));
    cudaDeviceSynchronize();
    for(int j=0;j<batch_size;j++){
        for(int i=0;i<FPTRU_N;i++){
            printf("%d,",h_h_0[j].coeffs[i]);
        }
        printf("\n");
    }
#endif
    poly_decode_batch<<<batch_size,FPTRU_MSGBYTES,0,stream>>>(bytes_d + FPTRU_PREFIXHASHBYTES,&polys_d[0]);

    
#ifdef why127712
    printf("in decaps look m\n");
    HANDLE_ERROR(cudaMemcpyAsync(bytes, bytes_d, batch_size * ( (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES)), cudaMemcpyDeviceToHost, stream));
    cudaDeviceSynchronize();
    for(int j=0;j<batch_size;j++){
        for(int i=0;i<FPTRU_MSGBYTES;i++){
            printf("%d,",bytes[j*(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) + FPTRU_PREFIXHASHBYTES + i]);
        }
        printf("\n\n");
    }
    printf("done\n");
    
#endif    
    
    atpqc_cuda::fips202_ws::global::sha3<512><<<batch_size,32,0,stream>>>(buf_d,FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2,bytes_d,FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES,FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES,batch_size);

    atpqc_cuda::fips202_ws::global::shake<256><<<batch_size, 32, 0, stream>>>(buf_d + FPTRU_SHAREDKEYBYTES, FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2, FPTRU_COIN_BYTES / 2, buf_d + FPTRU_SHAREDKEYBYTES, FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2, 32, batch_size);

    
#if(FPTRU_BOUND == 7) //653
    poly_sample_and_double_v2<<<batch_size,FPTRU_N / 4 + 1, 0, stream>>>(r_sigma_d,buf_d + FPTRU_SHAREDKEYBYTES,0,0,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2));
#elif(FPTRU_BOUND == 5) //761和1277
    poly_sample_and_double_v2<<<batch_size,FPTRU_N / 8 + 1, 0, stream>>>(r_sigma_d,buf_d + FPTRU_SHAREDKEYBYTES,0,0,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2));
#endif


#if (FPTRU_N == 653)
    poly_mul_653_batch_q1_v3<<<batch_size,168,0,stream>>>(r_sigma_d,&polys_d[2 * batch_size],r_sigma_d);
#elif(FPTRU_N == 761)
    poly_mul_761_batch_q1<<<batch_size,192,0,stream>>>(r_sigma_d,&polys_d[2 * batch_size],r_sigma_d);
#elif(FPTRU_N == 1277)
    poly_mul_1277_batch_q1<<<batch_size,320,0,stream>>>(r_sigma_d,&polys_d[2 * batch_size],r_sigma_d);
#endif


#if (FPTRU_N == 653)
    poly_fqcsubq_encode_compress_batch_pack_ct_653<<<batch_size,FPTRU_N/8 + 1,0,stream>>>(ct2_d,r_sigma_d,bytes_d + FPTRU_PREFIXHASHBYTES,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES));
#elif (FPTRU_N == 761)
    poly_fqcsubq_encode_compress_batch_pack_ct_761<<<batch_size,FPTRU_N/8 + 1,0,stream>>>(ct2_d,r_sigma_d,bytes_d + FPTRU_PREFIXHASHBYTES,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES));
#elif (FPTRU_N == 1277)
    poly_fqcsubq_encode_compress_batch_pack_ct_1277<<<batch_size,FPTRU_N/8 + 1,0,stream>>>(ct2_d,r_sigma_d,bytes_d + FPTRU_PREFIXHASHBYTES,(FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES));
 #endif

    
    HANDLE_ERROR(cudaMemcpyAsync(ct2_h, ct2_d, FPTRU_PKE_CIPHERTEXTBYTES * batch_size, cudaMemcpyDeviceToHost, stream));
    
    atpqc_cuda::fips202_ws::global::sha3<512><<<batch_size,32,0,stream>>>(buf2_d,(FPTRU_SHAREDKEYBYTES * 2),bytes_d,FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES,FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES,batch_size);//输出.输入，输入的长度
    

    HANDLE_ERROR(cudaMemcpyAsync(buf2_h, buf2_d, (FPTRU_SHAREDKEYBYTES * 2) * batch_size, cudaMemcpyDeviceToHost, stream));

    

    HANDLE_ERROR(cudaMemcpyAsync(buf_h, buf_d, (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * batch_size, cudaMemcpyDeviceToHost, stream));

    cudaStreamSynchronize(stream);
    
    
    for(int j=0;j<batch_size;j++){
        int16_t t = 0;
        int32_t fail;
        for (int i = 0; i < FPTRU_PKE_CIPHERTEXTBYTES; ++i){
            t |= ct[j * FPTRU_KEM_CIPHERTEXTBYTES + i] ^ ct2_h[j * FPTRU_PKE_CIPHERTEXTBYTES + i]; //和原来的密文进行比较，获取是否fail 
        }
        
        fail = (uint16_t)t;
        fail = (-fail) >> 31;

        for (int i = 0; i < FPTRU_SHAREDKEYBYTES; ++i){
            k[FPTRU_SHAREDKEYBYTES * j + i] = buf_h[(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * j + i] ^ ((-fail) & (buf_h[(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * j + i] ^ buf2_h[(FPTRU_SHAREDKEYBYTES * 2) * j + i]));
        }
        res[j] = fail;
    }

    return 0;


}



struct DecapsArgs{
    unsigned char *k;
    const unsigned char *ct;
    const unsigned char *sk;
    unsigned char * bytes;
    poly * polys;
    poly * polys_d;
    cudaStream_t stream;
    unsigned char * bytes_d;
    unsigned char * buf_d;
    poly * r_sigma_d;
    unsigned char * ct2_d;
    unsigned char * ct2_h;
    unsigned char * buf2_d;
    unsigned char * buf2_h;
    unsigned char * buf_h;
    int *res;
    unsigned char * sk_d;
    int batch_size;
};

void thread_function_decaps(DecapsArgs *args) {
    crypto_decaps(args->k, args->ct, args->sk,args->bytes, args->polys, args->polys_d,args->stream,args->bytes_d,args->buf_d,args->r_sigma_d,args->ct2_d,args->ct2_h,args->buf2_d,args->buf2_h,args->buf_h,args->res,args->sk_d,args->batch_size);
}

void check(unsigned char *k1,const unsigned char *k2,int label){
    // for(int j=0;j<BATCH_SIZE;j++){
    //     for(int i=0;i<FPTRU_SHAREDKEYBYTES;i++){
    //         printf("%d,",k2[j * FPTRU_SHAREDKEYBYTES + i]);
    //     }
    //     printf("\n");
    // }
    // printf("\n");
    int tt = 0;

    for(int i=0;i<FPTRU_SHAREDKEYBYTES * BATCH_SIZE;i++){
        if(k1[i]!=k2[i]){
            // printf("(%d,%d,%d),",i,k1[i],k2[i]);
            // tt = 1;
            printf("%d not the same\n",label);
            return;
        }
    }
    if(tt) printf("\n\n");
}

void fptru_decaps(unsigned char *k, const unsigned char *ct, const unsigned char *sk,int *res,const unsigned char *k1){
    unsigned char * bytes;

    unsigned char * bytes_d;

    poly * polys;
    poly * polys_d;
    poly * r_sigma_d;

    unsigned char * buf_d;
    unsigned char * buf_h;

    unsigned char * buf2_d;

    unsigned char * buf2_h;

    unsigned char * ct2_d;
    unsigned char * ct2_h;
    unsigned char * sk_d;

    HANDLE_ERROR(cudaHostAlloc((void**)&bytes, BATCH_SIZE * ( (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) + (FPTRU_PKE_CIPHERTEXTBYTES + FPTRU_SEEDBYTES + FPTRU_PREFIXHASHBYTES) ), cudaHostAllocDefault));

    HANDLE_ERROR(cudaHostAlloc((void**)&polys, BATCH_SIZE * sizeof(poly) * 3, cudaHostAllocDefault));
    HANDLE_ERROR(cudaHostAlloc((void**)&ct2_h, FPTRU_PKE_CIPHERTEXTBYTES * BATCH_SIZE, cudaHostAllocDefault));
    HANDLE_ERROR(cudaHostAlloc((void**)&buf2_h, (FPTRU_SHAREDKEYBYTES * 2) * BATCH_SIZE, cudaHostAllocDefault));
    HANDLE_ERROR(cudaHostAlloc((void**)&buf_h, (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE, cudaHostAllocDefault));

    HANDLE_ERROR(cudaMalloc((void**)&sk_d,FPTRU_KEM_SECRETKEYBYTES * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&polys_d,BATCH_SIZE * sizeof(poly) * 3));
    HANDLE_ERROR(cudaMalloc((void**)&bytes_d, BATCH_SIZE * ( (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) + (FPTRU_PKE_CIPHERTEXTBYTES + FPTRU_SEEDBYTES + FPTRU_PREFIXHASHBYTES) )));
    HANDLE_ERROR(cudaMalloc((void**)&buf_d,(FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2) * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&r_sigma_d,sizeof(poly) * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&ct2_d,FPTRU_PKE_CIPHERTEXTBYTES * BATCH_SIZE));
    HANDLE_ERROR(cudaMalloc((void**)&buf2_d,(FPTRU_SHAREDKEYBYTES * 2) * BATCH_SIZE));
    
    
#ifdef onlybatch 
    ChronoTimer timer_decaps_batch("decaps batch");
    cudaStream_t stream0;
    HANDLE_ERROR(cudaStreamCreate(&stream0));
    //HANDLE_ERROR(cudaMemcpyAsync(sk_d, sk, BATCH_SIZE * FPTRU_KEM_SECRETKEYBYTES, cudaMemcpyHostToDevice, stream0));
    for(int i=0;i<HXWTEST;i++){
        //printf("%d\n",i);
        timer_decaps_batch.start();
        crypto_decaps(k,ct,sk,bytes,polys,polys_d,stream0,bytes_d,buf_d,r_sigma_d,ct2_d,ct2_h,buf2_d,buf2_h,buf_h,res,sk_d,BATCH_SIZE);
        cudaDeviceSynchronize();
        timer_decaps_batch.stop();
        check(k,k1,i);
    }
    HANDLE_ERROR(cudaStreamDestroy(stream0));
#endif

    std::vector<cudaStream_t> streams(NUM_THREAD);
    for (auto &stream: streams) {
        HANDLE_ERROR(cudaStreamCreate(&stream));
    }
    int batch_size = BATCH_SIZE/NUM_THREAD;

#ifdef onlystream
    ChronoTimer timer_decaps_stream("decaps stream");
    for(int i=0;i<HXWTEST;i++){
        timer_decaps_stream.start();
        for(int j=0;j<NUM_THREAD;j++){
            crypto_decaps(k + j * batch_size * FPTRU_SHAREDKEYBYTES,ct + j * batch_size * FPTRU_KEM_CIPHERTEXTBYTES,sk+ j * batch_size * FPTRU_KEM_SECRETKEYBYTES,
            bytes+ j * batch_size * ( (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) + (FPTRU_PKE_CIPHERTEXTBYTES + FPTRU_SEEDBYTES + FPTRU_PREFIXHASHBYTES) ),
            polys+ j * batch_size * 3, polys_d+ j * batch_size * 3,
            streams[j],
            bytes_d+ j * batch_size * ( (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) + (FPTRU_PKE_CIPHERTEXTBYTES + FPTRU_SEEDBYTES + FPTRU_PREFIXHASHBYTES) ),
            buf_d+ j * batch_size * (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2), r_sigma_d+ j * batch_size,
            ct2_d+ j * batch_size * FPTRU_PKE_CIPHERTEXTBYTES, ct2_h+ j * batch_size * FPTRU_PKE_CIPHERTEXTBYTES,
            buf2_d+ j * batch_size * (FPTRU_SHAREDKEYBYTES * 2),
            buf2_h+ j * batch_size * (FPTRU_SHAREDKEYBYTES * 2), buf_h+ j * batch_size * (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2),
            res + j * batch_size ,
            sk_d+ j * batch_size * FPTRU_KEM_SECRETKEYBYTES,
            batch_size);
        }
        cudaDeviceSynchronize();
        timer_decaps_stream.stop();
        check(k,k1,i);
    }
#endif

#ifdef stream_threads
    ChronoTimer timer_decaps_stream_threads("decaps stream threads");
    std::thread threads[NUM_THREAD];
    std::vector<DecapsArgs> decaps_args(NUM_THREAD);
    for (int j = 0; j < NUM_THREAD; j++) {
        decaps_args[j].k = k + j * batch_size * FPTRU_SHAREDKEYBYTES;
        decaps_args[j].ct = ct + j * batch_size * FPTRU_KEM_CIPHERTEXTBYTES;
        decaps_args[j].sk = sk+ j * batch_size * FPTRU_KEM_SECRETKEYBYTES;
        decaps_args[j].bytes = bytes+ j * batch_size * ( (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) + (FPTRU_PKE_CIPHERTEXTBYTES + FPTRU_SEEDBYTES + FPTRU_PREFIXHASHBYTES) );
        decaps_args[j].polys = polys+ j * batch_size * 3;
        decaps_args[j].polys_d = polys_d + j * batch_size * 3;
        decaps_args[j].stream = streams[j];
        decaps_args[j].bytes_d = bytes_d+ j * batch_size * ( (FPTRU_PREFIXHASHBYTES + FPTRU_MSGBYTES) + (FPTRU_PKE_CIPHERTEXTBYTES + FPTRU_SEEDBYTES + FPTRU_PREFIXHASHBYTES) );
        decaps_args[j].buf_d = buf_d+ j * batch_size * (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2);
        decaps_args[j].r_sigma_d = r_sigma_d+ j * batch_size;
        decaps_args[j].ct2_d = ct2_d+ j * batch_size * FPTRU_PKE_CIPHERTEXTBYTES;
        decaps_args[j].ct2_h = ct2_h+ j * batch_size * FPTRU_PKE_CIPHERTEXTBYTES;
        decaps_args[j].buf2_d = buf2_d+ j * batch_size * (FPTRU_SHAREDKEYBYTES * 2);
        decaps_args[j].buf2_h = buf2_h+ j * batch_size * (FPTRU_SHAREDKEYBYTES * 2);
        decaps_args[j].buf_h = buf_h+ j * batch_size * (FPTRU_SHAREDKEYBYTES + FPTRU_COIN_BYTES / 2);
        decaps_args[j].res = res + j * batch_size;
        decaps_args[j].sk_d = sk_d+ j * batch_size * FPTRU_KEM_SECRETKEYBYTES;
        decaps_args[j].batch_size = batch_size;
    }
    
    for(int j=0;j<HXWTEST;j++){
        timer_decaps_stream_threads.start();
        for (int i = 0; i < NUM_THREAD; i++) {
            threads[i] = std::thread(thread_function_decaps, &decaps_args[i]);
        }
        for (int i = 0; i < NUM_THREAD; i++) {
            threads[i].join();
        }
        timer_decaps_stream_threads.stop();
        check(k,k1,j);
    }
#endif
    
    for (auto &stream: streams) {
        HANDLE_ERROR(cudaStreamDestroy(stream));
    }

    HANDLE_ERROR(cudaFree(polys_d));
    HANDLE_ERROR(cudaFree(r_sigma_d));
    HANDLE_ERROR(cudaFree(ct2_d));
    HANDLE_ERROR(cudaFree(bytes_d));
    HANDLE_ERROR(cudaFree(buf_d));
    HANDLE_ERROR(cudaFree(buf2_d));
    HANDLE_ERROR(cudaFree(sk_d));

    HANDLE_ERROR(cudaFreeHost(bytes));
    HANDLE_ERROR(cudaFreeHost(polys));
    HANDLE_ERROR(cudaFreeHost(ct2_h));
    HANDLE_ERROR(cudaFreeHost(buf2_h));
    HANDLE_ERROR(cudaFreeHost(buf_h));
}